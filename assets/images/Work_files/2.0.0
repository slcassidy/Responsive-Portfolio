"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
if (!Array.prototype.find) {
    Array.prototype.find = function (fn) {
        for (var i = 0; i < this.length; i++) {
            if (fn(this[i])) {
                return this[i];
            }
        }
    };
}
var bnt;
(function (bnt) {
    function fnName(fn) {
        if (typeof fn !== 'function') {
            throw new Error('Invalid argument!');
        }
        if (!fn['name']) {
            var fnStr = fn.toString();
            return fnStr.substring(9, fnStr.indexOf('(')).trim();
        }
        else {
            return fn['name'];
        }
    }
    bnt.fnName = fnName;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var LameMap = (function () {
        function LameMap() {
            this.index = [];
            this.values = [];
        }
        LameMap.prototype.get = function (k) {
            var i = this.index.indexOf(k);
            if (i != -1) {
                return this.values[i];
            }
        };
        LameMap.prototype.set = function (k, v) {
            var i = this.index.indexOf(k);
            if (i == -1) {
                i = this.index.length;
                this.index.push(k);
            }
            this.values[i] = v;
        };
        return LameMap;
    }());
    bnt.LameMap = LameMap;
    function amap() {
        return new LameMap();
    }
    bnt.amap = amap;
    function isDefined(thing) {
        return typeof thing != 'undefined' && thing != null;
    }
    bnt.isDefined = isDefined;
    function isPrimitive(primitive) {
        return [Number, Function, String, Boolean].indexOf(primitive.constructor) != -1;
    }
    bnt.isPrimitive = isPrimitive;
    function pairSet(thing, pairSetCache) {
        var cache = pairSetCache.get(thing);
        if (!cache) {
            cache = Object.keys(thing);
            cache = cache.filter(function (name) { return isDefined(thing[name]) && !isTransient(thing.constructor, name, thing[name]); });
            pairSetCache.set(thing, cache);
        }
        return cache;
    }
    function ndesc(thing, themap) {
        return themap.get(thing);
    }
    function isSerializable(thing) {
        return isPrimitive(thing) || thing.constructor == Array || thing.constructor == Object || bnt.types[bnt.fnName(thing.constructor)];
    }
    bnt.isSerializable = isSerializable;
    function isTransient(type, propertyName, property) {
        var propertyType = property.constructor;
        var typename = bnt.fnName(type);
        var typething = bnt.types[typename];
        var theTransients = bnt.transients[typename];
        return typething && typething.transientTypesMap[bnt.fnName(propertyType)] ||
            theTransients &&
                theTransients[propertyName];
    }
    bnt.isTransient = isTransient;
    function nmark(thing, path, themap, pairSetCache) {
        var desc = ndesc(thing, themap);
        if (isDefined(thing) && !desc && isSerializable(thing)) {
            var desc_1 = { ctor: bnt.fnName(thing.constructor), paths: [path], props: {}, seen: false };
            themap.set(thing, desc_1);
            pairSet(thing, pairSetCache).forEach(function (name) {
                if (isPrimitive(thing[name])) {
                    desc_1.props[name] = thing[name];
                }
                else {
                    nmark(thing[name], path.slice().concat([name]), themap, pairSetCache);
                }
            });
        }
        else {
            if (desc) {
                desc.paths.push(path);
            }
            else if (isDefined(thing) && !isSerializable(thing)) {
                throw new Error("Not serializable: " + bnt.fnName(thing.constructor) + " at /" + path);
            }
        }
    }
    bnt.nmark = nmark;
    function nser(thing, path, out, themap, pairSetCache) {
        var desc = ndesc(thing, themap);
        if (!desc) {
            throw new Error("no desc");
        }
        if (desc.seen)
            return;
        desc.seen = true;
        var def = [desc.ctor, desc.paths];
        if (Object.keys(desc.props).length) {
            def.push(desc.props);
        }
        out.push(desc);
        pairSet(thing, pairSetCache).forEach(function (name) {
            var element = thing[name];
            if (!isPrimitive(element) && isDefined(element)) {
                nser(element, path.slice().concat([name]), out, themap, pairSetCache);
            }
        });
    }
    function npath(path, thing, target) {
        if (path.length == 1) {
            target[path[0]] = thing;
        }
        else {
            var first = path.shift();
            npath(path, thing, target[first]);
        }
    }
    bnt.npath = npath;
    function nxplode(out) {
        var assignStages = [];
        var ret = undefined;
        out.forEach(function (_a) {
            var ctor = _a.ctor, paths = _a.paths, props = _a.props;
            var config = bnt.types[ctor];
            var type;
            if (config) {
                type = config.type;
            }
            else if (ctor == "Array") {
                type = Array;
            }
            else if (ctor == "Object") {
                type = Object;
            }
            else {
                throw new Error("Cannot deserialize: " + ctor);
            }
            var thing = new type();
            props && Object.keys(props)
                .filter(function (prop) { return isDefined(props[prop]) && !isTransient(type, prop, props[prop]); })
                .forEach(function (key) {
                thing[key] = props[key];
            });
            paths.forEach(function (path, stage) {
                if (!assignStages[stage])
                    assignStages[stage] = [];
                assignStages[stage].push([thing, path]);
            });
        });
        assignStages.forEach(function (assignStage) { return assignStage.forEach(function (_a) {
            var _b = __read(_a, 2), thing = _b[0], path = _b[1];
            if (path.length == 0) {
                ret = thing;
            }
            else {
                npath(path, thing, ret);
            }
        }); });
        return ret;
    }
    function nmarshall(thing) {
        var out = [];
        var themap = amap();
        var pairSetCache = amap();
        if (isDefined(thing) && !isPrimitive(thing)) {
            nmark(thing, [], themap, pairSetCache);
            nser(thing, [], out, themap, pairSetCache);
            out.forEach(function (desc) { delete desc.seen; });
            return out;
        }
        else {
            console.error('noser', thing);
            throw new Error("not supported for serialization");
        }
    }
    bnt.nmarshall = nmarshall;
    function nserialize(thing) {
        return JSON.stringify(nmarshall(thing));
    }
    bnt.nserialize = nserialize;
    function ndeserialize(str) {
        return nunmarshall(JSON.parse(str));
    }
    bnt.ndeserialize = ndeserialize;
    function nunmarshall(out) {
        return nxplode(out);
    }
    bnt.nunmarshall = nunmarshall;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    bnt.types = {};
    bnt.transients = {};
    function serializeArray(array, refCtx) {
        return array.map(function (element) {
            return serializeAny(element, refCtx);
        });
    }
    function serializeObject(object, refCtx) {
        var result = {};
        var constructorName = object.constructor && bnt.fnName(object.constructor) ? bnt.fnName(object.constructor) : "Object";
        var config = bnt.types[constructorName];
        var content = {};
        var transientTypes = {};
        config && config.transientTypes && config.transientTypes.forEach(function (type) { return transientTypes[bnt.fnName(type)] = true; });
        Object.keys(object)
            .filter(function (key) { return !(bnt.transients[constructorName] && bnt.transients[constructorName][key]); })
            .filter(function (key) { return !(object[key] && object[key].constructor && transientTypes[bnt.fnName(object[key].constructor)]); })
            .forEach(function (key) { return content[key] = serializeAny(object[key], refCtx); });
        result[constructorName] = content;
        return result;
    }
    function refCheck(thing, createFn, refCtx) {
        var reference = refCtx.getOrCreate(thing, createFn);
        if (reference.created) {
            return reference.object;
        }
        else {
            return { ":ref": reference.index };
        }
    }
    var Reference = (function () {
        function Reference(object, index, created) {
            this.object = object;
            this.index = index;
            this.created = created;
        }
        return Reference;
    }());
    bnt.Reference = Reference;
    function indexof2(arr, t) {
        return arr.indexOf(t);
    }
    bnt.indexof2 = indexof2;
    var ReferenceContext = (function () {
        function ReferenceContext() {
            this.things = [];
            this.store = [];
        }
        ReferenceContext.prototype.getOrCreate = function (thing, createFn) {
            var idx = -1;
            if (typeof thing == 'object' &&
                thing.constructor != Number &&
                thing.constructor != Boolean && thing.constructor != String) {
                idx = indexof2(this.things, thing);
            }
            var created = false;
            if (idx == -1) {
                idx = this.things.length;
                this.things.push(thing);
                this.store[idx] = createFn();
                created = true;
            }
            return new Reference(this.store[idx], idx, created);
        };
        ReferenceContext.prototype.get = function (index) {
            return this.things[index];
        };
        ReferenceContext.prototype.register = function (thing) {
            var idx = this.things.length;
            this.things[idx] = thing;
            this.store[idx] = null;
            return idx;
        };
        return ReferenceContext;
    }());
    bnt.ReferenceContext = ReferenceContext;
    function serializeAny(thing, refCtx) {
        if (typeof thing == 'undefined') {
            return refCheck({}, function () { return thing; }, refCtx);
        }
        if (thing === null) {
            return refCheck({}, function () { return thing; }, refCtx);
        }
        switch (thing.constructor) {
            case Number:
            case Boolean:
            case String:
                return refCheck(thing, function () { return thing; }, refCtx);
            case Array:
                return refCheck(thing, function () { return serializeArray(thing, refCtx); }, refCtx);
            default:
                return refCheck(thing, function () { return serializeObject(thing, refCtx); }, refCtx);
        }
    }
    bnt.serializeAny = serializeAny;
    function omarshall(thing) {
        return serializeAny(thing, new ReferenceContext());
    }
    bnt.omarshall = omarshall;
    function marshall(thing) {
        return bnt.nmarshall(thing);
    }
    bnt.marshall = marshall;
    function serialize(thing) {
        return JSON.stringify(bnt.nmarshall(thing));
    }
    bnt.serialize = serialize;
    function deserializeArray(array, refCtx) {
        var arr = [];
        var ret = new PartialObject(arr, refCtx.register(arr));
        array.forEach(function (value, index) {
            var obj = deserializeAny(value, refCtx);
            ret.mutateAll(obj.mutators);
            ret.mutate(obj.index, function (value) { arr[index] = value; });
            ret.registerKey(index.toString(), obj.index);
        });
        return ret;
    }
    function newByName(name, object, refCtx) {
        var config = null;
        if (name == "Object") {
            config = {
                type: Object
            };
        }
        else {
            config = bnt.types[name];
        }
        if (!config) {
            throw new Error("Non Serializable: " + name);
        }
        else {
            var o_1 = new config.type();
            var ret_1 = new PartialObject(o_1, refCtx.register(o_1));
            Object.keys(object).forEach(function (name) {
                var field = deserializeAny(object[name], refCtx);
                ret_1.mutateAll(field.mutators);
                ret_1.mutate(field.index, function (value) { o_1[name] = value; });
                ret_1.registerKey(name, field.index);
            });
            return ret_1;
        }
    }
    function deserializeObject(object, refCtx) {
        var type = Object.keys(object)[0];
        return newByName(type, object[type], refCtx);
    }
    var PartialObject = (function () {
        function PartialObject(instance, index) {
            this.instance = instance;
            this.index = index;
            this.mutators = [];
            this.keys = [];
        }
        PartialObject.prototype.withKey = function (key, fn) {
            var zKey = this.keys.filter(function (_a) {
                var _b = __read(_a, 2), name = _b[0], index = _b[1];
                return name == key;
            });
            if (zKey.length) {
                var _a = __read(zKey[0], 2), name = _a[0], index = _a[1];
                return [index, fn];
            }
            else {
                throw new Error("Key missing: " + key);
            }
        };
        PartialObject.prototype.registerKey = function (key, refIndex) {
            this.keys.push([key, refIndex]);
        };
        PartialObject.prototype.mutate = function (refIndex, fn) {
            this.mutators.push([refIndex, fn]);
        };
        PartialObject.prototype.mutateIn = function (mutator) {
            this.mutators.push(mutator);
        };
        PartialObject.prototype.mutateAll = function (mutators) {
            this.mutators.push.apply(this.mutators, mutators);
        };
        PartialObject.prototype.executeMutations = function (refCtx) {
            this.mutators.forEach(function (_a) {
                var _b = __read(_a, 2), index = _b[0], fn = _b[1];
                var value = refCtx.get(index);
                fn(value);
            });
        };
        return PartialObject;
    }());
    bnt.PartialObject = PartialObject;
    function deserializeAny(thing, refCtx) {
        if (typeof thing == 'undefined') {
            return new PartialObject(undefined, refCtx.register(undefined));
        }
        if (thing === null) {
            return new PartialObject(null, refCtx.register(null));
        }
        switch (thing.constructor) {
            case Number:
            case String:
            case Boolean:
                return new PartialObject(thing, refCtx.register(thing));
            case Array:
                return deserializeArray(thing, refCtx);
            default:
                if (typeof thing[':ref'] != 'undefined') {
                    return new PartialObject(undefined, thing[':ref']);
                }
                else {
                    return deserializeObject(thing, refCtx);
                }
        }
    }
    bnt.deserializeAny = deserializeAny;
    function ounmarshall(obj) {
        var refCtx = new ReferenceContext();
        var ret = deserializeAny(obj, refCtx);
        ret.executeMutations(refCtx);
        return ret.instance;
    }
    bnt.ounmarshall = ounmarshall;
    function zunmarshall(obj) {
        if (obj.constructor == Object) {
            return ounmarshall(obj);
        }
        else {
            return bnt.nunmarshall(obj);
        }
    }
    bnt.zunmarshall = zunmarshall;
    function getOldCanvasHash(canvas) {
        return ((canvas.config.width << 16) + canvas.config.height) + "";
    }
    function needsMigration(creative) {
        var elementStore = creative.elements.store;
        var elementId = Object.keys(elementStore).find(function (elementId) {
            var element = elementStore[elementId].v;
            var configStore = element.configs.store;
            return Object.keys(configStore).find(function (state_hash) { return state_hash.length > 0; });
        });
        if (!elementId)
            return false;
        var configStore = elementStore[elementId].v.configs.store;
        var state_hash = Object.keys(configStore).find(function (state_hash) { return state_hash.length > 0; });
        var state = configStore[state_hash].k;
        var old_hash = getOldCanvasHash(state.canvas) + "_" + state.segment.hash();
        return old_hash == state_hash;
    }
    function unmarshall(obj) {
        var thing = zunmarshall(obj);
        if (thing != null && thing instanceof bnt.Creative && needsMigration(thing)) {
            console.warn('migrating');
            var creative = thing;
            var idToUUID = new bnt.Map(new bnt.StringHash());
            var migrateCanvas = function (canvas) {
                var uuid;
                if (idToUUID.contains(getOldCanvasHash(canvas))) {
                    uuid = idToUUID.get(getOldCanvasHash(canvas));
                }
                else {
                    uuid = bnt.UUID.get();
                    idToUUID.put(getOldCanvasHash(canvas), uuid);
                }
                canvas.uuid = uuid;
            };
            var migrateEos = function (eos) {
                var eosStore = eos.configs.store;
                Object.keys(eosStore).forEach(function (key) {
                    migrateCanvas(eosStore[key].k.canvas);
                    eos.setConfig(eosStore[key].k, eosStore[key].v);
                    delete eosStore[key];
                });
                var elementStore = eos.element.configs.store;
                Object.keys(elementStore).forEach(function (key) {
                    migrateCanvas(elementStore[key].k.canvas);
                    eos.element.setConfig(elementStore[key].k, elementStore[key].v);
                    delete elementStore[key];
                });
            };
            creative.canvases.forEach(migrateCanvas);
            if (creative.bannerCanvases) {
                creative.bannerCanvases.forEach(migrateCanvas);
            }
            creative.forEachScreen(function (screen) {
                screen.forEachEos(function (eos) {
                    migrateEos(eos);
                });
            });
            if (creative.bannerScreen) {
                creative.bannerScreen.forEachEos(function (eos) {
                    migrateEos(eos);
                });
            }
        }
        return thing;
    }
    bnt.unmarshall = unmarshall;
    function deserialize(serialized_obj) {
        var obj = JSON.parse(serialized_obj);
        return unmarshall(obj);
    }
    bnt.deserialize = deserialize;
    function register(type, config) {
        if (!config.type)
            config.type = type;
        if (!config.transientTypes)
            config.transientTypes = [];
        config.transientTypes = __spread(config.transientTypes, [Function]);
        var transientTypesMap = {};
        config.transientTypes.forEach(function (type) { return transientTypesMap[bnt.fnName(type)] = true; });
        bnt.types[bnt.fnName(type)] = {
            namespace: config.namespace,
            transientTypes: config.transientTypes,
            transientTypesMap: transientTypesMap,
            type: config.type
        };
    }
    bnt.register = register;
    bnt.Serializable = function (config) { return function (type) {
        register(type, config);
    }; };
    function registerTransient(type, property) {
        if (!bnt.transients[bnt.fnName(type)]) {
            bnt.transients[bnt.fnName(type)] = {};
        }
        bnt.transients[bnt.fnName(type)][property.toString()] = true;
    }
    bnt.registerTransient = registerTransient;
    bnt.Transient = function (object, property) {
        registerTransient(object.constructor, property);
    };
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HashFn = (function () {
        function HashFn() {
        }
        HashFn = __decorate([
            bnt.Serializable({})
        ], HashFn);
        return HashFn;
    }());
    bnt.HashFn = HashFn;
    var FunctionHash = (function (_super) {
        __extends(FunctionHash, _super);
        function FunctionHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FunctionHash.prototype.hash = function (fn) {
            var name = bnt.fnName(fn);
            if (!name) {
                throw new Error("function without a name cannot server as map keys\n        param was: " + JSON.stringify(fn) + "\n        ");
            }
            return name;
        };
        FunctionHash = __decorate([
            bnt.Serializable({})
        ], FunctionHash);
        return FunctionHash;
    }(HashFn));
    bnt.FunctionHash = FunctionHash;
    var NumberHash = (function (_super) {
        __extends(NumberHash, _super);
        function NumberHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NumberHash.prototype.hash = function (n) {
            return n.toString();
        };
        NumberHash = __decorate([
            bnt.Serializable({})
        ], NumberHash);
        return NumberHash;
    }(HashFn));
    bnt.NumberHash = NumberHash;
    var StringHash = (function (_super) {
        __extends(StringHash, _super);
        function StringHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StringHash.prototype.hash = function (s) {
            return s;
        };
        StringHash = __decorate([
            bnt.Serializable({})
        ], StringHash);
        return StringHash;
    }(HashFn));
    bnt.StringHash = StringHash;
    var StringArrayHash = (function (_super) {
        __extends(StringArrayHash, _super);
        function StringArrayHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StringArrayHash_1 = StringArrayHash;
        StringArrayHash.hash = function (a) {
            var hash = 0;
            for (var i = 0; i < a.length; i++) {
                for (var j = 0; j < a[i].length; j++) {
                    hash = hash * 31 + a[i].charCodeAt(j);
                }
            }
            return hash + "";
        };
        ;
        StringArrayHash.prototype.hash = function (a) {
            return StringArrayHash_1.hash(a);
        };
        var StringArrayHash_1;
        StringArrayHash = StringArrayHash_1 = __decorate([
            bnt.Serializable({})
        ], StringArrayHash);
        return StringArrayHash;
    }(HashFn));
    bnt.StringArrayHash = StringArrayHash;
    var Entry = (function () {
        function Entry(k, v) {
            this.k = k;
            this.v = v;
        }
        Entry = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [Object, Object])
        ], Entry);
        return Entry;
    }());
    var Map = (function () {
        function Map(hashFn) {
            this.hashFn = hashFn;
            this.store = {};
        }
        Map_1 = Map;
        Map.prototype.getEntry = function (k) {
            if (typeof k != 'undefined') {
                return this.store[this.hashFn.hash(k)];
            }
        };
        Map.prototype.get = function (k) {
            var entry = this.getEntry(k);
            if (entry)
                return entry.v;
            return undefined;
        };
        Map.prototype.getDefault = function (k, defaultValue) {
            var value = this.get(k);
            if (!value) {
                value = defaultValue;
            }
            return value;
        };
        Map.prototype.first = function () {
            var keys = Object.keys(this.store);
            if (keys.length) {
                return this.store[keys[0]].v;
            }
        };
        Map.prototype.size = function () {
            return Object.keys(this.store).length;
        };
        Map.prototype.put = function (k, v) {
            var entry = this.getEntry(k);
            if (entry) {
                entry.v = v;
            }
            else {
                this.store[this.hashFn.hash(k)] = new Entry(k, v);
            }
        };
        Map.prototype.update = function (k, defaultValue, mutator) {
            var value = this.get(k);
            if (typeof value === 'undefined' || isNaN(value)) {
                value = defaultValue;
            }
            this.put(k, mutator(value));
        };
        Map.prototype.remove = function (k) {
            delete this.store[this.hashFn.hash(k)];
        };
        Map.prototype.filter = function (fn) {
            var map = new Map_1(this.hashFn);
            this.forEach(function (k, v) {
                if (fn(k, v)) {
                    map.put(k, v);
                }
            });
            return map;
        };
        Map.prototype.contains = function (k) {
            return typeof this.get(k) != 'undefined';
        };
        Map.prototype.mapKeys = function (fn) {
            var ret = new Map_1(this.hashFn);
            this.forEach(function (k, v) { return ret.put(k, fn(k, v)); });
            return ret;
        };
        Map.prototype.mapToArray = function (fn) {
            var ret = new Array();
            this.forEach(function (k, v) { return ret.push(fn(k, v)); });
            return ret;
        };
        Map.prototype.forEach = function (fn) {
            for (var hash in this.store) {
                var entry = this.store[hash];
                fn(entry.k, entry.v);
            }
        };
        Map.prototype.one = function () {
            return this.first();
        };
        Map.prototype.clear = function () {
            this.store = {};
        };
        var Map_1;
        Map = Map_1 = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [HashFn])
        ], Map);
        return Map;
    }());
    bnt.Map = Map;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype)
                .filter(function (name) { return name != 'constructor'; })
                .forEach(function (name) {
                derivedCtor.prototype[name] = baseCtor.prototype[name];
            });
        });
    }
    bnt.applyMixins = applyMixins;
    function extendInstance(instance, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype)
                .filter(function (name) { return name != 'constructor'; })
                .forEach(function (name) {
                instance[name] = baseCtor.prototype[name];
            });
        });
    }
    bnt.extendInstance = extendInstance;
    function Mixin() {
        var mixedTypes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            mixedTypes[_i] = arguments[_i];
        }
        return function (baseType) {
            bnt.MixinRegistry.put(baseType, mixedTypes);
            applyMixins(baseType, mixedTypes);
        };
    }
    bnt.Mixin = Mixin;
    bnt.MixinRegistry = new bnt.Map(new bnt.FunctionHash);
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    bnt.EVENTS = {};
    bnt.ACTIONS = {};
    function set2(map, name, data) {
        var entry = map[name];
        if (!entry) {
            entry = [];
            map[name] = entry;
        }
        entry.push(data);
    }
    function Event(filter) {
        return function (element, eventName) {
            set2(bnt.EVENTS, bnt.fnName(element.constructor), { event: eventName, filter: filter });
        };
    }
    bnt.Event = Event;
    function Action(options) {
        var actionParameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            actionParameters[_i - 1] = arguments[_i];
        }
        return function (implementedIn, actionName, descriptor) {
            var implPlace = 'element';
            switch (bnt.fnName(implementedIn.constructor)) {
                case 'Renderer':
                    implPlace = 'renderer';
                    break;
                case 'VideoTimeline':
                    implPlace = 'element';
                    break;
                case 'CreativeRenderer':
                    implPlace = 'creativeRenderer';
                    break;
                case 'AdController':
                    implPlace = 'controller';
                    break;
                case 'TrackingUnit':
                    implPlace = 'tracking';
                    break;
                default:
            }
            set2(bnt.ACTIONS, bnt.fnName((options && options.actionOf) || implementedIn.constructor), {
                name: actionName,
                actionOf: (options && options.actionOf),
                implementedIn: implPlace,
                config: actionParameters,
                allowed: (options && options.allowed) || (function () { return true; })
            });
        };
    }
    bnt.Action = Action;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Set = (function () {
        function Set(hashFn) {
            this.hashFn = hashFn;
            this.store = {};
            this._length = 0;
        }
        Set_1 = Set;
        Set.prototype.contains = function (t) {
            return this.store[this.hashFn.hash(t)] != undefined;
        };
        Object.defineProperty(Set.prototype, "length", {
            get: function () {
                return this._length;
            },
            enumerable: true,
            configurable: true
        });
        Set.prototype.add = function (t) {
            if (!this.contains(t))
                this._length = this._length + 1;
            this.store[this.hashFn.hash(t)] = t;
            return t;
        };
        Set.prototype.remove = function (t) {
            var hash = this.hashFn.hash(t);
            var val = this.store[hash];
            if (typeof val != undefined) {
                delete this.store[hash];
                this._length = this._length - 1;
            }
            return t;
        };
        Set.prototype.toArray = function () {
            var _this = this;
            return Object.keys(this.store).map(function (key) { return _this.store[key]; });
        };
        Set.prototype.forEach = function (walker) {
            for (var name_1 in this.store) {
                walker(this.store[name_1]);
            }
        };
        Set.prototype.mapToArray = function (fn) {
            var _this = this;
            return Object.keys(this.store).map(function (key) { return fn(_this.store[key]); });
        };
        Set.prototype.missingFrom = function (set) {
            var ret = new Set_1(this.hashFn);
            this.forEach(function (e) { if (!set.contains(e))
                ret.add(e); });
            return ret;
        };
        Set.prototype.commonWith = function (set) {
            var ret = new Set_1(this.hashFn);
            this.forEach(function (e) { if (set.contains(e))
                ret.add(e); });
            return ret;
        };
        Set.prototype.one = function () {
            return this.store[Object.keys(this.store)[0]];
        };
        Set.prototype.clear = function () {
            this.store = {};
            this._length = 0;
        };
        var Set_1;
        Set = Set_1 = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [bnt.HashFn])
        ], Set);
        return Set;
    }());
    bnt.Set = Set;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SortedEntry = (function () {
        function SortedEntry(order, t) {
            this.order = order;
            this.t = t;
        }
        return SortedEntry;
    }());
    var SortedSet = (function () {
        function SortedSet(order) {
            this.order = order;
            this.store = new Array();
        }
        SortedSet.prototype.add = function (t) {
            return this.insertSort(new SortedEntry(this.order(t), t), 0, this.store.length);
        };
        SortedSet.prototype.with = function (ts) {
            var _this = this;
            ts.forEach(function (t) { return _this.add(t); });
            return this;
        };
        SortedSet.prototype.first = function () {
            if (this.store.length)
                return this.store[0].t;
        };
        SortedSet.prototype.remove = function (t) {
            this.removeSort(this.order(t), 0, this.store.length);
        };
        SortedSet.prototype.contains = function (t) {
            return this.seek(new SortedEntry(this.order(t), t), 0, this.store.length);
        };
        SortedSet.prototype.seek = function (entry, startIndex, endIndex) {
            if (endIndex - startIndex < 1) {
                return false;
            }
            else {
                var midIndex = Math.floor((endIndex + startIndex) / 2);
                var midEntry = this.store[midIndex];
                if (entry.order < midEntry.order) {
                    return this.seek(entry, startIndex, midIndex);
                }
                else if (entry.order > midEntry.order) {
                    return this.seek(entry, midIndex + 1, endIndex);
                }
                else {
                    return true;
                }
            }
        };
        SortedSet.prototype.removeSort = function (order, startIndex, endIndex) {
            if (endIndex - startIndex < 1) {
                return false;
            }
            else {
                var midIndex = Math.floor((endIndex + startIndex) / 2);
                var midEntry = this.store[midIndex];
                if (order < midEntry.order) {
                    return this.removeSort(order, startIndex, midIndex);
                }
                else if (order > midEntry.order) {
                    return this.removeSort(order, midIndex + 1, endIndex);
                }
                else {
                    this.store.splice(midIndex, 1);
                    return true;
                }
            }
        };
        SortedSet.prototype.insertSort = function (entry, startIndex, endIndex) {
            if (endIndex - startIndex < 1) {
                this.store.splice(startIndex, 0, entry);
                return true;
            }
            else {
                var midIndex = Math.floor((endIndex + startIndex) / 2);
                var midEntry = this.store[midIndex];
                if (entry.order < midEntry.order) {
                    return this.insertSort(entry, startIndex, midIndex);
                }
                else if (entry.order > midEntry.order) {
                    return this.insertSort(entry, midIndex + 1, endIndex);
                }
                else {
                    return false;
                }
            }
        };
        return SortedSet;
    }());
    bnt.SortedSet = SortedSet;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Success = (function () {
        function Success(value) {
            this.value = value;
        }
        return Success;
    }());
    bnt.Success = Success;
    var Failure = (function () {
        function Failure(failure) {
            this.failure = failure;
        }
        return Failure;
    }());
    bnt.Failure = Failure;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SimpleFuture = (function () {
        function SimpleFuture(listenerSink) {
            this.listenerSink = listenerSink;
            this.completed = false;
        }
        SimpleFuture.prototype.map = function (func) {
            var promise = new Promise();
            this.onComplete(function (t) {
                if (t instanceof bnt.Success) {
                    promise.fulfill(new bnt.Success(func(t.value)));
                }
                else if (t instanceof bnt.Failure) {
                    promise.fulfill(t);
                }
            });
            return promise.future;
        };
        SimpleFuture.prototype.filter = function (func) {
            var promise = new Promise();
            this.onComplete(function (t) {
                if (t instanceof bnt.Success) {
                    if (func(t.value)) {
                        promise.fulfill(t);
                    }
                }
                else if (t instanceof bnt.Failure) {
                    promise.fulfill(t);
                }
            });
            return promise.future;
        };
        SimpleFuture.prototype.flatMap = function (func) {
            var promise = new Promise();
            this.onComplete(function (t) {
                if (t instanceof bnt.Success) {
                    var nextFuture = func(t.value);
                    nextFuture.onComplete(function (theTry) {
                        promise.fulfill(theTry);
                    });
                }
                else if (t instanceof bnt.Failure) {
                    promise.fulfill(t);
                }
            });
            return promise.future;
        };
        SimpleFuture.prototype.onComplete = function (func) {
            this.listenerSink(func);
        };
        SimpleFuture.prototype.onSuccess = function (func) {
            this.listenerSink(function (t) {
                if (t instanceof bnt.Success) {
                    func(t.value);
                }
            });
        };
        SimpleFuture.prototype.onFailure = function (func) {
            this.listenerSink(function (t) {
                if (t instanceof bnt.Failure) {
                    func(t.failure);
                }
            });
        };
        return SimpleFuture;
    }());
    var Promise = (function () {
        function Promise() {
            var _this = this;
            this.createStack = new Error().stack;
            this.fulfillStack = null;
            this.listenerSink = new Array();
            this.theFuture = new SimpleFuture(function (l) {
                if (_this.fulfilled) {
                    try {
                        l(_this.fulfilledWith);
                    }
                    catch (e) {
                        console.error(e.stack);
                        bnt.logger.error(e);
                    }
                }
                else {
                    _this.listenerSink.push(l);
                }
            });
            this.future = this.theFuture;
            this.fulfilled = false;
            this.fulfilledWith = undefined;
        }
        Promise.forAll = function (futures) {
            var results = new Array();
            var completed = 0;
            var remaining = futures.length;
            var promise = new Promise();
            if (remaining <= 0)
                promise.fulfill(new bnt.Success(results));
            else
                futures.map(function (f, index) { return f.onComplete(function (t) {
                    results[index] = t;
                    remaining--;
                    if (remaining <= 0)
                        promise.fulfill(new bnt.Success(results));
                }); });
            return promise.future;
        };
        Promise.fulfilledWith = function (t) {
            return new Promise().fulfill(new bnt.Success(t));
        };
        Promise.failedWith = function (failure) {
            return new Promise().fulfill(new bnt.Failure(failure));
        };
        Promise.asyncFulfilledWith = function (t) {
            var promise = new Promise();
            setTimeout(function () { return promise.fulfill(new bnt.Success(t)); }, 0);
            return promise;
        };
        Promise.tryFulfill = function (fn) {
            var p = new Promise();
            try {
                var ret = fn();
                if (typeof ret == 'object' && ret != null && typeof ret.then == 'function') {
                    ret.then(function (t) {
                        p.succeed(t);
                    }, function (e) { return p.fail(e); });
                }
                else if (ret instanceof Promise) {
                    return ret.future;
                }
                else if (ret instanceof SimpleFuture) {
                    return ret;
                }
                else {
                    p.succeed(ret);
                }
            }
            catch (e) {
                p.fail(e);
            }
            return p.future;
        };
        Promise.prototype.succeed = function (t) {
            this.fulfill(new bnt.Success(t));
        };
        Promise.prototype.fail = function (e) {
            this.fulfill(new bnt.Failure(e));
        };
        Promise.prototype.fulfill = function (t) {
            var _this = this;
            if (this.fulfilled) {
                throw new Error("Promise already fulfilled");
            }
            else {
                this.fulfilled = true;
                this.theFuture.completed = true;
                this.fulfilledWith = t;
            }
            this.listenerSink.map(function (listener) {
                try {
                    listener(t);
                }
                catch (e) {
                    console.warn('Promise listener failed. Promise created at', _this.createStack);
                    console.error('Listener failed at', e);
                    bnt.logger.error('Listener failed at', e);
                }
            });
            if (t instanceof bnt.Failure && this.listenerSink.length == 0) {
                console.warn('Promise failed. Promise created at', this.createStack);
                console.error('Promise failed at', t.failure);
                bnt.logger.error('Promise failed at', t.failure);
            }
            return this;
        };
        return Promise;
    }());
    bnt.Promise = Promise;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var IdClass = (function () {
        function IdClass() {
        }
        IdClass.getNext = function () {
            return IdClass.instance++ + "";
        };
        IdClass.instance = 0;
        return IdClass;
    }());
    bnt.IdClass = IdClass;
    var IdHash = (function (_super) {
        __extends(IdHash, _super);
        function IdHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IdHash.prototype.hash = function (idk) {
            return idk.id;
        };
        IdHash = __decorate([
            bnt.Serializable({})
        ], IdHash);
        return IdHash;
    }(bnt.HashFn));
    bnt.IdHash = IdHash;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Observable = (function () {
        function Observable(handleVoidUpdate) {
            if (handleVoidUpdate === void 0) { handleVoidUpdate = true; }
            this.handleVoidUpdate = handleVoidUpdate;
            this.observers = new Array();
            this.onVoidUpdate = undefined;
            if (handleVoidUpdate)
                this.onVoidUpdate = new Observable(false);
        }
        Observable.prototype.buildSelf = function () {
            return new Observable();
        };
        Observable.prototype.addObserver = function (o) {
            this.observers.push(o);
        };
        Observable.prototype.removeObserver = function (o) {
            var pos = this.observers.indexOf(o);
            if (pos != -1) {
                delete this.observers[pos];
            }
        };
        Observable.prototype.addEventListener = function (o) {
            this.addObserver(o);
        };
        Observable.prototype.hasObservers = function () {
            return this.observers.length > 0;
        };
        Observable.prototype.update = function (t) {
            var _this = this;
            if (this.hasObservers())
                this.observers.forEach(function (observer) { return observer(t, _this); });
            else if (this.handleVoidUpdate)
                this.onVoidUpdate.update(undefined);
        };
        Observable.prototype.map = function (mapper) {
            var observable = this.buildSelf();
            this.addObserver(function (t, o) { return observable.update(mapper(t)); });
            return observable;
        };
        Observable.prototype.filter = function (filter) {
            var observable = this.buildSelf();
            this.addObserver(function (t, o) { if (filter(t))
                observable.update(t); });
            return observable;
        };
        return Observable;
    }());
    bnt.Observable = Observable;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ObservableValue = (function (_super) {
        __extends(ObservableValue, _super);
        function ObservableValue(t) {
            var _this = _super.call(this) || this;
            _this.value = undefined;
            if (typeof t != 'undefined')
                _this.update(t);
            return _this;
        }
        ObservableValue.prototype.buildSelf = function () {
            return new ObservableValue();
        };
        ObservableValue.prototype.addObserver = function (l) {
            _super.prototype.addObserver.call(this, l);
            (this.value !== undefined) && l(this.value, this);
        };
        ObservableValue.prototype.update = function (t) {
            this.value = t;
            _super.prototype.update.call(this, t);
        };
        return ObservableValue;
    }(bnt.Observable));
    bnt.ObservableValue = ObservableValue;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function prependOutput(logLevelAsString) {
        return 'bnt.' + logLevelAsString.toLowerCase() + ': ';
    }
    function log_via_request(msg) {
        try {
            var url = 'http://bnt.log/?'.concat(JSON.stringify(msg));
            var img = new Image();
            img.src = url;
        }
        catch (er) { }
    }
    function generateConsole(level, args) {
        var logLevelAsString = LogLevel[level];
        args[0] = prependOutput(logLevelAsString) + args[0] + ' ';
        if (logLevelAsString && level <= bnt.logger.LOG_LEVEL) {
            if ((typeof (console) !== 'undefined') && (typeof (console[logLevelAsString]) !== 'undefined')) {
                console[logLevelAsString].apply(console, args);
            }
            if (bnt.QueryParams.get('useLogRequest') || bnt.logger.useRequest) {
                log_via_request(args.join('_').replace(/\s/ig, '_'));
            }
        }
    }
    function log() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        generateConsole(LogLevel.debug, args);
    }
    function debug() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        generateConsole(LogLevel.debug, args);
    }
    function info() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        generateConsole(LogLevel.info, args);
    }
    function warn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        generateConsole(LogLevel.warn, args);
    }
    function error() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        generateConsole(LogLevel.error, args);
    }
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["error"] = 0] = "error";
        LogLevel[LogLevel["warn"] = 1] = "warn";
        LogLevel[LogLevel["info"] = 2] = "info";
        LogLevel[LogLevel["debug"] = 3] = "debug";
    })(LogLevel = bnt.LogLevel || (bnt.LogLevel = {}));
    bnt.logger = {
        LOG_LEVEL: LogLevel.error,
        useRequest: false,
        log: log,
        info: info,
        warn: warn,
        debug: debug,
        error: error,
        log_via_request: log_via_request
    };
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    bnt.ASSET_PROTOCOL = '';
    var AssetNature = (function () {
        function AssetNature() {
        }
        AssetNature.TYPE_IMAGE = "image";
        AssetNature.TYPE_VIDEO = "video";
        AssetNature.TYPE_VAST = "vast";
        return AssetNature;
    }());
    bnt.AssetNature = AssetNature;
    bnt.LIBRARY = {};
    bnt.ASSET_VERSIONS = {};
    var ASSET_VERSIONS_LABELS = {
        mobile: 'mp4_768k',
        desktop: 'mp4_1536k',
        thumb: 'thumb'
    };
    function isVast(asset) {
        var assetId = asset.substr('asset://'.length);
        return bnt.LIBRARY[assetId] && bnt.LIBRARY[assetId].nature === AssetNature.TYPE_VAST;
    }
    bnt.isVast = isVast;
    function getVast(asset) {
        var assetId = asset.substr('asset://'.length);
        return bnt.LIBRARY[assetId].link;
    }
    bnt.getVast = getVast;
    function extractAssetId(urlOrAsset) {
        return urlOrAsset.substr('asset://'.length);
    }
    bnt.extractAssetId = extractAssetId;
    function getSrc(urlOrAsset) {
        if (typeof urlOrAsset != "string")
            urlOrAsset = "";
        if (urlOrAsset.indexOf('asset://') == 0) {
            var assetId = extractAssetId(urlOrAsset);
            var assetVersions = bnt.ASSET_VERSIONS[assetId];
            if (assetVersions) {
                bnt.DeviceAndPlatformSignal.init();
                var platforms = bnt.DeviceAndPlatformSignal.value.value;
                if (platforms.device == bnt.Device.Mobile || platforms.device == bnt.Device.Tablet) {
                    if (assetVersions[ASSET_VERSIONS_LABELS.mobile]) {
                        return formatProtocol(assetVersions[ASSET_VERSIONS_LABELS.mobile]);
                    }
                }
                else {
                    if (assetVersions[ASSET_VERSIONS_LABELS.desktop]) {
                        return formatProtocol(assetVersions[ASSET_VERSIONS_LABELS.desktop]);
                    }
                }
            }
            var asset = bnt.LIBRARY[assetId];
            if (!asset) {
                throw new Error("asset not defined: " + assetId);
            }
            return formatProtocol(asset.link);
        }
        else {
            return formatProtocol(urlOrAsset);
        }
    }
    bnt.getSrc = getSrc;
    function formatProtocol(url) {
        if (!bnt.ASSET_PROTOCOL) {
            var w = void 0, protocol = 'https:';
            try {
                do {
                    w = w ? w.parent : window;
                    if (w.location.protocol != 'about:') {
                        protocol = w.location.protocol === 'http:' ? 'http:' : 'https:';
                        break;
                    }
                } while (w != window.top);
            }
            catch (er) {
            }
            bnt.ASSET_PROTOCOL = protocol;
        }
        return url ? url.replace(/(https|http):/, bnt.ASSET_PROTOCOL) : "";
    }
    bnt.formatProtocol = formatProtocol;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Brain = (function () {
        function Brain() {
        }
        Brain.hexToRgb = function (hex) {
            var check = new RegExp('^(#)?([0-9a-fA-F]{3})([0-9a-fA-F]{3})?$');
            var tempHex = hex;
            if (tempHex[0] == "#")
                tempHex = tempHex.substr(1);
            if ((tempHex.length == 3 || tempHex.length == 6) && check.test(tempHex)) {
                if (tempHex.length == 3) {
                    var temp = tempHex;
                    tempHex = '';
                    for (var i = 0; i < 3; i++)
                        tempHex += temp[i] + temp[i];
                }
                var triplets = /^([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i.exec(tempHex).slice(1);
                return [
                    parseInt(triplets[0], 16),
                    parseInt(triplets[1], 16),
                    parseInt(triplets[2], 16)
                ];
            }
            else {
                bnt.logger.warn("Invalid hex!", hex);
                return [0, 0, 0];
            }
        };
        Brain.findInContainer = function (container, theEos) {
            var e_1, _a;
            var parent = null;
            try {
                for (var _b = __values(container.eos), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var eos = _c.value;
                    if (eos == theEos) {
                        parent = container;
                        break;
                    }
                    else if (eos.element instanceof bnt.Group) {
                        var p = Brain.findInContainer(eos.element, theEos);
                        if (p) {
                            parent = p;
                            break;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return parent;
        };
        Brain.getParentForEos = function (creative, theEos) {
            var e_2, _a;
            try {
                for (var _b = __values(creative.screens), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var screen_1 = _c.value;
                    var p = Brain.findInContainer(screen_1, theEos);
                    if (p)
                        return p;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return null;
        };
        Brain.getParentScreenForEos = function (creative, theEos) {
            var e_3, _a;
            try {
                for (var _b = __values(creative.screens), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var screen_2 = _c.value;
                    var p = Brain.findInContainer(screen_2, theEos);
                    if (p)
                        return screen_2;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return null;
        };
        Brain.isFunction = function (value) {
            var type = typeof value;
            return !!value && type === 'function' && Object.prototype.toString.call(value) === '[object Function]';
        };
        Brain.areMethodsOn = function (methodsArray, checkObject) {
            return methodsArray
                .every(function (neededFn) {
                return typeof checkObject[neededFn] == 'function';
            });
        };
        return Brain;
    }());
    bnt.Brain = Brain;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Stopwatch = (function () {
        function Stopwatch() {
            var _this = this;
            this.elapsedBeforeLastStop = 0;
            this.lastStartTime = NaN;
            this.sinceLastStart = function () {
                return isNaN(_this.lastStartTime) ? 0 : Date.now() - _this.lastStartTime;
            };
        }
        Stopwatch.prototype.play = function () {
            if (isNaN(this.lastStartTime))
                this.lastStartTime = Date.now();
        };
        Stopwatch.prototype.pause = function () {
            this.elapsedBeforeLastStop += this.sinceLastStart();
            this.lastStartTime = NaN;
        };
        Stopwatch.prototype.stop = function () {
            this.elapsedBeforeLastStop = 0;
            this.lastStartTime = NaN;
        };
        Stopwatch.prototype.getTime = function () {
            return this.elapsedBeforeLastStop + this.sinceLastStart();
        };
        return Stopwatch;
    }());
    bnt.Stopwatch = Stopwatch;
    var Timer = (function (_super) {
        __extends(Timer, _super);
        function Timer(duration) {
            var _this = _super.call(this) || this;
            _this.duration = duration;
            return _this;
        }
        Timer.prototype.play = function () {
            if (this.getTimeRemaining() === 0) {
                this.stop();
            }
            _super.prototype.play.call(this);
        };
        Timer.prototype.getTimeRemaining = function () {
            return Math.max(this.duration - this.getTime(), 0);
        };
        return Timer;
    }(Stopwatch));
    bnt.Timer = Timer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var UUID = (function () {
        function UUID() {
        }
        UUID.get = function () {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        };
        return UUID;
    }());
    bnt.UUID = UUID;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var QueryParams = (function () {
        function QueryParams() {
        }
        QueryParams.get = function (name) {
            return QueryParams.params[name];
        };
        QueryParams.set = function (name, value) {
            QueryParams.params[name] = value;
        };
        QueryParams.has = function (name) {
            return QueryParams.params.hasOwnProperty(name);
        };
        QueryParams.init = function () {
            if (QueryParams.inited)
                return;
            QueryParams.inited = true;
            window.addEventListener('message', function (e) {
                if (e.data && e.data.type && e.data.type == 'queryParams') {
                    var shouldUpdate_1 = false;
                    var signals_1 = QueryParams.get(bnt.Signal.queryParamsKey);
                    if (QueryParams.has(bnt.Signal.queryParamsKey)) {
                        Object.keys(e.data.data).forEach(function (k) {
                            if (signals_1[k] != e.data.data[k]) {
                                signals_1[k] = e.data.data[k];
                                shouldUpdate_1 = true;
                            }
                        });
                    }
                    else {
                        signals_1 = e.data.data;
                        shouldUpdate_1 = true;
                    }
                    if (shouldUpdate_1) {
                        QueryParams.set(bnt.Signal.queryParamsKey, signals_1);
                        QueryParams.onChange.update(undefined);
                    }
                }
            });
            if (QueryParams.has(bnt.Signal.queryParamsKey)) {
                var signals_2 = QueryParams.get(bnt.Signal.queryParamsKey)
                    .split("|")
                    .map(function (pair) { return pair.split(":"); })
                    .reduce(function (o, a) {
                    o[a[0].replace(/_/g, " ")] = a.slice(1).join(":");
                    return o;
                }, {});
                QueryParams.set(bnt.Signal.queryParamsKey, signals_2);
            }
            QueryParams.onChange.update(undefined);
        };
        QueryParams.onChange = new bnt.Observable();
        QueryParams.params = {};
        QueryParams.inited = false;
        return QueryParams;
    }());
    bnt.QueryParams = QueryParams;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var RootContext = (function () {
        function RootContext() {
            this.instances = new bnt.Map(new bnt.FunctionHash());
        }
        RootContext.prototype.resolve = function (ctor) {
            return this.instances.get(ctor);
        };
        RootContext.prototype.register = function (ctor, ins) {
            this.instances.put(ctor, ins);
        };
        return RootContext;
    }());
    var DerivedResolveContext = (function (_super) {
        __extends(DerivedResolveContext, _super);
        function DerivedResolveContext() {
            var _this = _super.call(this) || this;
            _this.parent = null;
            return _this;
        }
        DerivedResolveContext.prototype.resolve = function (ctor) {
            var local = _super.prototype.resolve.call(this, ctor);
            if (typeof local == 'undefined' && this.parent) {
                return this.parent.resolve(ctor);
            }
            else {
                return local;
            }
        };
        return DerivedResolveContext;
    }(RootContext));
    var resolveContext = new RootContext();
    function withContext(context, fn) {
        var oldContext = resolveContext;
        context.parent = resolveContext;
        resolveContext = context;
        try {
            return fn.apply(this);
        }
        finally {
            resolveContext = oldContext;
        }
    }
    function get(ctor) {
        return resolveContext.resolve(ctor);
    }
    bnt.get = get;
    function lazyGet(ctor) {
        var boundContext = resolveContext;
        return function () { return boundContext.resolve(ctor); };
    }
    bnt.lazyGet = lazyGet;
    function set(ctor, val) {
        resolveContext.register(ctor, val);
        return val;
    }
    bnt.set = set;
    function withVals(vals, fn) {
        var ctx = new DerivedResolveContext();
        vals.forEach(function (_a) {
            var _b = __read(_a, 2), ctor = _b[0], val = _b[1];
            return ctx.register(ctor, val);
        });
        return withContext(ctx, fn);
    }
    bnt.withVals = withVals;
    function registerSingleton(ctor) {
        var ins = new ctor();
        resolveContext.register(ctor, ins);
    }
    bnt.Singleton = function (ctor) { return registerSingleton(ctor); };
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function etc() {
        bnt.logger.log(new Error("Not implemented").stack);
        return null;
    }
    bnt.etc = etc;
    function ifNotFalsy(value, defaultValue) {
        if (!value) {
            return defaultValue;
        }
        return value;
    }
    bnt.ifNotFalsy = ifNotFalsy;
    function withDefault(value, defaultValue) {
        if (typeof value != 'undefined') {
            return value;
        }
        else {
            return defaultValue;
        }
    }
    bnt.withDefault = withDefault;
})(bnt || (bnt = {}));
if (typeof Object.assign != 'function') {
    (function () {
        Object.assign = function (target) {
            'use strict';
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (source.hasOwnProperty(nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    })();
}
var bnt;
(function (bnt) {
    var prefixes = ["webkit"];
    function style(element, styleOptions) {
        var e_4, _a;
        for (var name in styleOptions) {
            try {
                for (var prefixes_1 = __values(prefixes), prefixes_1_1 = prefixes_1.next(); !prefixes_1_1.done; prefixes_1_1 = prefixes_1.next()) {
                    var prefix = prefixes_1_1.value;
                    element.style[prefix + name.substr(0, 1).toUpperCase() + name.substr(1)] = styleOptions[name];
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (prefixes_1_1 && !prefixes_1_1.done && (_a = prefixes_1.return)) _a.call(prefixes_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            element.style[name] = styleOptions[name];
        }
    }
    bnt.style = style;
    function px(value) {
        return value + "px";
    }
    bnt.px = px;
    function percent(value) {
        return value + "%";
    }
    bnt.percent = percent;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function createElement(name, parent) {
        var element = document.createElement(name);
        parent.appendChild(element);
        return element;
    }
    bnt.createElement = createElement;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TextConfig = (function () {
        function TextConfig() {
            this.text = undefined;
        }
        TextConfig.prototype.configureText = function (config, defaults) {
            this.text = bnt.withDefault(config.text, defaults.text);
        };
        TextConfig = __decorate([
            bnt.Serializable({})
        ], TextConfig);
        return TextConfig;
    }());
    bnt.TextConfig = TextConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DurationConfig = (function () {
        function DurationConfig() {
            this.duration = undefined;
        }
        DurationConfig.prototype.configureDuration = function (durationC, defaults) {
            this.duration = bnt.withDefault(durationC.duration, defaults.duration);
        };
        return DurationConfig;
    }());
    bnt.DurationConfig = DurationConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DimensionConfig = (function () {
        function DimensionConfig() {
        }
        DimensionConfig.prototype.configureDimension = function (dimension, defaults) {
            this.width = bnt.withDefault(dimension.width, defaults.width);
            this.height = bnt.withDefault(dimension.height, defaults.height);
            this.preserveAspectRatio = bnt.withDefault(dimension.preserveAspectRatio, defaults.preserveAspectRatio);
        };
        DimensionConfig = __decorate([
            bnt.Serializable({})
        ], DimensionConfig);
        return DimensionConfig;
    }());
    bnt.DimensionConfig = DimensionConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SrcConfig = (function () {
        function SrcConfig() {
        }
        SrcConfig.prototype.configureSrc = function (config, defaults) {
            this.src = bnt.withDefault(config.src, defaults.src);
        };
        SrcConfig = __decorate([
            bnt.Serializable({})
        ], SrcConfig);
        return SrcConfig;
    }());
    bnt.SrcConfig = SrcConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CoverConfig = (function () {
        function CoverConfig() {
        }
        CoverConfig.prototype.configureCover = function (config, defaults) {
            this.cover = bnt.withDefault(config.cover, defaults.cover);
        };
        CoverConfig = __decorate([
            bnt.Serializable({})
        ], CoverConfig);
        return CoverConfig;
    }());
    bnt.CoverConfig = CoverConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HoverImageConfig = (function () {
        function HoverImageConfig() {
        }
        HoverImageConfig.prototype.configureHoverImage = function (config, defaults) {
            this.hoverImage = bnt.withDefault(config.hoverImage, defaults.hoverImage);
        };
        HoverImageConfig = __decorate([
            bnt.Serializable({})
        ], HoverImageConfig);
        return HoverImageConfig;
    }());
    bnt.HoverImageConfig = HoverImageConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TextFormattingConfig = (function () {
        function TextFormattingConfig() {
        }
        TextFormattingConfig.prototype.configureTextFormatting = function (config, defaults) {
            this.color = bnt.withDefault(config.color, defaults.color);
            this.textAlign = bnt.withDefault(config.textAlign, defaults.textAlign);
            this.fontFamily = bnt.withDefault(config.fontFamily, defaults.fontFamily);
            this.fontWeight = bnt.withDefault(config.fontWeight, defaults.fontWeight);
            this.fontStyle = bnt.withDefault(config.fontStyle, defaults.fontStyle);
            this.textDecoration = bnt.withDefault(config.textDecoration, defaults.textDecoration);
            this.fontSize = bnt.withDefault(config.fontSize, defaults.fontSize);
            this.textTransform = bnt.withDefault(config.textTransform, defaults.textTransform);
        };
        TextFormattingConfig = __decorate([
            bnt.Serializable({})
        ], TextFormattingConfig);
        return TextFormattingConfig;
    }());
    bnt.TextFormattingConfig = TextFormattingConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var RotationConfig = (function () {
        function RotationConfig() {
        }
        RotationConfig.prototype.configureAngle = function (rotation, defaults) {
            this.angle = bnt.withDefault(rotation.angle, defaults.angle);
        };
        RotationConfig = __decorate([
            bnt.Serializable({})
        ], RotationConfig);
        return RotationConfig;
    }());
    bnt.RotationConfig = RotationConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var PanConfig = (function () {
        function PanConfig() {
        }
        PanConfig.prototype.configurePan = function (config, defaults) {
            this.panActive = bnt.withDefault(config.panActive, defaults.panActive);
            this.useGyroscope = bnt.withDefault(config.useGyroscope, defaults.useGyroscope);
            this.usePointer = bnt.withDefault(config.usePointer, defaults.usePointer);
        };
        PanConfig = __decorate([
            bnt.Serializable({})
        ], PanConfig);
        return PanConfig;
    }());
    bnt.PanConfig = PanConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CanvasConfig = (function () {
        function CanvasConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureCanvas(config);
        }
        CanvasConfig.prototype.configureCanvas = function (config) {
            if (config === void 0) { config = {}; }
            this.configureDimension(config, bnt.Defaults.canvas);
            this.name = bnt.withDefault(config.name, bnt.Defaults.canvas.name);
        };
        CanvasConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig),
            __metadata("design:paramtypes", [Object])
        ], CanvasConfig);
        return CanvasConfig;
    }());
    bnt.CanvasConfig = CanvasConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SegmentConfig = (function () {
        function SegmentConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureSegment(config);
        }
        SegmentConfig.prototype.configureSegment = function (config) {
            if (config === void 0) { config = {}; }
            this.name = bnt.withDefault(config.name, bnt.Defaults.segment.name);
            this.readonly = bnt.withDefault(config.readonly, bnt.Defaults.segment.readonly);
        };
        SegmentConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], SegmentConfig);
        return SegmentConfig;
    }());
    bnt.SegmentConfig = SegmentConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var animationDefault = {
        name: '',
        duration: 0.4,
        delay: 0,
        ease: "linear",
        repeat: 1
    };
    bnt.Defaults = {
        creative: {
            name: "Unnamed Creative",
            skippable: false,
            color: "#fff"
        },
        canvas: {
            name: 'Landscape video',
            width: 1280,
            height: 720
        },
        animation: Object.assign({}, animationDefault),
        screen: {
            onShow: Object.assign({}, animationDefault),
            onHide: Object.assign({}, animationDefault),
            duration: 15
        },
        video: {
            width: 320,
            height: 180,
            preserveAspectRatio: false,
            src: '',
            autoplay: true,
            mute: false,
            cover: "",
            visible: true,
            panActive: false,
            useGyroscope: true,
            usePointer: true,
            videoWidth: 0,
            videoHeight: 0,
            videoDuration: 0,
            coverWidth: 0,
            coverHeight: 0
        },
        image: {
            width: 100,
            height: 100,
            preserveAspectRatio: false,
            src: '',
            hoverImage: '',
            angle: 0,
            visible: true,
            panActive: false,
            useGyroscope: true,
            usePointer: true,
            imageWidth: 0,
            imageHeight: 0
        },
        closeButton: {
            width: 50,
            height: 50,
            preserveAspectRatio: false,
        },
        htmlBox: {
            width: 200,
            height: 100,
            preserveAspectRatio: false,
            visible: true
        },
        textBox: {
            text: "textbox",
            width: 150,
            height: 50,
            preserveAspectRatio: false,
            angle: 0,
            visible: true
        },
        textFormatting: {
            color: "#000",
            textAlign: "left",
            fontFamily: "Arial",
            fontWeight: "normal",
            fontStyle: "normal",
            fontSize: 16,
            textTransform: "none",
            textDecoration: "none"
        },
        elementOnScreen: {
            x: 0,
            y: 0,
            zIndex: 0,
            onHide: Object.assign({}, animationDefault),
            onShow: Object.assign({}, animationDefault),
        },
        shape: {
            width: 100,
            height: 100,
            preserveAspectRatio: false,
            backgroundColor: "#ccc",
            radius: 0,
            border: 1,
            borderColor: "#aaa",
            angle: 0,
            visible: true
        },
        hotspot: {
            width: 100,
            height: 100,
            preserveAspectRatio: false,
            radius: 0,
            angle: 0,
            visible: true
        },
        text: {
            text: "textbox"
        },
        segment: {
            name: "Unnamed Segment",
            readonly: false
        },
        subtitle: {
            width: 350,
            height: 100,
            preserveAspectRatio: false,
            angle: 0,
            src: '',
            targetVideo: undefined,
            visibleOnMute: false,
            visible: false,
            subtitleActions: []
        },
        group: {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            visible: true,
            onHide: Object.assign({}, animationDefault),
            onShow: Object.assign({}, animationDefault)
        }
    };
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CreativeConfig = (function () {
        function CreativeConfig(config) {
            if (config === void 0) { config = {}; }
            this.name = bnt.withDefault(config.name, bnt.Defaults.creative.name);
            this.skippable = bnt.withDefault(config.skippable, bnt.Defaults.creative.skippable);
            this.color = bnt.withDefault(config.color, bnt.Defaults.creative.color);
        }
        CreativeConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig),
            __metadata("design:paramtypes", [Object])
        ], CreativeConfig);
        return CreativeConfig;
    }());
    bnt.CreativeConfig = CreativeConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TransitionConfig = (function () {
        function TransitionConfig() {
        }
        TransitionConfig.prototype.configureOnHide = function (config) {
            this.onHide = new bnt.AnimationConfig(config);
        };
        TransitionConfig.prototype.configureOnShow = function (config) {
            this.onShow = new bnt.AnimationConfig(config);
        };
        TransitionConfig = __decorate([
            bnt.Serializable({})
        ], TransitionConfig);
        return TransitionConfig;
    }());
    bnt.TransitionConfig = TransitionConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VisibilityConfig = (function () {
        function VisibilityConfig() {
        }
        VisibilityConfig.prototype.configureVisibility = function (config, defaults) {
            this.visible = bnt.withDefault(config.visible, defaults.visible);
        };
        VisibilityConfig = __decorate([
            bnt.Serializable({})
        ], VisibilityConfig);
        return VisibilityConfig;
    }());
    bnt.VisibilityConfig = VisibilityConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ScreenConfig = (function () {
        function ScreenConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureOnHide(config.onHide);
            this.configureOnShow(config.onShow);
            this.configureDuration(config, bnt.Defaults.screen);
        }
        ScreenConfig = __decorate([
            bnt.Mixin(bnt.TransitionConfig, bnt.DurationConfig),
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], ScreenConfig);
        return ScreenConfig;
    }());
    bnt.ScreenConfig = ScreenConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Code = (function () {
        function Code() {
            this.css = "";
            this.js = "";
        }
        Code = __decorate([
            bnt.Serializable({})
        ], Code);
        return Code;
    }());
    bnt.Code = Code;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SignalHash = (function (_super) {
        __extends(SignalHash, _super);
        function SignalHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SignalHash.prototype.hash = function (signal) {
            return signal.hash();
        };
        SignalHash = __decorate([
            bnt.Serializable({})
        ], SignalHash);
        return SignalHash;
    }(bnt.HashFn));
    bnt.SignalHash = SignalHash;
    var Signal = (function () {
        function Signal() {
            var _this = this;
            this.id = bnt.IdClass.getNext();
            bnt.QueryParams.onChange.addObserver(function () {
                if (bnt.QueryParams.has(Signal.queryParamsKey) &&
                    bnt.QueryParams.get(Signal.queryParamsKey).hasOwnProperty(_this.signalName) &&
                    bnt.QueryParams.get(Signal.queryParamsKey)[_this.signalName] != _this.constructor.value.value) {
                    _this.constructor.forceBlockUpdate = true;
                    var value = bnt.QueryParams.get(Signal.queryParamsKey)[_this.signalName];
                    try {
                        value = JSON.parse(value);
                    }
                    catch (err) {
                    }
                    if (JSON.stringify(_this.constructor.value.value) != JSON.stringify(value))
                        _this.constructor.value.update(value);
                }
            });
        }
        Signal.update = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
        };
        Signal.loop = function (ctor, updateFn, seconds) {
            if (seconds === void 0) { seconds = 1; }
            if (!ctor.forceBlockUpdate)
                updateFn();
            setTimeout(Signal.loop.bind(this, ctor, updateFn, seconds), seconds * 1000);
        };
        Signal.init = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
        };
        Signal.prototype.hash = function () { return bnt.fnName(this.constructor); };
        Signal.prototype.sameTypeAs = function (signal) {
            return this.constructor == signal.constructor;
        };
        Signal.queryParamsKey = "signals";
        Signal.signalName = "Signal";
        Signal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Signal.prototype, "id", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Signal, "signalName", void 0);
        return Signal;
    }());
    bnt.Signal = Signal;
    bnt.signals = {};
    var SignalTypes;
    (function (SignalTypes) {
        SignalTypes[SignalTypes["General"] = 0] = "General";
        SignalTypes[SignalTypes["Teads"] = 1] = "Teads";
    })(SignalTypes = bnt.SignalTypes || (bnt.SignalTypes = {}));
    bnt.RegisterSignal = function () {
        var signalType = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            signalType[_i] = arguments[_i];
        }
        return function (ctor) {
            signalType.forEach(function (type) {
                if (!bnt.signals[SignalTypes[type]]) {
                    bnt.signals[SignalTypes[type]] = [];
                }
                if (bnt.signals[SignalTypes[type]].indexOf(ctor) == -1) {
                    bnt.signals[SignalTypes[type]].push(ctor);
                }
            });
        };
    };
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TimeSignal = (function (_super) {
        __extends(TimeSignal, _super);
        function TimeSignal() {
            var _this = _super.call(this) || this;
            _this.signalName = TimeSignal_1.signalName;
            _this.timeTable = [];
            TimeSignal_1.update();
            return _this;
        }
        TimeSignal_1 = TimeSignal;
        TimeSignal.prototype.isActive = function () {
            return TimeSignal_1.value.value &&
                TimeSignal_1.value.value.day != -1 &&
                this.timeTable.length > TimeSignal_1.value.value.day &&
                this.timeTable[TimeSignal_1.value.value.day].length > TimeSignal_1.value.value.hour &&
                this.timeTable[TimeSignal_1.value.value.day][TimeSignal_1.value.value.hour];
        };
        TimeSignal.update = function () {
            if (TimeSignal_1.forceBlockUpdate)
                return;
            var date = new Date();
            var day = date.getDay();
            var hour = date.getHours();
            if (!TimeSignal_1.value.value || day != TimeSignal_1.value.value.day || hour != TimeSignal_1.value.value.hour) {
                TimeSignal_1.value.update({ day: day, hour: hour });
            }
        };
        TimeSignal.prototype.hash = function () { return _super.prototype.hash.call(this) + "_" + bnt.StringArrayHash.hash([this.timetableToString()]); };
        TimeSignal.prototype.timetableToString = function () {
            var tt = "";
            for (var day = 0; day < 7; day++)
                for (var hour = 0; hour < 24; hour++)
                    tt += (this.timeTable.length > day && this.timeTable[day].length > hour && this.timeTable[day][hour]) ? "1" : "0";
            return tt;
        };
        TimeSignal.init = function () {
            bnt.Signal.loop(this, TimeSignal_1.update, 1);
        };
        TimeSignal.prototype.equals = function (signal) {
            return signal.timetableToString() == this.timetableToString();
        };
        var TimeSignal_1;
        TimeSignal.signalName = "Time Signal";
        TimeSignal.value = new bnt.ObservableValue();
        TimeSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], TimeSignal, "signalName", void 0);
        TimeSignal = TimeSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.General, bnt.SignalTypes.Teads),
            bnt.Serializable({}),
            __metadata("design:paramtypes", [])
        ], TimeSignal);
        return TimeSignal;
    }(bnt.Signal));
    bnt.TimeSignal = TimeSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DateType;
    (function (DateType) {
        DateType[DateType["Before"] = 0] = "Before";
        DateType[DateType["Between"] = 1] = "Between";
        DateType[DateType["After"] = 2] = "After";
    })(DateType = bnt.DateType || (bnt.DateType = {}));
    var DateSignal = (function (_super) {
        __extends(DateSignal, _super);
        function DateSignal() {
            var _this = _super.call(this) || this;
            _this.signalName = DateSignal_1.signalName;
            _this.dateType = DateType.Between;
            DateSignal_1.update();
            return _this;
        }
        DateSignal_1 = DateSignal;
        DateSignal.prototype.isActive = function () {
            var fromDate = new Date(this.fromDateRaw).getTime();
            var toDate = new Date(this.toDateRaw).getTime();
            if (this.dateType == DateType.After)
                return DateSignal_1.value.value > fromDate;
            else if (this.dateType == DateType.Before)
                return DateSignal_1.value.value < toDate;
            else if (this.dateType == DateType.Between) {
                if (fromDate == toDate) {
                    toDate += ((23 * 60 + 59) * 60 + 59) * 1000;
                }
                return DateSignal_1.value.value >= fromDate && DateSignal_1.value.value <= toDate;
            }
            return false;
        };
        DateSignal.update = function () {
            if (DateSignal_1.forceBlockUpdate)
                return;
            var date = Date.now();
            if (date != DateSignal_1.value.value) {
                DateSignal_1.value.update(date);
            }
        };
        DateSignal.init = function () {
            bnt.Signal.loop(this, DateSignal_1.update, 1);
        };
        DateSignal.prototype.equals = function (signal) {
            return signal.fromDateRaw == this.fromDateRaw && signal.toDateRaw == this.toDateRaw;
        };
        var DateSignal_1;
        DateSignal.signalName = "Date Signal";
        DateSignal.value = new bnt.ObservableValue();
        DateSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], DateSignal, "signalName", void 0);
        DateSignal = DateSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.General, bnt.SignalTypes.Teads),
            bnt.Serializable({}),
            __metadata("design:paramtypes", [])
        ], DateSignal);
        return DateSignal;
    }(bnt.Signal));
    bnt.DateSignal = DateSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var LocationData = (function () {
        function LocationData() {
        }
        LocationData.init = function () {
            var _this = this;
            if (this.loaded) {
                return bnt.Promise.fulfilledWith(null).future;
            }
            var p = new bnt.Promise();
            this.loaded = true;
            var xhr = new XMLHttpRequest();
            xhr.open("GET", this.serviceUrl, true);
            xhr.addEventListener("load", function (evt) {
                var response = xhr.responseText.split("|");
                Object.keys(_this.geoip).forEach(function (key, index) {
                    if (response[index] == null || response[index] == "") {
                        _this.geoip[key] = "Unknown";
                    }
                    else {
                        _this.geoip[key] = response[index];
                    }
                });
                p.succeed(null);
            });
            xhr.addEventListener("error", function (evt) {
                p.fail(new Error("Location service encountered an error!"));
            });
            xhr.send();
            return p.future;
        };
        LocationData.getCountry = function () {
            var _this = this;
            var p = new bnt.Promise();
            this.init().map(function () { return p.succeed(_this.geoip["country_name"]); });
            return p.future;
        };
        LocationData.getCity = function () {
            var _this = this;
            var p = new bnt.Promise();
            this.init().map(function () { return p.succeed(_this.geoip["city"]); });
            return p.future;
        };
        LocationData.getLatitude = function () {
            var _this = this;
            var p = new bnt.Promise();
            this.init().map(function () { return p.succeed(_this.geoip["latitude"]); });
            return p.future;
        };
        LocationData.getLongitude = function () {
            var _this = this;
            var p = new bnt.Promise();
            this.init().map(function () { return p.succeed(_this.geoip["longitude"]); });
            return p.future;
        };
        LocationData.serviceUrl = "https://s8t.teads.tv/geoip";
        LocationData.loaded = false;
        LocationData.geoip = {
            "continent_code": "",
            "country_name": "",
            "city": "",
            "region": "",
            "postal_code": "",
            "latitude": "",
            "longitude": ""
        };
        return LocationData;
    }());
    bnt.LocationData = LocationData;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsLocationSignal = (function (_super) {
        __extends(TeadsLocationSignal, _super);
        function TeadsLocationSignal() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.signalName = TeadsLocationSignal_1.signalName;
            _this.locations = [];
            return _this;
        }
        TeadsLocationSignal_1 = TeadsLocationSignal;
        TeadsLocationSignal.prototype.isActive = function () {
            var e_5, _a;
            if (!TeadsLocationSignal_1.value.value)
                return false;
            try {
                for (var _b = __values(this.locations), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var location_1 = _c.value;
                    if (TeadsLocationSignal_1.value.value[location_1.type] == location_1[location_1.type].id)
                        return true;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return false;
        };
        TeadsLocationSignal.prototype.hash = function () {
            return _super.prototype.hash.call(this) + "_" + bnt.StringArrayHash.hash(this.locations.map(function (l) { return l[l.type].code; }));
        };
        TeadsLocationSignal.prototype.equals = function (signal) {
            var e_6, _a, e_7, _b;
            if (signal.locations.length != this.locations.length)
                return false;
            try {
                for (var _c = __values(this.locations), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var location_2 = _d.value;
                    var k = true;
                    try {
                        for (var _e = __values(signal.locations), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var otherLocation = _f.value;
                            if (location_2[location_2.type].code == otherLocation[otherLocation.type].code) {
                                k = false;
                                break;
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                    if (k)
                        return false;
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_6) throw e_6.error; }
            }
            return true;
        };
        TeadsLocationSignal.update = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            if (TeadsLocationSignal_1.forceBlockUpdate)
                return;
            if (noDeps) {
                TeadsLocationSignal_1.value.update({});
                return;
            }
            bnt.TeadsPlayerAddons.apiProxy.addObserver(function (api) {
                if (!api) {
                    TeadsLocationSignal_1.value.update({});
                    return;
                }
                api.getContextData().map(function (ctx) {
                    var locations = {};
                    if (ctx && ctx.context && ctx.context.user) {
                        var userContext = ctx.context.user;
                        locations = {
                            continent: userContext["de-continent"],
                            country: userContext["de-country"],
                            city: userContext["de-city"],
                            region: userContext["de-region"]
                        };
                    }
                    TeadsLocationSignal_1.value.update(locations);
                });
            });
        };
        TeadsLocationSignal.init = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            TeadsLocationSignal_1.update(noDeps);
        };
        var TeadsLocationSignal_1;
        TeadsLocationSignal.signalName = "Teads Location Signal";
        TeadsLocationSignal.value = new bnt.ObservableValue();
        TeadsLocationSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], TeadsLocationSignal, "signalName", void 0);
        TeadsLocationSignal = TeadsLocationSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.Teads),
            bnt.Serializable({})
        ], TeadsLocationSignal);
        return TeadsLocationSignal;
    }(bnt.Signal));
    bnt.TeadsLocationSignal = TeadsLocationSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Device;
    (function (Device) {
        Device[Device["Mobile"] = 0] = "Mobile";
        Device[Device["Tablet"] = 1] = "Tablet";
        Device[Device["Desktop"] = 2] = "Desktop";
    })(Device = bnt.Device || (bnt.Device = {}));
    var Platform;
    (function (Platform) {
        Platform[Platform["Windows"] = 0] = "Windows";
        Platform[Platform["macOS"] = 1] = "macOS";
        Platform[Platform["Linux"] = 2] = "Linux";
        Platform[Platform["Android"] = 3] = "Android";
        Platform[Platform["iOS"] = 4] = "iOS";
        Platform[Platform["WindowsMobile"] = 5] = "WindowsMobile";
    })(Platform = bnt.Platform || (bnt.Platform = {}));
    var DeviceAndPlatformSignal = (function (_super) {
        __extends(DeviceAndPlatformSignal, _super);
        function DeviceAndPlatformSignal() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.signalName = DeviceAndPlatformSignal_1.signalName;
            _this.deviceAndPlatformData = {
                Mobile: {
                    selected: false,
                    platforms: []
                },
                Tablet: {
                    selected: false,
                    platforms: []
                },
                Desktop: {
                    selected: false,
                    platforms: []
                }
            };
            return _this;
        }
        DeviceAndPlatformSignal_1 = DeviceAndPlatformSignal;
        DeviceAndPlatformSignal.prototype.isActive = function () {
            var activeDevice = Device[DeviceAndPlatformSignal_1.value.value.device];
            var signalDevice = this.deviceAndPlatformData[activeDevice];
            var activePlatform = DeviceAndPlatformSignal_1.value.value.platform;
            return signalDevice &&
                signalDevice.selected &&
                ((activePlatform != -1 &&
                    signalDevice.platforms.indexOf(activePlatform) != -1) ||
                    activePlatform == -1);
        };
        DeviceAndPlatformSignal.prototype.hash = function () {
            var _this = this;
            var forHash = Object.keys(this.deviceAndPlatformData)
                .map(function (k) {
                if (!_this.deviceAndPlatformData[k].selected)
                    return [];
                return __spread([k], _this.deviceAndPlatformData[k].platforms);
            })
                .reduce(function (a, c) { return (__spread(a, c)); }, [])
                .map(function (v) { return v.toString(); });
            return _super.prototype.hash.call(this) + "_" + bnt.StringArrayHash.hash(forHash);
        };
        DeviceAndPlatformSignal.prototype.equals = function (signal) {
            var e_8, _a;
            try {
                for (var _b = __values(Object.keys(this.deviceAndPlatformData)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var deviceType = _c.value;
                    var one = signal.deviceAndPlatformData[deviceType];
                    var two = this.deviceAndPlatformData[deviceType];
                    if (one.selected != two.selected || !this.equalPlatforms(one.platforms, two.platforms))
                        return false;
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_8) throw e_8.error; }
            }
            return true;
        };
        DeviceAndPlatformSignal.prototype.equalPlatforms = function (one, two) {
            if (one.length != two.length)
                return false;
            one = one.sort();
            two = two.sort();
            for (var i = 0; i < one.length; i++)
                if (one[i] != two[i])
                    return false;
            return true;
        };
        DeviceAndPlatformSignal.update = function () {
            if (DeviceAndPlatformSignal_1.forceBlockUpdate)
                return;
            var device = this.getDeviceType(DeviceContext.getDevice().type);
            var platform = this.getPlatformType(DeviceContext.getOS().name);
            if (!DeviceAndPlatformSignal_1.value.value ||
                DeviceAndPlatformSignal_1.value.value.platform != platform ||
                DeviceAndPlatformSignal_1.value.value.device != device)
                DeviceAndPlatformSignal_1.value.update({ device: device, platform: platform });
        };
        DeviceAndPlatformSignal.init = function () {
            DeviceAndPlatformSignal_1.update();
        };
        DeviceAndPlatformSignal.getDeviceType = function (deviceType) {
            deviceType = deviceType.toLowerCase();
            if (deviceType == "d")
                return Device.Desktop;
            if (deviceType == "m")
                return Device.Mobile;
            if (deviceType == "t")
                return Device.Tablet;
        };
        DeviceAndPlatformSignal.getPlatformType = function (platformType) {
            platformType = platformType.toLowerCase();
            if (platformType == "android")
                return Platform.Android;
            if (platformType == "ios")
                return Platform.iOS;
            if (platformType == "windows mobile")
                return Platform.WindowsMobile;
            if (platformType == "windows")
                return Platform.Windows;
            if (platformType == "mac os")
                return Platform.macOS;
            if (platformType == "linux")
                return Platform.Linux;
        };
        DeviceAndPlatformSignal.isMobile = function () {
            return DeviceContext.isMobile();
        };
        var DeviceAndPlatformSignal_1;
        DeviceAndPlatformSignal.signalName = "Device and platform Signal";
        DeviceAndPlatformSignal.value = new bnt.ObservableValue();
        DeviceAndPlatformSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], DeviceAndPlatformSignal, "signalName", void 0);
        DeviceAndPlatformSignal = DeviceAndPlatformSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.General, bnt.SignalTypes.Teads),
            bnt.Serializable({})
        ], DeviceAndPlatformSignal);
        return DeviceAndPlatformSignal;
    }(bnt.Signal));
    bnt.DeviceAndPlatformSignal = DeviceAndPlatformSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Operator;
    (function (Operator) {
        Operator[Operator["Less"] = 0] = "Less";
        Operator[Operator["Greater"] = 1] = "Greater";
        Operator[Operator["Equal"] = 2] = "Equal";
        Operator[Operator["NotEqual"] = 3] = "NotEqual";
    })(Operator = bnt.Operator || (bnt.Operator = {}));
    var DynamicDataSignal = (function (_super) {
        __extends(DynamicDataSignal, _super);
        function DynamicDataSignal() {
            var _this = _super.call(this) || this;
            _this.signalName = DynamicDataSignal_1.signalName;
            DynamicDataSignal_1.update();
            return _this;
        }
        DynamicDataSignal_1 = DynamicDataSignal;
        DynamicDataSignal.prototype.isActive = function () {
            return bnt.DynamicData.hasData(this.key) ?
                this.compareValue(bnt.DynamicData.getData(this.key), this.value, this.operator) : false;
        };
        DynamicDataSignal.prototype.compareValue = function (value1, value2, operator) {
            var v1 = value1, v2 = value2;
            if (parseInt(value1) + "" == value1.toString() && parseInt(value2) + "" == value2.toString()) {
                v1 = parseInt(value1);
                v2 = parseInt(value2);
            }
            switch (operator) {
                case Operator.Equal:
                    return v1 == v2;
                case Operator.Greater:
                    return v1 > v2;
                case Operator.Less:
                    return v1 < v2;
                default:
                    return v1 != v2;
            }
        };
        DynamicDataSignal.prototype.equals = function (signal) {
            return signal instanceof DynamicDataSignal_1
                && this.key == signal.key
                && this.value == signal.value
                && this.operator == signal.operator;
        };
        DynamicDataSignal.update = function () {
            if (DynamicDataSignal_1.forceBlockUpdate)
                return;
            DynamicDataSignal_1.value.update(true);
            bnt.DynamicData.onDataChange.addObserver(function () {
                DynamicDataSignal_1.value.update(true);
            });
        };
        var DynamicDataSignal_1;
        DynamicDataSignal.signalName = "Dynamic Data Signal";
        DynamicDataSignal.value = new bnt.ObservableValue();
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], DynamicDataSignal, "signalName", void 0);
        DynamicDataSignal = DynamicDataSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.General, bnt.SignalTypes.Teads),
            bnt.Serializable({}),
            __metadata("design:paramtypes", [])
        ], DynamicDataSignal);
        return DynamicDataSignal;
    }(bnt.Signal));
    bnt.DynamicDataSignal = DynamicDataSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsAudienceSignal = (function (_super) {
        __extends(TeadsAudienceSignal, _super);
        function TeadsAudienceSignal() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.signalName = TeadsAudienceSignal_1.signalName;
            _this.values = [];
            return _this;
        }
        TeadsAudienceSignal_1 = TeadsAudienceSignal;
        TeadsAudienceSignal.prototype.isActive = function () {
            var e_9, _a;
            this.values.sort(function (a, b) { return a.id - b.id; });
            var k = 0;
            var theValues = TeadsAudienceSignal_1.value.value;
            try {
                for (var _b = __values(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var v = _c.value;
                    while (k < theValues.length && v.id > theValues[k].id)
                        k++;
                    if (k == theValues.length)
                        return false;
                    if (v.id == theValues[k].id)
                        return true;
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
            return false;
        };
        TeadsAudienceSignal.prototype.hash = function () {
            return _super.prototype.hash.call(this) + "_" + bnt.StringArrayHash.hash(this.values.map(function (a) { return "" + a.id; }));
        };
        TeadsAudienceSignal.prototype.equals = function (signal) {
            if (signal.values.length != this.values.length)
                return false;
            var sortFn = function (a, b) { return a.id - b.id; };
            signal.values.sort(sortFn);
            this.values.sort(sortFn);
            for (var i = 0; i < signal.values.length; i++)
                if (signal.values[i].id != this.values[i].id)
                    return false;
            return true;
        };
        TeadsAudienceSignal.update = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            if (TeadsAudienceSignal_1.forceBlockUpdate)
                return;
            if (noDeps) {
                TeadsAudienceSignal_1.value.update([]);
                return;
            }
            bnt.TeadsPlayerAddons.apiProxy.addObserver(function (api) {
                if (!api) {
                    TeadsAudienceSignal_1.value.update([]);
                    return;
                }
                bnt.TeadsPlayerAddons.apiProxy.value.getContextData().map(function (ctx) {
                    if (!ctx || !ctx.context || !ctx.context.user || !ctx.context.user["exelate-segments"]) {
                        TeadsAudienceSignal_1.value.update([]);
                        return;
                    }
                    TeadsAudienceSignal_1.value.update(ctx.context.user["exelate-segments"].map(parseInt).map(function (id) { return ({ id: id }); }).sort(function (a, b) { return a.id - b.id; }));
                });
            });
        };
        TeadsAudienceSignal.init = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            TeadsAudienceSignal_1.update(noDeps);
        };
        var TeadsAudienceSignal_1;
        TeadsAudienceSignal.signalName = "Audience Signal";
        TeadsAudienceSignal.value = new bnt.ObservableValue([]);
        TeadsAudienceSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], TeadsAudienceSignal, "signalName", void 0);
        TeadsAudienceSignal = TeadsAudienceSignal_1 = __decorate([
            bnt.Serializable({})
        ], TeadsAudienceSignal);
        return TeadsAudienceSignal;
    }(bnt.Signal));
    bnt.TeadsAudienceSignal = TeadsAudienceSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsGrapeshotSignal = (function (_super) {
        __extends(TeadsGrapeshotSignal, _super);
        function TeadsGrapeshotSignal() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.signalName = TeadsGrapeshotSignal_1.signalName;
            _this.values = [];
            return _this;
        }
        TeadsGrapeshotSignal_1 = TeadsGrapeshotSignal;
        TeadsGrapeshotSignal.prototype.isActive = function () {
            var e_10, _a;
            try {
                for (var _b = __values(TeadsGrapeshotSignal_1.value.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    if (~this.values.indexOf(value))
                        return true;
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
            return false;
        };
        TeadsGrapeshotSignal.prototype.hash = function () {
            return _super.prototype.hash.call(this) + "_" + bnt.StringArrayHash.hash(this.values);
        };
        TeadsGrapeshotSignal.prototype.equals = function (signal) {
            if (signal.values.length != this.values.length)
                return false;
            for (var i = 0; i < this.values.length; i++) {
                if (signal.values.indexOf(this.values[i]) == -1)
                    return false;
            }
            return true;
        };
        TeadsGrapeshotSignal.update = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            if (TeadsGrapeshotSignal_1.forceBlockUpdate)
                return;
            if (noDeps) {
                TeadsGrapeshotSignal_1.value.update([]);
                return;
            }
            bnt.TeadsPlayerAddons.apiProxy.addObserver(function (api) {
                if (!api) {
                    TeadsGrapeshotSignal_1.value.update([]);
                    return;
                }
                bnt.TeadsPlayerAddons.apiProxy.value.getContextData().map(function (ctx) {
                    if (!ctx || !ctx.context || !ctx.context.page || !ctx.context.page.grapeshotKeywords) {
                        TeadsGrapeshotSignal_1.value.update([]);
                        return;
                    }
                    TeadsGrapeshotSignal_1.value.update(ctx.context.page.grapeshotKeywords);
                });
            });
        };
        TeadsGrapeshotSignal.init = function (noDeps) {
            if (noDeps === void 0) { noDeps = false; }
            TeadsGrapeshotSignal_1.update(noDeps);
        };
        var TeadsGrapeshotSignal_1;
        TeadsGrapeshotSignal.signalName = "Grapeshot Signal";
        TeadsGrapeshotSignal.value = new bnt.ObservableValue([]);
        TeadsGrapeshotSignal.forceBlockUpdate = false;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], TeadsGrapeshotSignal, "signalName", void 0);
        TeadsGrapeshotSignal = TeadsGrapeshotSignal_1 = __decorate([
            bnt.RegisterSignal(bnt.SignalTypes.Teads),
            bnt.Serializable({})
        ], TeadsGrapeshotSignal);
        return TeadsGrapeshotSignal;
    }(bnt.Signal));
    bnt.TeadsGrapeshotSignal = TeadsGrapeshotSignal;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var StateHash = (function (_super) {
        __extends(StateHash, _super);
        function StateHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StateHash.prototype.hash = function (state) {
            return state.hash();
        };
        StateHash = __decorate([
            bnt.Serializable({})
        ], StateHash);
        return StateHash;
    }(bnt.HashFn));
    bnt.StateHash = StateHash;
    var State = (function () {
        function State(state) {
            var _this = this;
            this.hash = function () { return _this.canvas.hash() + "_" + _this.segment.hash(); };
            this.id = bnt.IdClass.getNext();
            this.canvas = state && state.canvas || undefined;
            this.segment = state && state.segment || undefined;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], State.prototype, "id", void 0);
        State = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], State);
        return State;
    }());
    bnt.State = State;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CanvasHash = (function (_super) {
        __extends(CanvasHash, _super);
        function CanvasHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CanvasHash.prototype.hash = function (canvas) {
            return canvas.hash();
        };
        CanvasHash = __decorate([
            bnt.Serializable({})
        ], CanvasHash);
        return CanvasHash;
    }(bnt.HashFn));
    bnt.CanvasHash = CanvasHash;
    var Canvas = (function () {
        function Canvas(config) {
            if (config === void 0) { config = {}; }
            var _this = this;
            this.getAspectRatio = function () { return _this.config.width / _this.config.height; };
            this.hash = function () { return _this.uuid; };
            this.config = new bnt.CanvasConfig(config);
            this.uuid = bnt.UUID.get();
        }
        Canvas = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [Object])
        ], Canvas);
        return Canvas;
    }());
    bnt.Canvas = Canvas;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SegmentHash = (function (_super) {
        __extends(SegmentHash, _super);
        function SegmentHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SegmentHash.prototype.hash = function (segment) {
            return segment.hash();
        };
        SegmentHash = __decorate([
            bnt.Serializable({})
        ], SegmentHash);
        return SegmentHash;
    }(bnt.HashFn));
    bnt.SegmentHash = SegmentHash;
    var Segment = (function () {
        function Segment(config) {
            if (config === void 0) { config = {}; }
            var _this = this;
            this.signalHolders = [];
            this.hash = function () { return _this.uuid; };
            this.id = bnt.IdClass.getNext();
            this.config = new bnt.SegmentConfig(config);
            this.uuid = bnt.UUID.get();
        }
        Segment.prototype.equals = function (segment) {
            if (segment.id == this.id)
                return true;
            if (segment.signalHolders.length != this.signalHolders.length)
                return false;
            else if (!segment.signalHolders.length)
                return true;
            var equalSignalCount = 0;
            this.signalHolders.forEach(function (localSignalHolder) {
                segment.signalHolders.forEach(function (signalHolder) {
                    if (localSignalHolder.signal.sameTypeAs(signalHolder.signal) && localSignalHolder.signal.equals(signalHolder.signal))
                        equalSignalCount++;
                });
            });
            return equalSignalCount >= segment.signalHolders.length;
        };
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Segment.prototype, "id", void 0);
        Segment = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [Object])
        ], Segment);
        return Segment;
    }());
    bnt.Segment = Segment;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var WithTimeline = (function () {
        function WithTimeline() {
            this.onplay = new bnt.Observable();
            this.onpause = new bnt.Observable();
            this.onstop = new bnt.Observable();
            this.onend = new bnt.Observable();
            this.duration = new bnt.ObservableValue();
            this.remainingTimeMillisec = new bnt.ObservableValue(-1);
            this.timeMillisec = new bnt.ObservableValue();
            this.volume = new bnt.ObservableValue(0);
            this.muted = new bnt.ObservableValue();
        }
        WithTimeline.prototype.play = function () {
            var _this = this;
            return this.timeline.play().map(function () { return _this.onplay.update(undefined); });
        };
        WithTimeline.prototype.pause = function () {
            var _this = this;
            return this.timeline.pause().map(function () { return _this.onpause.update(undefined); });
        };
        WithTimeline.prototype.stop = function () {
            var _this = this;
            return this.timeline.stop().map(function () { return _this.onstop.update(undefined); });
        };
        WithTimeline.prototype.suspend = function () {
            return this.timeline.suspend();
        };
        WithTimeline.prototype.resume = function () {
            return this.timeline.resume();
        };
        WithTimeline.prototype.mute = function () {
            var _this = this;
            return this.timeline.mute().map(function () { return _this.muted.update(true); });
        };
        WithTimeline.prototype.unmute = function () {
            var _this = this;
            return this.timeline.unmute().map(function () { return _this.muted.update(false); });
        };
        return WithTimeline;
    }());
    bnt.WithTimeline = WithTimeline;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsPlayerAddons = (function () {
        function TeadsPlayerAddons(creative) {
            var _this = this;
            this.creative = creative;
            if (TeadsPlayerAddons.inited)
                return;
            TeadsPlayerAddons.inited = true;
            TeadsPlayerAddons.apiProxy.addObserver(function (apiProxy) { return apiProxy && _this.activate(); });
            this.initializeTeadsApi();
        }
        TeadsPlayerAddons.prototype.activate = function () {
            TeadsPlayerAddons.announceStudioAd(false);
            TeadsPlayerAddons.apiProxy.value.performTapMode(false);
            var fixStage = function (state) {
                TeadsPlayerAddons.apiProxy.value.sendVideoMetadata({ width: state.canvas.config.width, height: state.canvas.config.height });
                bnt.get(bnt.StateChangeDetector).stateUpdated.removeObserver(fixStage);
            };
            bnt.get(bnt.StateChangeDetector).stateUpdated.addObserver(fixStage);
            var addHandler = function (thing) {
                if (thing.onclick)
                    thing.onclick.onVoidUpdate.addObserver(function () {
                        if (TeadsPlayerAddons.brandingModeOnVoidClick) {
                            TeadsPlayerAddons.apiProxy.value.performTapMode(true);
                        }
                    });
            };
            this.creative.elements.forEach(function (id, el) { return addHandler(el); });
            this.creative.onElementAdded.addObserver(addHandler);
            this.creative.screens.forEach(addHandler);
            TeadsPlayerAddons.listenForSensorUpdates();
        };
        TeadsPlayerAddons.announceStudioAd = function (value) {
            var updateDisplayAdValue = function (apixProxy) {
                TeadsPlayerAddons.apiProxy.value.getStudioData().map(function (studioData) {
                    if (!studioData) {
                        studioData = { display: value, studio_cid: cid };
                    }
                    else {
                        studioData.display = value;
                        studioData.studio_cid = cid;
                    }
                    TeadsPlayerAddons.apiProxy.value.setStudioData(studioData);
                });
            };
            if (TeadsPlayerAddons.apiProxy.value) {
                updateDisplayAdValue(TeadsPlayerAddons.apiProxy.value);
            }
            else {
                TeadsPlayerAddons.apiProxy.addObserver(updateDisplayAdValue);
            }
        };
        TeadsPlayerAddons.inTeadsPlayer = function () {
            return TeadsPlayerAddons.getTeadsApi() != null;
        };
        TeadsPlayerAddons.getTeadsApi = function () {
            bnt.logger.warn('TeadsPlayerAddons.getTeadsApi is deprecated - use async TeadsPlayerAddons.apiProxy instead');
            if (typeof window == "undefined")
                return null;
            if (!TeadsPlayerAddons.api) {
                var w = window;
                do {
                    try {
                        if (w.hasOwnProperty("teads") &&
                            w.teads.hasOwnProperty("api") &&
                            bnt.Brain.areMethodsOn(TeadsPlayerAddons.neededFunctionsNames, w.teads.api)) {
                            TeadsPlayerAddons.api = w.teads.api;
                            break;
                        }
                    }
                    catch (er) {
                        bnt.logger.warn('No access to this iframe!');
                    }
                    w = w.parent;
                } while (w != w.parent);
            }
            return TeadsPlayerAddons.api;
        };
        TeadsPlayerAddons.prototype.initializeTeadsApi = function () {
            TeadsPlayerAddons.getTeadsApi();
            if (TeadsPlayerAddons.api) {
                TeadsPlayerAddons.apiProxy.update(new TeadsApiWrapper(TeadsPlayerAddons.api));
            }
            else {
                TeadsPlayerAddons.rpcApi = new TeadsApiRPC();
                TeadsPlayerAddons.rpcApiSearch = TeadsPlayerAddons.rpcApi.pairWithPlayer();
                TeadsPlayerAddons.rpcApiSearch.onSuccess(function () { return TeadsPlayerAddons.apiProxy.update(TeadsPlayerAddons.rpcApi); });
                TeadsPlayerAddons.rpcApiSearch.onFailure(function () { return TeadsPlayerAddons.apiProxy.update(null); });
            }
        };
        TeadsPlayerAddons.fixVideoSlotSize = function (video) {
            var ve = bnt.get(bnt.AdController).videoSlot;
            ve.style.minWidth = '100%';
            ve.style.minHeight = '100%';
            var fixVideoWidthHeight = function () {
                var state = bnt.get(bnt.State);
                if (!video.getConfig(state).panActive) {
                    var desiredWidth = ve.parentNode.style.width;
                    var desiredHeight = ve.parentNode.style.height;
                    ve.style.width = desiredWidth;
                    ve.style.height = desiredHeight;
                }
                else {
                    var withPan = bnt.ElementRendererRegistry.rendererFor(video);
                    withPan.getVideoElementWithPan() && withPan.getVideoElementWithPan().forceUpdateLastConfig();
                }
                clearTimeout(ve._forceRedrawInterval);
                ve._forceRedrawInterval = setTimeout(function () {
                    ve.style.borderTop = "1px solid rgba(0, 0, 0, 0.1)";
                    requestAnimationFrame(function () {
                        ve.style.borderTop = '';
                    });
                }, 1000);
            };
            fixVideoWidthHeight();
            bnt.get(bnt.ResizeController).resize.addObserver(function (size) {
                setTimeout(function () {
                    fixVideoWidthHeight();
                }, 0);
            });
        };
        TeadsPlayerAddons.callPlayerApiMethod = function (methodName, params) {
            var _a;
            if (TeadsPlayerAddons.api) {
                if (TeadsPlayerAddons.api[methodName]) {
                    var rsp = (_a = TeadsPlayerAddons.api)[methodName].apply(_a, __spread(params));
                    return bnt.Promise.fulfilledWith(rsp).future;
                }
                else {
                    return bnt.Promise.fulfilledWith("Method " + methodName + " does not exist on api").future;
                }
            }
            else {
                params && (params = params.filter(function (param) {
                    return !bnt.Brain.isFunction(param);
                }));
                return TeadsPlayerAddons.rpcApi.sendMessage({ method: methodName, methodArgs: params || [] });
            }
        };
        TeadsPlayerAddons.initializeHandshake = function () {
            var handshakeConfirmation = new bnt.Promise();
            handshakeConfirmation.future.onSuccess(function (w) {
                TeadsPlayerAddons.pairedAdWindow = w;
                clearTimeout(TeadsPlayerAddons.handshakeTimeout);
            });
            TeadsPlayerAddons.listenForHandshakeConfirmation(handshakeConfirmation);
            TeadsPlayerAddons.tryHandshake(handshakeConfirmation);
            return handshakeConfirmation;
        };
        TeadsPlayerAddons.sendHandshakeMessage = function () {
            var wParent = window;
            while ((wParent != wParent.parent) && (wParent = wParent.parent)) {
                wParent.postMessage({ method: TeadsPlayerAddons.MSG_HELLO }, '*');
            }
        };
        TeadsPlayerAddons.tryHandshake = function (handshakeConfirmation, retriesLeft) {
            if (retriesLeft === void 0) { retriesLeft = TeadsPlayerAddons.HANDSHAKE_RETRIES; }
            TeadsPlayerAddons.sendHandshakeMessage();
            TeadsPlayerAddons.handshakeTimeout = setTimeout(function () {
                if (TeadsPlayerAddons.pairedAdWindow)
                    return;
                retriesLeft--;
                if (retriesLeft <= 0) {
                    handshakeConfirmation.fail(new Error('Timeout'));
                    bnt.logger.warn('TeadsApi not found in set time interval');
                }
                else {
                    TeadsPlayerAddons.tryHandshake(handshakeConfirmation, retriesLeft);
                }
            }, TeadsPlayerAddons.TIMEOUT);
        };
        TeadsPlayerAddons.listenForHandshakeConfirmation = function (handshakePromise) {
            var listener = function (evt) {
                if (typeof evt.data !== "object")
                    return;
                var msg = evt.data;
                if (msg.method !== TeadsPlayerAddons.MSG_HELLO)
                    return;
                handshakePromise.succeed(evt.source);
                window.removeEventListener("message", listener);
            };
            window.addEventListener("message", listener);
        };
        TeadsPlayerAddons.listenForSensorUpdates = function () {
            window.addEventListener("message", function (evt) {
                if (typeof evt.data !== "object")
                    return;
                var msg = evt.data;
                if (msg.method !== TeadsPlayerAddons.SENSOR_UPDATE)
                    return;
                bnt.TeadsPlayerAddons.deviceSensor.update(msg.methodReturn);
            });
        };
        TeadsPlayerAddons.neededFunctionsNames = [
            'getStudioData',
            'setStudioData'
        ];
        TeadsPlayerAddons.inited = false;
        TeadsPlayerAddons.api = null;
        TeadsPlayerAddons.apiProxy = new bnt.ObservableValue();
        TeadsPlayerAddons.deviceSensor = new bnt.ObservableValue();
        TeadsPlayerAddons.brandingModeOnVoidClick = true;
        TeadsPlayerAddons.TIMEOUT = 50;
        TeadsPlayerAddons.HANDSHAKE_RETRIES = 5;
        TeadsPlayerAddons.MSG_HELLO = 'studio-ad--format-RPC';
        TeadsPlayerAddons.SENSOR_UPDATE = '-studio-ad--sensors-update';
        return TeadsPlayerAddons;
    }());
    bnt.TeadsPlayerAddons = TeadsPlayerAddons;
    var TeadsApiWrapper = (function () {
        function TeadsApiWrapper(teadsApi) {
            this.teadsApi = teadsApi;
            TeadsPlayerAddons.initializeHandshake();
        }
        TeadsApiWrapper.prototype.performTapMode = function (on) {
            return this.methodFallback('performTapMode', on);
        };
        TeadsApiWrapper.prototype.isFullscreen = function () {
            return this.methodFallback('isFullscreen');
        };
        TeadsApiWrapper.prototype.getContextData = function () {
            return this.methodFallback('getContextData');
        };
        TeadsApiWrapper.prototype.getStudioData = function () {
            return this.methodFallback('getStudioData');
        };
        TeadsApiWrapper.prototype.setStudioData = function (value) {
            return this.methodFallback('setStudioData', value);
        };
        TeadsApiWrapper.prototype.isStudioDisplay = function () {
            return this.methodFallback('isStudioDisplay');
        };
        TeadsApiWrapper.prototype.isReplay = function () {
            return this.methodFallback('isReplay');
        };
        TeadsApiWrapper.prototype.requestFullscreen = function () {
            return this.methodFallback('requestFullscreen');
        };
        TeadsApiWrapper.prototype.setBackgroundColor = function (color) {
            return this.methodFallback('setBackgroundColor', color);
        };
        TeadsApiWrapper.prototype.setFixedBackgroundImage = function (imageSrc) {
            return this.methodFallback('setFixedBackgroundImage', imageSrc);
        };
        TeadsApiWrapper.prototype.setSoundControlVisibility = function (visible) {
            return this.methodFallback('setSoundControlVisibility', visible);
        };
        TeadsApiWrapper.prototype.setFullscreenButtonVisibility = function (visible) {
            return this.methodFallback('setFullscreenButtonVisibility', visible);
        };
        TeadsApiWrapper.prototype.setProgressControlVisibility = function (visible) {
            return this.methodFallback('setProgressControlVisibility', visible);
        };
        TeadsApiWrapper.prototype.setStartScreenVisibility = function (visible) {
            return this.methodFallback('setStartScreenVisibility', visible);
        };
        TeadsApiWrapper.prototype.getSlotBounds = function () {
            return this.methodFallback('getSlotBounds');
        };
        TeadsApiWrapper.prototype.sendVideoMetadata = function (metadata) {
            return this.methodFallback('sendVideoMetadata', metadata);
        };
        TeadsApiWrapper.prototype.getSumologicOption = function () {
            return this.methodFallback('getSumologicOption');
        };
        TeadsApiWrapper.prototype.getUserLocation = function (successHandler, errorHandler) {
            return this.methodFallback('getUserLocation', successHandler, errorHandler);
        };
        TeadsApiWrapper.prototype.getTeadsInfo = function () {
            return this.methodFallback('getTeadsInfo');
        };
        TeadsApiWrapper.prototype.addDeviceOrientationListener = function () {
            return this.methodFallback('addDeviceOrientationListener');
        };
        TeadsApiWrapper.prototype.sendAdClickThru = function (params) {
            return this.methodFallback('sendAdClickThru', params);
        };
        TeadsApiWrapper.prototype.methodFallback = function (method) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a;
            if (this.teadsApi[method]) {
                return bnt.Promise.fulfilledWith((_a = this.teadsApi)[method].apply(_a, __spread(args))).future;
            }
            else {
                bnt.logger.log("Teads custom API method " + bnt.fnName + " is missing");
                return bnt.Promise.fulfilledWith(null).future;
            }
        };
        return TeadsApiWrapper;
    }());
    var TeadsApiRPC = (function () {
        function TeadsApiRPC() {
            var _this = this;
            this.runningRPCs = [];
            this.keepListening = false;
            this.rpcCallback = function (evt) {
                if (typeof evt.data === 'object') {
                    var msg = evt.data;
                    if (!msg.method)
                        return;
                    var firstRPCMatchIndex = -1;
                    try {
                        while (_this.runningRPCs[++firstRPCMatchIndex].rpcData.method != msg.method) { }
                        var match = _this.runningRPCs.splice(firstRPCMatchIndex, 1)[0];
                        match && match.promise.succeed(msg.methodReturn || msg.error);
                    }
                    catch (er) {
                        bnt.logger.warn("Matching rpc not found - \"" + msg.method + "\"");
                    }
                }
                if (_this.keepListening)
                    return;
                if (!_this.runningRPCs.length)
                    window.removeEventListener('message', _this.rpcCallback);
            };
        }
        TeadsApiRPC.prototype.pairWithPlayer = function () {
            if (TeadsPlayerAddons.pairedAdWindow)
                throw new Error('TeadsApiRPC is already paired');
            window.addEventListener('message', this.rpcCallback);
            return TeadsPlayerAddons.initializeHandshake().future;
        };
        TeadsApiRPC.prototype.sendMessage = function (message) {
            window.addEventListener('message', this.rpcCallback);
            var pr = new bnt.Promise();
            this.runningRPCs.push({ rpcData: message, promise: pr });
            TeadsPlayerAddons.pairedAdWindow.postMessage(message, '*');
            return pr.future;
        };
        TeadsApiRPC.prototype.performTapMode = function (on) {
            return this.sendMessage({ method: 'performTapMode', methodArgs: [on] });
        };
        TeadsApiRPC.prototype.isFullscreen = function () {
            return this.sendMessage({ method: 'isFullscreen', methodArgs: [] });
        };
        TeadsApiRPC.prototype.getContextData = function () {
            return this.sendMessage({ method: 'getContextData', methodArgs: [] });
        };
        TeadsApiRPC.prototype.getStudioData = function () {
            return this.sendMessage({ method: 'getStudioData', methodArgs: [] });
        };
        TeadsApiRPC.prototype.setStudioData = function (value) {
            return this.sendMessage({ method: 'setStudioData', methodArgs: [value] });
        };
        TeadsApiRPC.prototype.isStudioDisplay = function () {
            return this.sendMessage({ method: 'isStudioDisplay', methodArgs: [] });
        };
        TeadsApiRPC.prototype.isReplay = function () {
            return this.sendMessage({ method: 'isReplay', methodArgs: [] });
        };
        TeadsApiRPC.prototype.requestFullscreen = function () {
            return this.sendMessage({ method: 'requestFullscreen', methodArgs: [] });
        };
        TeadsApiRPC.prototype.setBackgroundColor = function (color) {
            return this.sendMessage({ method: 'setBackgroundColor', methodArgs: [color] });
        };
        TeadsApiRPC.prototype.setFixedBackgroundImage = function (imageSrc) {
            return this.sendMessage({ method: 'setFixedBackgroundImage', methodArgs: [imageSrc] });
        };
        TeadsApiRPC.prototype.setSoundControlVisibility = function (visible) {
            return this.sendMessage({ method: 'setSoundControlVisibility', methodArgs: [visible] });
        };
        TeadsApiRPC.prototype.setFullscreenButtonVisibility = function (visible) {
            return this.sendMessage({ method: 'setFullscreenButtonVisibility', methodArgs: [visible] });
        };
        TeadsApiRPC.prototype.setProgressControlVisibility = function (visible) {
            return this.sendMessage({ method: 'setProgressControlVisibility', methodArgs: [visible] });
        };
        TeadsApiRPC.prototype.setStartScreenVisibility = function (visible) {
            return this.sendMessage({ method: 'setStartScreenVisibility', methodArgs: [visible] });
        };
        TeadsApiRPC.prototype.getSlotBounds = function () {
            return this.sendMessage({ method: 'getSlotBounds', methodArgs: [] });
        };
        TeadsApiRPC.prototype.sendVideoMetadata = function (metadata) {
            return this.sendMessage({ method: 'sendVideoMetadata', methodArgs: [metadata] });
        };
        TeadsApiRPC.prototype.getSumologicOption = function () {
            return this.sendMessage({ method: 'getSumologicOption', methodArgs: [] });
        };
        TeadsApiRPC.prototype.getUserLocation = function (successHandler, errorHandler) {
            return this.sendMessage({ method: 'getUserLocation', methodArgs: [] });
        };
        TeadsApiRPC.prototype.getTeadsInfo = function () {
            return this.sendMessage({ method: 'getTeadsInfo', methodArgs: [] });
        };
        TeadsApiRPC.prototype.addDeviceOrientationListener = function () {
            this.keepListening = true;
            return this.sendMessage({ method: 'addDeviceOrientationListener', methodArgs: [] });
        };
        TeadsApiRPC.prototype.sendAdClickThru = function (params) {
            return this.sendMessage({ method: 'sendAdClickThru', methodArgs: [params] });
        };
        return TeadsApiRPC;
    }());
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Creative = (function () {
        function Creative(config) {
            if (config === void 0) { config = {}; }
            var _this = this;
            this.screens = [];
            this.canvases = [];
            this.segments = [];
            this.screensToPreload = new bnt.Map(new bnt.ScreenHash());
            this.skippable = new bnt.ObservableValue();
            this.onElementAdded = new bnt.Observable();
            this.onclick = new bnt.Observable();
            this.onmouseenter = new bnt.Observable();
            this.onmouseleave = new bnt.Observable();
            this.onmainscreen = new bnt.ObservableValue(true);
            this.onscreenchange = new bnt.Observable();
            this.onload = new bnt.Observable();
            bnt.WithTimeline.call(this);
            Creative_1.instance = this;
            bnt.set(Creative_1, this);
            this.config = new bnt.CreativeConfig(config);
            this.skippable.update(this.config.skippable);
            this.code = new bnt.Code();
            this.onload.addObserver(function () { return bnt.set(bnt.TeadsPlayerAddons, new bnt.TeadsPlayerAddons(_this)); });
        }
        Creative_1 = Creative;
        Object.defineProperty(Creative.prototype, "elements", {
            get: function () {
                var ret = new bnt.Map(new bnt.StringHash());
                var getElementsInContainer = function (container) {
                    container.forEachEos(function (eos) {
                        ret.put(eos.element.elementId, eos.element);
                        if (eos.element instanceof bnt.Group) {
                            getElementsInContainer(eos.element);
                        }
                    });
                };
                this.forEachScreen(function (screen) { return getElementsInContainer(screen); });
                if (this.bannerScreen)
                    getElementsInContainer(this.bannerScreen);
                return ret;
            },
            enumerable: true,
            configurable: true
        });
        Creative.prototype.addCanvas = function (canvas) {
            this.canvases.push(canvas);
        };
        Creative.prototype.addSegment = function (segment) {
            this.segments.push(segment);
        };
        Creative.prototype.cloneScreen = function (screen) {
            return screen.clone();
        };
        Creative.prototype.getScreen = function (name) {
            var theScreen = null;
            this.screens.forEach(function (screen) {
                if (screen.name == name) {
                    theScreen = screen;
                }
            });
            if (this.bannerScreen && this.bannerScreen.name == name)
                theScreen = this.bannerScreen;
            return theScreen;
        };
        Creative.prototype.hasScreen = function () {
            return this.screens.length > 0;
        };
        Creative.prototype.firstScreen = function () {
            if (this.screens.length) {
                return this.screens[0];
            }
            else {
                throw new Error("no screens defined");
            }
        };
        Creative.prototype.forEachScreen = function (fn) {
            this.screens.forEach(fn);
        };
        Creative.prototype.getCanvases = function () {
            if (!this.canvases.length) {
                var dimen = this.config;
                this.canvases.push(new bnt.Canvas(new bnt.CanvasConfig({ width: 320, height: 480 })));
            }
            return this.canvases;
        };
        Creative.prototype.addScreen = function (screen) {
            var _this = this;
            this.validateScreenName(screen);
            this.screens.push(screen);
            screen.eos.reverse();
            screen.eos.forEach(function (eos) {
                var fn = function (el) {
                    _this.validateElementName(el);
                    if (el instanceof bnt.Group)
                        el.eos.map(function (e) { return fn(e.element); });
                };
                fn(eos.element);
            });
            screen.eos.reverse();
            return screen;
        };
        Creative.prototype.addElementOnScreen = function (container, eos) {
            var _this = this;
            var theEos = container.addElementOnScreen(eos);
            var fn = function (el) {
                _this.validateElementName(el);
                if (el instanceof bnt.Group)
                    el.eos.map(function (e) { return fn(e.element); });
            };
            fn(eos.element);
            bnt.get(Creative_1).onElementAdded.update(eos.element);
            return theEos;
        };
        Creative.prototype.canRemoveScreen = function (screen) {
            if (this.screens.indexOf(screen) == -1) {
                return false;
            }
            return this.screens.length > 1;
        };
        Creative.prototype.removeScreen = function (screen) {
            if (this.canRemoveScreen(screen)) {
                this.screens.splice(this.screens.indexOf(screen), 1);
                this.removeScreenFromInteractions(screen);
            }
            else {
                throw new Error("Cant remove screen");
            }
        };
        Creative.prototype.removeScreenFromInteractions = function (screenToRemove) {
            var checkInteraction = function (interaction) {
                if (interaction.actionParameters[0] == screenToRemove) {
                    interaction.actionParameters = [];
                }
            };
            this.screens.forEach(function (screen) {
                screen.interactions.forEach(checkInteraction);
                screen.eos.forEach(function (eos) {
                    eos.interactions.forEach(checkInteraction);
                });
            });
        };
        Creative.prototype.canRemoveCanvas = function () {
            return this.canvases.length > 1;
        };
        Creative.prototype.removeCanvas = function (canvas) {
            if (this.canRemoveCanvas()) {
                var idx = this.canvases.indexOf(canvas);
                if (idx != -1) {
                    this.canvases.splice(idx, 1);
                }
            }
        };
        Creative.prototype.canRemoveSegment = function () {
            return this.segments.length > 1;
        };
        Creative.prototype.removeSegment = function (segment) {
            if (this.canRemoveSegment()) {
                var idx = this.segments.indexOf(segment);
                if (idx != -1) {
                    this.segments.splice(idx, 1);
                }
            }
        };
        Creative.prototype.removeElement = function (element, screen) {
            screen.removeElement(element);
            this.removeIfUnreferenced(element);
            this.removeElementFromInteractions(element);
        };
        Creative.prototype.removeIfUnreferenced = function (element) {
            var count = 0;
            this.screens.forEach(function (screen) {
                count += screen.countRefs(element);
            });
            if (count == 0) {
                this.elements.remove(element.elementId);
            }
        };
        Creative.prototype.removeElementFromInteractions = function (elementToRemove) {
            var checkInteraction = function (interaction) {
                if (interaction.target == elementToRemove) {
                    interaction.target = null;
                }
            };
            this.screens.forEach(function (screen) {
                screen.interactions.forEach(checkInteraction);
                screen.eos.forEach(function (eos) {
                    eos.interactions.forEach(checkInteraction);
                });
            });
        };
        Creative.prototype.isNewScreenNameUnique = function (newName, screen) {
            if (this.elements.contains(newName))
                return false;
            var foundScreen = this.getScreen(newName);
            if (foundScreen && foundScreen != screen)
                return false;
            return true;
        };
        Creative.prototype.isNewElementNameUnique = function (newName, element) {
            if (this.getScreen(newName))
                return false;
            if (this.elements.contains(newName) && this.elements.get(newName) != element)
                return false;
            return true;
        };
        Creative.prototype.isNameUnique = function (name) {
            if (this.getScreen(name) || this.elements.contains(name))
                return false;
            return true;
        };
        Creative.prototype.validateElementName = function (element) {
            if (!element.elementId) {
                element.elementId = this.nextElementName(element.constructor);
            }
            else if (!this.isNameUnique(element.elementId)) {
                element.elementId = this.copiedElementId(element.elementId);
            }
            if (!this.elements.contains(element.elementId)) {
                this.elements.put(element.elementId, element);
            }
        };
        Creative.prototype.validateScreenName = function (screen) {
            if (!screen.name || !this.isNameUnique(screen.name)) {
                screen.name = this.nextScreenName();
            }
        };
        Creative.prototype.nextScreenName = function () {
            var screenNames = {};
            this.screens.forEach(function (screen) { if (!screen.name) {
                throw new Error("Screen with no name found.");
            } });
            this.screens.forEach(function (screen) { return screenNames[screen.name] = true; });
            var candidateNumber = Math.max(this.screens.length, 1);
            while (screenNames["Screen" + candidateNumber.toString()]) {
                candidateNumber++;
            }
            return "Screen" + candidateNumber.toString();
        };
        Creative.prototype.nextElementName = function (type) {
            var prefix = bnt.fnName(type);
            if (!prefix) {
                throw new Error("Name not found for " + type);
            }
            var candidate = 1;
            while (!this.isNameUnique(prefix + candidate.toString())) {
                candidate++;
            }
            return prefix + candidate;
        };
        Creative.prototype.copiedElementId = function (originalElementId) {
            var originalName;
            var newName;
            var lastNameIndex;
            if ((lastNameIndex = originalElementId.lastIndexOf('_copy_')) != -1) {
                var copyIndexStr = originalElementId.substr(lastNameIndex + '_copy_'.length);
                var copyIndexNo = Number(copyIndexStr);
                if (!isNaN(copyIndexNo)) {
                    originalName = originalElementId.substr(0, lastNameIndex);
                }
                else {
                    originalName = originalElementId;
                }
            }
            else {
                originalName = originalElementId;
            }
            var index = 1;
            while (!this.isNameUnique(newName = (originalName + '_copy_' + index))) {
                index++;
            }
            return newName;
        };
        Creative.prototype.setController = function (controller) {
            this.controller = controller;
            this.onload.update(undefined);
        };
        Creative.prototype.getController = function () {
            return this.controller;
        };
        Creative.prototype.hintScreenPreload = function (screenIndex, screensToPreload) {
            this.screensToPreload.put(screenIndex, screensToPreload);
        };
        var Creative_1;
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.Map),
            __metadata("design:paramtypes", [])
        ], Creative.prototype, "elements", null);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.AdController)
        ], Creative.prototype, "controller", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.CreativeTimeline)
        ], Creative.prototype, "timeline", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Creative.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Creative.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Creative.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Creative.prototype, "onplay", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Creative.prototype, "onend", void 0);
        Creative = Creative_1 = __decorate([
            bnt.Mixin(bnt.WithTimeline),
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Creative);
        return Creative;
    }());
    bnt.Creative = Creative;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ElementHash = (function (_super) {
        __extends(ElementHash, _super);
        function ElementHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ElementHash.prototype.hash = function (canvas) {
            return canvas.elementId;
        };
        ElementHash = __decorate([
            bnt.Serializable({})
        ], ElementHash);
        return ElementHash;
    }(bnt.HashFn));
    bnt.ElementHash = ElementHash;
    var Element = (function () {
        function Element(baseConfig) {
            var _this = this;
            this.visible = new bnt.ObservableValue();
            this.onrender = new bnt.ObservableValue();
            this.configs = new bnt.Map(new bnt.StateHash());
            this.baseConfig = {};
            this.show = function () { _this.forceVisible(true); };
            this.hide = function () { _this.forceVisible(false); };
            this.id = bnt.IdClass.getNext();
            this.baseConfig = baseConfig;
        }
        Element.prototype.setConfig = function (state, config) {
            this.configs.put(state, config);
        };
        Element.prototype.getConfig = function (state) {
            if (state) {
                if (!this.configs.contains(state)) {
                    this.configs.put(state, this.getBaseConfigCopy());
                }
                return this.configs.get(state);
            }
        };
        Element.prototype.hasConfig = function (state) {
            return this.configs.contains(state);
        };
        Element.prototype.getConfigCopy = function (state) {
            if (this.configs.contains(state)) {
                var config = this.getConfig(state);
                return new config.constructor(config);
            }
            else {
                return this.getBaseConfigCopy();
            }
        };
        Element.prototype.removeConfig = function (state) {
            this.configs.remove(state);
        };
        Element.prototype.getConfigsCopy = function () {
            return this.configs.mapKeys(function (state, config) { return new config.constructor(config); });
        };
        Element.prototype.setBaseConfig = function (config) {
            this.baseConfig = config;
        };
        Element.prototype.getBaseConfigCopy = function () {
            var one = this.configs.one();
            if (one) {
                return new one.constructor(one);
            }
            else {
                return new this.baseConfig.constructor(this.baseConfig);
            }
        };
        Object.defineProperty(Element.prototype, "htmlElement", {
            get: function () {
                return bnt.ElementRendererRegistry.rendererFor(this).htmlElement;
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.clone = function () {
            var elementType = this.constructor;
            var clonedElement = new elementType(this.getBaseConfigCopy());
            clonedElement.elementId = this.elementId;
            this.getConfigsCopy().forEach(function (state, config) {
                clonedElement.setConfig(state, config);
            });
            return clonedElement;
        };
        Element.prototype.forceVisible = function (visible) {
            this.overrideConfig({ visible: visible });
            this.visible.update(visible);
        };
        Element.prototype.overrideConfig = function (configDiff) {
            this.configs.forEach(function (state, config) {
                Object.keys(configDiff).forEach(function (key) {
                    config[key] = configDiff[key];
                });
            });
        };
        Element.prototype.update = function (configDiff) {
            this.overrideConfig(configDiff);
            this.refresh();
        };
        Element.prototype.refresh = function () {
            bnt.ElementRendererRegistry.rendererFor(this).configure(bnt.get(bnt.State));
        };
        Element.ERR_MISSING_STATE = "Missing state!";
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Element.prototype, "id", void 0);
        return Element;
    }());
    bnt.Element = Element;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var WithInteraction = (function () {
        function WithInteraction() {
            this.interactions = new Array();
        }
        WithInteraction.prototype.removeInteraction = function (interaction) {
            var idx = this.interactions.indexOf(interaction);
            if (idx != -1) {
                this.interactions.splice(idx, 1);
            }
        };
        return WithInteraction;
    }());
    bnt.WithInteraction = WithInteraction;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ElementOnScreenHash = (function (_super) {
        __extends(ElementOnScreenHash, _super);
        function ElementOnScreenHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ElementOnScreenHash.prototype.hash = function (eos) {
            return eos.id;
        };
        ElementOnScreenHash = __decorate([
            bnt.Serializable({})
        ], ElementOnScreenHash);
        return ElementOnScreenHash;
    }(bnt.HashFn));
    bnt.ElementOnScreenHash = ElementOnScreenHash;
    var ElementOnScreen = (function () {
        function ElementOnScreen(element) {
            this.element = element;
            this.configs = new bnt.Map(new bnt.StateHash());
            this.baseConfig = {};
            bnt.WithInteraction.call(this);
            this.id = bnt.IdClass.getNext();
        }
        ElementOnScreen_1 = ElementOnScreen;
        ElementOnScreen.prototype.setConfig = function (state, config) {
            this.configs.put(state, config);
        };
        ElementOnScreen.prototype.getConfig = function (state) {
            if (state) {
                if (!this.hasConfig(state)) {
                    this.configs.put(state, this.getBaseConfigCopy());
                }
                return this.configs.get(state);
            }
            return undefined;
        };
        ElementOnScreen.prototype.hasConfig = function (state) {
            return this.configs.contains(state);
        };
        ElementOnScreen.prototype.getConfigCopy = function (state) {
            if (this.configs.contains(state)) {
                var config = this.getConfig(state);
                return new config.constructor(config);
            }
            else {
                return this.getBaseConfigCopy();
            }
        };
        ElementOnScreen.prototype.removeConfig = function (state) {
            this.configs.remove(state);
        };
        ElementOnScreen.prototype.getBaseConfigCopy = function () {
            var one = this.configs.one();
            if (one) {
                return new bnt.ElementOnScreenConfig(one);
            }
            else {
                return new bnt.ElementOnScreenConfig(this.baseConfig);
            }
        };
        ElementOnScreen.prototype.getConfigsCopy = function () {
            return this.configs.mapKeys(function (state, config) { return new bnt.ElementOnScreenConfig(config); });
        };
        ElementOnScreen.prototype.getInteractionsCopy = function () {
            var copies = [];
            this.interactions.forEach(function (interaction) {
                copies.push(interaction.clone());
            });
            return copies;
        };
        ElementOnScreen.prototype.setBaseConfig = function (config) {
            this.baseConfig = config;
        };
        ElementOnScreen.prototype.initZIndex = function (value) {
            this.configs.forEach(function (canvas, eosConfig) { return eosConfig.zIndex = value; });
        };
        ElementOnScreen.prototype.cleanupInteractions = function () {
            this.interactions.forEach(function (interaction) {
                interaction.target = null;
            });
        };
        ElementOnScreen.prototype.clone = function () {
            var eos = new ElementOnScreen_1(this.element.clone());
            eos.configs = this.getConfigsCopy();
            eos.baseConfig = this.getBaseConfigCopy();
            eos.interactions = this.getInteractionsCopy();
            return eos;
        };
        var ElementOnScreen_1;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], ElementOnScreen.prototype, "id", void 0);
        ElementOnScreen = ElementOnScreen_1 = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.WithInteraction),
            __metadata("design:paramtypes", [bnt.Element])
        ], ElementOnScreen);
        return ElementOnScreen;
    }());
    bnt.ElementOnScreen = ElementOnScreen;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Interaction = (function () {
        function Interaction() {
            this.triggerName = "";
            this.triggerFilter = "";
            this.fireOnce = false;
            this._actionParameters = [];
            this.transition = { name: "", in: "", out: "" };
        }
        Interaction_1 = Interaction;
        Object.defineProperty(Interaction.prototype, "action", {
            get: function () {
                return this._action;
            },
            set: function (value) {
                if (value == "destroy")
                    value = "closeAd";
                this._action = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Interaction.prototype, "target", {
            get: function () {
                if (this.targetName) {
                    this._target = bnt.Creative.instance.elements.get(this.targetName);
                    delete this.targetName;
                }
                return this._target;
            },
            set: function (e) {
                this._target = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Interaction.prototype, "actionParameters", {
            get: function () {
                if (this.action == "switchTo" && typeof this._actionParameters[0] == "string") {
                    this._actionParameters[0] = bnt.Creative.instance.getScreen(this._actionParameters[0]);
                }
                return this._actionParameters;
            },
            set: function (p) {
                this._actionParameters = p;
            },
            enumerable: true,
            configurable: true
        });
        Interaction.prototype.clone = function () {
            var clone = new Interaction_1();
            clone.triggerName = this.triggerName;
            clone.triggerFilter = this.triggerFilter;
            clone.fireOnce = this.fireOnce;
            clone._action = this._action;
            clone.targetName = this.targetName;
            clone._target = this._target;
            clone._actionParameters = this._actionParameters.slice(0);
            clone.transition = {
                name: this.transition.name,
                in: this.transition.in,
                out: this.transition.out,
                duration: this.transition.duration
            };
            return clone;
        };
        var Interaction_1;
        Interaction = Interaction_1 = __decorate([
            bnt.Serializable({})
        ], Interaction);
        return Interaction;
    }());
    bnt.Interaction = Interaction;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ScreenHash = (function (_super) {
        __extends(ScreenHash, _super);
        function ScreenHash() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScreenHash.prototype.hash = function (screen) {
            return screen.name;
        };
        ScreenHash = __decorate([
            bnt.Serializable({})
        ], ScreenHash);
        return ScreenHash;
    }(bnt.HashFn));
    bnt.ScreenHash = ScreenHash;
    var Screen = (function () {
        function Screen(config) {
            if (config === void 0) { config = {}; }
            this.id = bnt.IdClass.getNext();
            this.customLoads = [];
            this.eos = [];
            this.indexMapping = new bnt.Map(new bnt.ElementHash());
            this.onclick = new bnt.Observable();
            this.onshow = new bnt.Observable();
            this.onhide = new bnt.Observable();
            this.onshowAnimationStart = new bnt.Observable();
            this.onshowAnimationEnd = new bnt.Observable();
            this.onhideAnimationStart = new bnt.Observable();
            this.onhideAnimationEnd = new bnt.Observable();
            this.onswipeleft = new bnt.Observable();
            this.onswiperight = new bnt.Observable();
            this.onswipeup = new bnt.Observable();
            this.onswipedown = new bnt.Observable();
            this.remainingTime = new bnt.ObservableValue();
            this.time = new bnt.ObservableValue();
            bnt.WithInteraction.call(this);
            bnt.WithTimeline.call(this);
            this.config = new bnt.ScreenConfig(config);
        }
        Screen_1 = Screen;
        Screen.prototype.addElementOnScreen = function (eos) {
            this.eos.unshift(eos);
            bnt.get(bnt.Creative).onElementAdded.update(eos.element);
            return eos;
        };
        Screen.prototype.addElementOnScreenAtEnd = function (eos) {
            this.eos.push(eos);
            bnt.get(bnt.Creative).onElementAdded.update(eos.element);
            return eos;
        };
        Screen.prototype.getEosByElementId = function (elementId) {
            var fn = function (container) {
                var theEos = null;
                container.forEachEos(function (eos) {
                    if (eos.element.elementId == elementId) {
                        theEos = eos;
                    }
                    else if (eos.element instanceof bnt.Group) {
                        var res = fn(eos.element);
                        if (res)
                            theEos = res;
                    }
                });
                return theEos;
            };
            return fn(this);
        };
        Screen.prototype.getEosByType = function (ctor) {
            return this.eos.filter(function (eos) { return eos.element.constructor == ctor; });
        };
        Screen.prototype.deepGetEosByType = function (ctor) {
            var fn = function (container) {
                var arr = container.eos.filter(function (e) { return e.element instanceof ctor; });
                container.eos.forEach(function (e) {
                    if (e.element instanceof bnt.Group)
                        arr = __spread(arr, fn(e.element));
                });
                return arr;
            };
            return fn(this);
        };
        Screen.prototype.getEos = function (element) {
            var theEos = null;
            this.eos.forEach(function (eos) {
                if (eos.element == element) {
                    theEos = eos;
                }
            });
            return theEos;
        };
        Screen.prototype.deepGetEos = function (element) {
            var theEos = null;
            var fn = function (container) {
                container.forEachEos(function (eos) {
                    if (eos.element == element) {
                        theEos = eos;
                    }
                    if (eos.element instanceof bnt.Group)
                        fn(eos.element);
                });
            };
            fn(this);
            return theEos;
        };
        Screen.prototype.forEachEos = function (fn) {
            this.eos.forEach(fn);
        };
        Screen.prototype.eosMap = function (fn) {
            return this.eos.map(fn);
        };
        Screen.prototype.eosFilter = function (fn) {
            return this.eos.filter(fn);
        };
        Screen.prototype.moveEosDown = function (eos) {
            var idx = this.eos.indexOf(eos);
            if (idx != -1) {
                this.eos.splice(idx, 1);
                this.eos.splice(idx + 1, 0, eos);
            }
        };
        Screen.prototype.moveEosUp = function (eos) {
            var idx = this.eos.indexOf(eos);
            if (idx > 0) {
                this.eos.splice(idx, 1);
                this.eos.splice(idx - 1, 0, eos);
            }
        };
        Screen.prototype.countRefs = function (element) {
            return this.eos.filter(function (eos) { return eos.element == element; }).length;
        };
        Screen.prototype.getEosIndex = function (element) {
            var theIndex = null;
            this.eos.forEach(function (eos, index) {
                if (eos.element == element) {
                    theIndex = index;
                }
            });
            return theIndex;
        };
        Screen.prototype.executeScreenElementsMapping = function (container, lastIndex) {
            var _this = this;
            if (lastIndex === void 0) { lastIndex = -1; }
            container.eos.forEach(function (eos) {
                if (_this.indexMapping.get(eos.element))
                    return;
                lastIndex++;
                _this.indexMapping.put(eos.element, lastIndex);
                if (eos.element instanceof bnt.Group) {
                    lastIndex = _this.executeScreenElementsMapping(eos.element, lastIndex);
                }
            });
            return lastIndex;
        };
        Screen.prototype.mapScreenElementsIndexes = function () {
            this.indexMapping = new bnt.Map(new bnt.ElementHash());
            this.executeScreenElementsMapping(this);
        };
        Screen.prototype.getBottomElementByType = function (ctor) {
            var _this = this;
            var typeElements = this.deepGetEosByType(ctor);
            var unindexedElement = false;
            for (var i = 0, len = typeElements.length; i < len; i++) {
                if (this.indexMapping && !this.indexMapping.get(typeElements[i].element)) {
                    unindexedElement = true;
                }
            }
            if (unindexedElement)
                this.mapScreenElementsIndexes();
            return typeElements.length && typeElements.sort(function (a, b) { return _this.indexMapping.get(b.element) - _this.indexMapping.get(a.element); })[0].element;
        };
        Screen.prototype.removeElement = function (element) {
            var removeEosFromContainer = function (container) {
                return container.eos
                    .filter(function (e) { return e.element != element; })
                    .map(function (e) {
                    if (e.element instanceof bnt.Group) {
                        e.element.eos = removeEosFromContainer(e.element);
                    }
                    return e;
                });
            };
            this.eos = removeEosFromContainer(this);
        };
        Screen.prototype.setConfig = function (element, state, config) {
            this.getEos(element).setConfig(state, config);
        };
        Screen.prototype.getPath = function (theEos) {
            var fn = function (container, containerEos) {
                var e_11, _a;
                if (!container)
                    return undefined;
                var isScreen = container instanceof bnt.Screen;
                try {
                    for (var _b = __values(container.eos), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var eos = _c.value;
                        if (eos == theEos)
                            return isScreen ? [] : [containerEos];
                        if (eos.element instanceof bnt.Group) {
                            var path = fn(eos.element, eos);
                            if (path && path.length)
                                return isScreen ? path : __spread([containerEos], path);
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
                if (isScreen)
                    return undefined;
            };
            return fn(this);
        };
        Screen.prototype.addCustomLoad = function (future) {
            this.customLoads.push(future);
        };
        Screen.prototype.clone = function () {
            var newScreen = new Screen_1(this.config);
            newScreen.name = this.name;
            bnt.cloneContainerContents(this, newScreen);
            return newScreen;
        };
        var Screen_1;
        __decorate([
            bnt.Transient,
            __metadata("design:type", Object)
        ], Screen.prototype, "id", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.ScreenTimeline)
        ], Screen.prototype, "timeline", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Screen.prototype, "onend", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Screen.prototype, "onshow", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Screen.prototype, "onhide", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Screen.prototype, "onswipeleft", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Screen.prototype, "onswiperight", void 0);
        __decorate([
            bnt.Event('number'),
            __metadata("design:type", Object)
        ], Screen.prototype, "remainingTime", void 0);
        __decorate([
            bnt.Event('number'),
            __metadata("design:type", Object)
        ], Screen.prototype, "time", void 0);
        Screen = Screen_1 = __decorate([
            bnt.Mixin(bnt.WithTimeline, bnt.WithInteraction),
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Screen);
        return Screen;
    }());
    bnt.Screen = Screen;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Video = (function (_super) {
        __extends(Video, _super);
        function Video(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.VideoConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            _this.remainingTime = new bnt.ObservableValue();
            _this.time = new bnt.ObservableValue();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            bnt.WithTimeline.call(_this);
            return _this;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Video.prototype, "id", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.VideoTimeline)
        ], Video.prototype, "timeline", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Video.prototype, "onplay", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Video.prototype, "onpause", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Video.prototype, "onend", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", bnt.Observable)
        ], Video.prototype, "onstop", void 0);
        __decorate([
            bnt.Event('number'),
            __metadata("design:type", Object)
        ], Video.prototype, "remainingTime", void 0);
        __decorate([
            bnt.Event('number'),
            __metadata("design:type", Object)
        ], Video.prototype, "time", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Video.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Video.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Video.prototype, "hide", void 0);
        Video = __decorate([
            bnt.Mixin(bnt.WithTimeline),
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Video);
        return Video;
    }(bnt.Element));
    bnt.Video = Video;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Image = (function (_super) {
        __extends(Image, _super);
        function Image(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.ImageConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Image.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Image.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Image.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Image.prototype, "hide", void 0);
        Image = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Image);
        return Image;
    }(bnt.Element));
    bnt.Image = Image;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CloseButton = (function (_super) {
        __extends(CloseButton, _super);
        function CloseButton(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.CloseButtonConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], CloseButton.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], CloseButton.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], CloseButton.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], CloseButton.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], CloseButton.prototype, "hide", void 0);
        CloseButton = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], CloseButton);
        return CloseButton;
    }(bnt.Element));
    bnt.CloseButton = CloseButton;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var OverlayScreen = (function (_super) {
        __extends(OverlayScreen, _super);
        function OverlayScreen(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, config) || this;
            _this.onclick = new bnt.Observable();
            _this.closeButton = new bnt.CloseButton(config.closeButton);
            var closeButtonEos = new bnt.ElementOnScreen(_this.closeButton);
            _this.addElementOnScreen(closeButtonEos);
            return _this;
        }
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], OverlayScreen.prototype, "onclick", void 0);
        OverlayScreen = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], OverlayScreen);
        return OverlayScreen;
    }(bnt.Screen));
    bnt.OverlayScreen = OverlayScreen;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TextBox = (function (_super) {
        __extends(TextBox, _super);
        function TextBox(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.TextBoxConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        Object.defineProperty(TextBox.prototype, "text", {
            get: function () {
                return this.getConfig(bnt.get(bnt.State)).text;
            },
            set: function (value) {
                this.getConfig(bnt.get(bnt.State)).text = value;
                this.refresh();
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], TextBox.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], TextBox.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], TextBox.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], TextBox.prototype, "hide", void 0);
        TextBox = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], TextBox);
        return TextBox;
    }(bnt.Element));
    bnt.TextBox = TextBox;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HtmlBox = (function (_super) {
        __extends(HtmlBox, _super);
        function HtmlBox(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.HtmlBoxConfig(config)) || this;
            _this.htmlCode = "";
            _this.onclick = new bnt.Observable();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        HtmlBox.prototype.clone = function () {
            var element = _super.prototype.clone.call(this);
            element.htmlCode = this.htmlCode;
            return element;
        };
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], HtmlBox.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], HtmlBox.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], HtmlBox.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], HtmlBox.prototype, "hide", void 0);
        HtmlBox = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], HtmlBox);
        return HtmlBox;
    }(bnt.Element));
    bnt.HtmlBox = HtmlBox;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Shape = (function (_super) {
        __extends(Shape, _super);
        function Shape(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.ShapeConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Shape.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Shape.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Shape.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Shape.prototype, "hide", void 0);
        Shape = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Shape);
        return Shape;
    }(bnt.Element));
    bnt.Shape = Shape;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Hotspot = (function (_super) {
        __extends(Hotspot, _super);
        function Hotspot(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.HotspotConfig(config)) || this;
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onclick = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Hotspot.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Hotspot.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Hotspot.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Hotspot.prototype, "hide", void 0);
        Hotspot = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Hotspot);
        return Hotspot;
    }(bnt.Element));
    bnt.Hotspot = Hotspot;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Subtitle = (function (_super) {
        __extends(Subtitle, _super);
        function Subtitle(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.SubtitleConfig(config)) || this;
            _this.onclick = new bnt.Observable();
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Subtitle.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Subtitle.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Subtitle.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Subtitle.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Subtitle.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Subtitle.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Subtitle.prototype, "hide", void 0);
        Subtitle = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Subtitle);
        return Subtitle;
    }(bnt.Element));
    bnt.Subtitle = Subtitle;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Group = (function (_super) {
        __extends(Group, _super);
        function Group(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this, new bnt.GroupConfig(config)) || this;
            _this.eos = [];
            _this.onshowAnimationStart = new bnt.Observable();
            _this.onshowAnimationEnd = new bnt.Observable();
            _this.onhideAnimationStart = new bnt.Observable();
            _this.onhideAnimationEnd = new bnt.Observable();
            _this.onclick = new bnt.Observable();
            _this.onmouseenter = new bnt.Observable();
            _this.onmouseleave = new bnt.Observable();
            return _this;
        }
        Group_1 = Group;
        Group.prototype.addElementOnScreen = function (eos) {
            this.eos.unshift(eos);
            bnt.get(bnt.Creative).onElementAdded.update(eos.element);
            return eos;
        };
        Group.prototype.addElementOnScreenAtEnd = function (eos) {
            this.eos.push(eos);
            bnt.get(bnt.Creative).onElementAdded.update(eos.element);
            return eos;
        };
        Group.prototype.getEosByElementId = function (elementId) {
            var theEos = null;
            this.forEachEos(function (eos) {
                if (eos.element.elementId == elementId) {
                    theEos = eos;
                }
            });
            return theEos;
        };
        Group.prototype.getEosByType = function (ctor) {
            return this.eos.filter(function (eos) { return eos.element.constructor == ctor; });
        };
        Group.prototype.deepGetEosByType = function (ctor) {
            var fn = function (container) {
                var arr = container.eos.filter(function (e) { return e.element instanceof ctor; });
                container.eos.forEach(function (e) {
                    if (e.element instanceof bnt.Group)
                        arr = __spread(arr, fn(e.element));
                });
                return arr;
            };
            return fn(this);
        };
        Group.prototype.getEos = function (element) {
            var theEos = null;
            this.eos.forEach(function (eos) {
                if (eos.element == element) {
                    theEos = eos;
                }
            });
            return theEos;
        };
        Group.prototype.forEachEos = function (fn) {
            this.eos.forEach(fn);
        };
        Group.prototype.eosMap = function (fn) {
            return this.eos.map(fn);
        };
        Group.prototype.eosFilter = function (fn) {
            return this.eos.filter(fn);
        };
        Group.prototype.moveEosDown = function (eos) {
            var idx = this.eos.indexOf(eos);
            if (idx != -1) {
                this.eos.splice(idx, 1);
                this.eos.splice(idx + 1, 0, eos);
            }
        };
        Group.prototype.moveEosUp = function (eos) {
            var idx = this.eos.indexOf(eos);
            if (idx > 0) {
                this.eos.splice(idx, 1);
                this.eos.splice(idx - 1, 0, eos);
            }
        };
        Group.prototype.getEosIndex = function (element) {
            var theIndex = null;
            this.eos.forEach(function (eos, index) {
                if (eos.element == element) {
                    theIndex = index;
                }
            });
            return theIndex;
        };
        Group.prototype.removeElement = function (element) {
            this.eos.splice(this.getEosIndex(element), 1);
        };
        Group.prototype.clone = function () {
            var baseConfig = this.getBaseConfigCopy();
            var newGroup = new Group_1(baseConfig);
            newGroup.elementId = this.elementId;
            newGroup.setBaseConfig(baseConfig);
            this.getConfigsCopy().forEach(function (state, config) {
                newGroup.setConfig(state, new bnt.GroupConfig(config));
            });
            bnt.cloneContainerContents(this, newGroup);
            return newGroup;
        };
        var Group_1;
        __decorate([
            bnt.Transient,
            __metadata("design:type", String)
        ], Group.prototype, "id", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onshowAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onshowAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onhideAnimationStart", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onhideAnimationEnd", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onclick", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onmouseenter", void 0);
        __decorate([
            bnt.Event(),
            __metadata("design:type", Object)
        ], Group.prototype, "onmouseleave", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Group.prototype, "show", void 0);
        __decorate([
            bnt.Action(),
            __metadata("design:type", Function)
        ], Group.prototype, "hide", void 0);
        Group = Group_1 = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], Group);
        return Group;
    }(bnt.Element));
    bnt.Group = Group;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VideoConfig = (function () {
        function VideoConfig(config) {
            if (config === void 0) { config = {}; }
            this.autoplay = bnt.withDefault(config.autoplay, bnt.Defaults.video.autoplay);
            this.mute = bnt.withDefault(config.mute, bnt.Defaults.video.mute);
            this.videoWidth = bnt.withDefault(config.videoWidth, bnt.Defaults.video.videoWidth);
            this.videoHeight = bnt.withDefault(config.videoHeight, bnt.Defaults.video.videoHeight);
            this.videoDuration = bnt.withDefault(config.videoDuration, bnt.Defaults.video.videoDuration);
            this.coverWidth = bnt.withDefault(config.coverWidth, bnt.Defaults.video.coverWidth);
            this.coverHeight = bnt.withDefault(config.coverHeight, bnt.Defaults.video.coverHeight);
            this.configureSrc(config, bnt.Defaults.video);
            this.configureDimension(config, bnt.Defaults.video);
            this.configureVisibility(config, bnt.Defaults.video);
            this.configureCover(config, bnt.Defaults.video);
            this.configurePan(config, bnt.Defaults.video);
        }
        VideoConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.SrcConfig, bnt.DimensionConfig, bnt.VisibilityConfig, bnt.CoverConfig, bnt.PanConfig),
            __metadata("design:paramtypes", [Object])
        ], VideoConfig);
        return VideoConfig;
    }());
    bnt.VideoConfig = VideoConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ImageConfig = (function () {
        function ImageConfig(config) {
            if (config === void 0) { config = {}; }
            this.imageWidth = bnt.withDefault(config.imageWidth, bnt.Defaults.image.imageWidth);
            this.imageHeight = bnt.withDefault(config.imageHeight, bnt.Defaults.image.imageHeight);
            this.configureHoverImage(config, bnt.Defaults.image);
            this.configureSrc(config, bnt.Defaults.image);
            this.configureDimension(config, bnt.Defaults.image);
            this.configureAngle(config, bnt.Defaults.image);
            this.configureVisibility(config, bnt.Defaults.image);
            this.configurePan(config, bnt.Defaults.image);
        }
        ImageConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.SrcConfig, bnt.DimensionConfig, bnt.RotationConfig, bnt.VisibilityConfig, bnt.PanConfig, bnt.HoverImageConfig),
            __metadata("design:paramtypes", [Object])
        ], ImageConfig);
        return ImageConfig;
    }());
    bnt.ImageConfig = ImageConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var PositionConfig = (function () {
        function PositionConfig() {
        }
        PositionConfig.prototype.configurePosition = function (config, defaults) {
            this.x = bnt.withDefault(config.x, defaults.x);
            this.y = bnt.withDefault(config.y, defaults.y);
        };
        PositionConfig = __decorate([
            bnt.Serializable({})
        ], PositionConfig);
        return PositionConfig;
    }());
    bnt.PositionConfig = PositionConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var AnimationConfig = (function () {
        function AnimationConfig(config) {
            if (config === void 0) { config = {}; }
            if (config) {
                this.name = bnt.withDefault(config.name, bnt.Defaults.animation.name);
                this.delay = bnt.withDefault(config.delay, bnt.Defaults.animation.delay);
                this.duration = bnt.withDefault(config.duration, bnt.Defaults.animation.duration);
                this.ease = bnt.withDefault(config.ease, bnt.Defaults.animation.ease);
                this.repeat = bnt.withDefault(config.repeat, bnt.Defaults.animation.repeat);
            }
            else {
                this.name = bnt.Defaults.animation.name;
                this.delay = bnt.Defaults.animation.delay;
                this.duration = bnt.Defaults.animation.duration;
                this.ease = bnt.Defaults.animation.ease;
                this.repeat = bnt.Defaults.animation.repeat;
            }
        }
        Object.defineProperty(AnimationConfig.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (value) {
                value = value ? value : 0;
                this._duration = value;
            },
            enumerable: true,
            configurable: true
        });
        AnimationConfig = __decorate([
            bnt.Serializable({}),
            __metadata("design:paramtypes", [Object])
        ], AnimationConfig);
        return AnimationConfig;
    }());
    bnt.AnimationConfig = AnimationConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ElementOnScreenConfig = (function () {
        function ElementOnScreenConfig(config) {
            if (config === void 0) { config = {}; }
            this.zIndex = bnt.withDefault(config.zIndex, bnt.Defaults.elementOnScreen.zIndex);
            this.configurePosition(config, bnt.Defaults.elementOnScreen);
            this.configureOnHide(config.onHide);
            this.configureOnShow(config.onShow);
        }
        ElementOnScreenConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.PositionConfig, bnt.TransitionConfig),
            __metadata("design:paramtypes", [Object])
        ], ElementOnScreenConfig);
        return ElementOnScreenConfig;
    }());
    bnt.ElementOnScreenConfig = ElementOnScreenConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var OverlayScreenConfig = (function (_super) {
        __extends(OverlayScreenConfig, _super);
        function OverlayScreenConfig(config) {
            var _this = _super.call(this, config) || this;
            _this.configureCloseButton(config.closeButton);
            return _this;
        }
        OverlayScreenConfig.prototype.configureCloseButton = function (config) {
            if (config === void 0) { config = {}; }
            this.closeButton = new bnt.CloseButtonConfig(config);
        };
        OverlayScreenConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], OverlayScreenConfig);
        return OverlayScreenConfig;
    }(bnt.ScreenConfig));
    bnt.OverlayScreenConfig = OverlayScreenConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CloseButtonConfig = (function () {
        function CloseButtonConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureDimension(config, bnt.Defaults.closeButton);
            this.zIndex = 60000;
        }
        CloseButtonConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig),
            __metadata("design:paramtypes", [Object])
        ], CloseButtonConfig);
        return CloseButtonConfig;
    }());
    bnt.CloseButtonConfig = CloseButtonConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TextBoxConfig = (function () {
        function TextBoxConfig(config) {
            if (config === void 0) { config = {}; }
            this.text = bnt.withDefault(config.text, bnt.Defaults.textBox.text);
            this.configureTextFormatting(config, bnt.Defaults.textFormatting);
            this.configureDimension(config, bnt.Defaults.textBox);
            this.configureAngle(config, bnt.Defaults.textBox);
            this.configureText(config, bnt.Defaults.textBox);
            this.configureVisibility(config, bnt.Defaults.textBox);
        }
        TextBoxConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig, bnt.TextFormattingConfig, bnt.RotationConfig, bnt.TextConfig, bnt.VisibilityConfig),
            __metadata("design:paramtypes", [Object])
        ], TextBoxConfig);
        return TextBoxConfig;
    }());
    bnt.TextBoxConfig = TextBoxConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HtmlBoxConfig = (function () {
        function HtmlBoxConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureVisibility(config, bnt.Defaults.htmlBox);
            this.configureDimension(config, bnt.Defaults.htmlBox);
        }
        HtmlBoxConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig, bnt.VisibilityConfig),
            __metadata("design:paramtypes", [Object])
        ], HtmlBoxConfig);
        return HtmlBoxConfig;
    }());
    bnt.HtmlBoxConfig = HtmlBoxConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ShapeConfig = (function () {
        function ShapeConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureDimension(config, bnt.Defaults.shape);
            this.configureAngle(config, bnt.Defaults.shape);
            this.configureVisibility(config, bnt.Defaults.shape);
            this.backgroundColor = bnt.withDefault(config.backgroundColor, bnt.Defaults.shape.backgroundColor);
            this.radius = bnt.withDefault(config.radius, bnt.Defaults.shape.radius);
            this.border = bnt.withDefault(config.border, bnt.Defaults.shape.border);
            this.borderColor = bnt.withDefault(config.borderColor, bnt.Defaults.shape.borderColor);
        }
        ShapeConfig = __decorate([
            bnt.Mixin(bnt.DimensionConfig, bnt.RotationConfig, bnt.VisibilityConfig),
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            __metadata("design:paramtypes", [Object])
        ], ShapeConfig);
        return ShapeConfig;
    }());
    bnt.ShapeConfig = ShapeConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HotspotConfig = (function () {
        function HotspotConfig(config) {
            if (config === void 0) { config = {}; }
            this.configureDimension(config, bnt.Defaults.hotspot);
            this.radius = bnt.withDefault(config.radius, bnt.Defaults.hotspot.radius);
            this.configureAngle(config, bnt.Defaults.hotspot);
            this.configureVisibility(config, bnt.Defaults.hotspot);
        }
        HotspotConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.DimensionConfig, bnt.RotationConfig, bnt.VisibilityConfig),
            __metadata("design:paramtypes", [Object])
        ], HotspotConfig);
        return HotspotConfig;
    }());
    bnt.HotspotConfig = HotspotConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var GroupConfig = (function () {
        function GroupConfig(config) {
            if (config === void 0) { config = {}; }
            this.configurePosition(config, bnt.Defaults.group);
            this.configureDimension(config, bnt.Defaults.group);
            this.configureVisibility(config, bnt.Defaults.group);
            this.configureOnHide(config.onHide);
            this.configureOnShow(config.onShow);
        }
        GroupConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.PositionConfig, bnt.DimensionConfig, bnt.VisibilityConfig, bnt.TransitionConfig),
            __metadata("design:paramtypes", [Object])
        ], GroupConfig);
        return GroupConfig;
    }());
    bnt.GroupConfig = GroupConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TargetVideoConfig = (function () {
        function TargetVideoConfig() {
        }
        TargetVideoConfig.prototype.configureTargetVideo = function (config, defaults) {
            this.targetVideo = bnt.withDefault(config.targetVideo, defaults.targetVideo);
        };
        TargetVideoConfig = __decorate([
            bnt.Serializable({})
        ], TargetVideoConfig);
        return TargetVideoConfig;
    }());
    bnt.TargetVideoConfig = TargetVideoConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VisibleOnMuteConfig = (function () {
        function VisibleOnMuteConfig() {
        }
        VisibleOnMuteConfig.prototype.configureVisibleOnMute = function (config, defaults) {
            this.visibleOnMute = bnt.withDefault(config.visibleOnMute, defaults.visibleOnMute);
        };
        VisibleOnMuteConfig = __decorate([
            bnt.Serializable({})
        ], VisibleOnMuteConfig);
        return VisibleOnMuteConfig;
    }());
    bnt.VisibleOnMuteConfig = VisibleOnMuteConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SubtitleConfig = (function () {
        function SubtitleConfig(config) {
            if (config === void 0) { config = {}; }
            this.subtitleActions = bnt.withDefault(config.subtitleActions, bnt.Defaults.subtitle.subtitleActions);
            this.configureTextFormatting(config, bnt.Defaults.textFormatting);
            this.configureDimension(config, bnt.Defaults.subtitle);
            this.configureAngle(config, bnt.Defaults.subtitle);
            this.configureSrc(config, bnt.Defaults.subtitle);
            this.configureTargetVideo(config, bnt.Defaults.subtitle);
            this.configureVisibility(config, bnt.Defaults.subtitle);
            this.configureVisibleOnMute(config, bnt.Defaults.subtitle);
        }
        SubtitleConfig = __decorate([
            bnt.Serializable({
                transientTypes: [bnt.Observable, bnt.ObservableValue]
            }),
            bnt.Mixin(bnt.TargetVideoConfig, bnt.SrcConfig, bnt.DimensionConfig, bnt.TextFormattingConfig, bnt.RotationConfig, bnt.VisibilityConfig, bnt.VisibleOnMuteConfig),
            __metadata("design:paramtypes", [Object])
        ], SubtitleConfig);
        return SubtitleConfig;
    }());
    bnt.SubtitleConfig = SubtitleConfig;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function rel(a, b) {
        return Math.abs((b - a) / a);
    }
    var Dimension = (function () {
        function Dimension() {
        }
        return Dimension;
    }());
    bnt.Dimension = Dimension;
    var CanvasChangeDetector = (function () {
        function CanvasChangeDetector(dimensionChange, possibleCanvases) {
            var _this = this;
            this.possibleCanvases = possibleCanvases;
            this.canvasChange = new bnt.Observable();
            this.onDimensionUpdated = function (dim) {
                _this.canvasChange.update(_this.selectColosestCanvas(dim.width, dim.height));
            };
            dimensionChange.addObserver(function (dim) { return _this.onDimensionUpdated(dim); });
        }
        CanvasChangeDetector.prototype.selectColosestCanvas = function (width, height) {
            var ideal = new bnt.Canvas(new bnt.CanvasConfig({ width: width, height: height }));
            var set = new bnt.SortedSet(function (a) { return a.delta; })
                .with(this.possibleCanvases.map(function (canvas) { return ({
                canvas: canvas,
                delta: 2 * rel(canvas.getAspectRatio(), ideal.getAspectRatio())
                    + rel(canvas.config.width, ideal.config.width)
            }); }));
            var first = set.first();
            if (first) {
                return first.canvas;
            }
            else {
                throw new Error("There's water in the basement and the pilot light is out.");
            }
        };
        return CanvasChangeDetector;
    }());
    bnt.CanvasChangeDetector = CanvasChangeDetector;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var BannerStage = (function () {
        function BannerStage() {
        }
        BannerStage_1 = BannerStage;
        BannerStage.prototype.init = function () {
            var _this = this;
            bnt.set(BannerStage_1, this);
            this.creative = bnt.get(bnt.Creative);
            this.stateChangeDetector = new bnt.StateChangeDetector(this.creative.segments, this.canvases);
            this.localResizeController = new bnt.ResizeController();
            this.localResizeController.init();
            bnt.withVals([[bnt.ResizeController, this.localResizeController]], function () { return _this.stateChangeDetector.init(); });
            this.stateChangeDetector.stateUpdated.addObserver(function (state) {
                _this.lastState = state;
                bnt.set(bnt.State, state);
                _this.applyCanvasConfig(state);
            });
            this.renderer = bnt.withVals([[bnt.StateChangeDetector, this.stateChangeDetector]], function () { return new bnt.ScreenRenderer(_this.screen); });
            this.renderer.init();
            bnt.get(bnt.MainStage).autoStart = false;
            bnt.get(bnt.MainStage).applyBackground = false;
        };
        BannerStage.prototype.load = function () {
            return this.renderer.load();
        };
        BannerStage.prototype.updateScale = function (state) {
            var scaleX = 1;
            var scaleY = 1;
            var width = this.localResizeController.previous.width;
            var height = this.localResizeController.previous.height;
            scaleX = width / state.canvas.config.width;
            scaleY = height / state.canvas.config.height;
            var scale = Math.min(scaleX, scaleY);
            var translateX = bnt.px((width - state.canvas.config.width * scale) / 2);
            var translateY = bnt.px((height - state.canvas.config.height * scale) / 2);
            if (this.htmlElement()) {
                bnt.style(this.htmlElement(), {
                    width: bnt.px(state.canvas.config.width),
                    height: bnt.px(state.canvas.config.height),
                    top: translateY,
                    left: translateX,
                    transformOrigin: '0 0',
                    'transform': 'scale(' + scale + ',' + scale + ')',
                    '-webkit-transform': 'scale(' + scale + ',' + scale + ')'
                });
            }
        };
        BannerStage.prototype.applyCanvasConfig = function (state) {
            if (this.htmlElement) {
                bnt.style(this.htmlElement(), {
                    backgroundColor: this.creative.config.color,
                    position: 'absolute'
                });
                this.updateScale(state);
            }
        };
        BannerStage.prototype.renderMe = function (target) {
            var htmlElement = bnt.createElement('div', target);
            htmlElement.style.position = "relative";
            htmlElement.hidden = true;
            this.htmlElement = function () { return htmlElement; };
        };
        BannerStage.prototype.render = function (target) {
            var _this = this;
            this.parentElement = function () { return target; };
            this.renderMe(target);
            return bnt.withVals([[bnt.StateChangeDetector, this.stateChangeDetector]], function () { return _this.renderer.render(_this.htmlElement()); });
        };
        BannerStage.prototype.showStage = function () {
            var _this = this;
            requestAnimationFrame(function () { });
            var transition = bnt.withVals([[bnt.State, this.lastState]], function () { return new bnt.ScreenTransition(_this.htmlElement()); });
            var p1 = transition.switchBetween(null, this.renderer);
            this.htmlElement().hidden = false;
            return p1;
        };
        BannerStage.prototype.start = function () {
            this.localResizeController.start();
            return this.showStage();
        };
        BannerStage.prototype.hideStage = function () {
            var _this = this;
            var transition = bnt.withVals([[bnt.State, this.lastState]], function () { return new bnt.ScreenTransition(_this.htmlElement()); });
            var p1 = transition.switchBetween(this.renderer, null)
                .map(function () {
                _this.htmlElement().hidden = true;
            });
            return p1;
        };
        BannerStage.prototype.getState = function () {
            return this.stateChangeDetector.getState();
        };
        var BannerStage_1;
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.ScreenRenderer)
        ], BannerStage.prototype, "renderer", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", Function)
        ], BannerStage.prototype, "htmlElement", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", Function)
        ], BannerStage.prototype, "parentElement", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.Creative)
        ], BannerStage.prototype, "creative", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.ResizeController)
        ], BannerStage.prototype, "localResizeController", void 0);
        __decorate([
            bnt.Transient,
            __metadata("design:type", bnt.StateChangeDetector)
        ], BannerStage.prototype, "stateChangeDetector", void 0);
        BannerStage = BannerStage_1 = __decorate([
            bnt.Serializable({})
        ], BannerStage);
        return BannerStage;
    }());
    bnt.BannerStage = BannerStage;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var MainStage = (function () {
        function MainStage() {
            var _this = this;
            this.renderersMap = new bnt.Map(new bnt.ScreenHash());
            this.state = bnt.lazyGet(bnt.State);
            this.rendered = false;
            this.stateChangeDetector = bnt.lazyGet(bnt.StateChangeDetector);
            this.autoStart = true;
            this.applyBackground = true;
            this.inited = false;
            this.updateTimeClosure = function (value) {
                _this.creative.timeMillisec.update(value);
            };
            this.updateRemainingTimeClosure = function (value) {
                _this.creative.remainingTimeMillisec.update(value);
            };
            this.updateDurationClosure = function (value) {
                _this.creative.duration.update(value);
            };
            this.updateOnEndClosure = function () {
                _this.creative.onend.update(undefined);
            };
            this.stateChangeDetector().stateUpdated.addObserver(function (state) { return _this.applyState(); });
            bnt.get(bnt.ResizeController).resize.addObserver(function (_) { return _this.updateScale(); });
            bnt.set(MainStage, this);
        }
        MainStage.prototype.applyState = function () {
            var state = bnt.get(bnt.State);
            bnt.get(bnt.CreativeRenderer).onstatechange.update(state);
            this.applyCanvasConfig(state);
        };
        MainStage.prototype.currentRenderer = function () {
            return this.currentScreen && this.renderersMap.get(this.currentScreen);
        };
        MainStage.prototype.render = function (target) {
            if (target === void 0) { target = this.container; }
            this.container = target;
            this.rendered = true;
            this.renderMe(target);
            var p1 = this.currentRenderer().render(this.htmlElement);
            return p1;
        };
        MainStage.prototype.renderMe = function (target) {
            this.htmlElement = bnt.createElement('div', target);
            this.htmlElement.style.position = "relative";
            this.htmlElement.style.overflow = "hidden";
            this.htmlElement.hidden = true;
            document.body.appendChild(this.getMainStageStyle());
            this.applyCanvasConfig(this.state());
        };
        MainStage.prototype.getMainStageStyle = function () {
            var style = document.createElement('style');
            style.innerHTML = "\n      * {\n        -webkit-animation-duration: 0.4s;\n        animation-duration: 0.4s;\n      }\n      ";
            return style;
        };
        MainStage.prototype.updateScale = function () {
            var state = bnt.get(bnt.State);
            var scaleX = 1;
            var scaleY = 1;
            var previous = bnt.get(bnt.ResizeController).previous;
            var width = previous.width;
            var height = previous.height;
            scaleX = width / state.canvas.config.width;
            scaleY = height / state.canvas.config.height;
            var scale = Math.min(scaleX, scaleY);
            var translateX = bnt.px((width - state.canvas.config.width * scale) / 2);
            var translateY = bnt.px((height - state.canvas.config.height * scale) / 2);
            if (this.htmlElement) {
                bnt.style(this.htmlElement, {
                    width: bnt.px(state.canvas.config.width),
                    height: bnt.px(state.canvas.config.height),
                    top: translateY,
                    left: translateX,
                    transformOrigin: '0 0',
                    'transform': 'scale(' + scale + ',' + scale + ')',
                    '-webkit-transform': 'scale(' + scale + ',' + scale + ')'
                });
            }
        };
        MainStage.prototype.applyCanvasConfig = function (state) {
            if (this.htmlElement) {
                bnt.style(this.htmlElement, {
                    position: 'absolute'
                });
                this.updateScale();
            }
        };
        MainStage.prototype.init = function () {
            var _this = this;
            this.inited = true;
            this.creative = bnt.get(bnt.Creative);
            this.creative.forEachScreen(function (screen) {
                var renderer = new bnt.ScreenRenderer(screen);
                renderer.init();
                _this.renderersMap.put(screen, renderer);
            });
            this.currentScreen = this.creative.firstScreen();
        };
        MainStage.prototype.start = function () {
            if (this.autoStart) {
                bnt.logger.log('start main stage');
                return this.showStage();
            }
            else {
                return bnt.Promise.fulfilledWith(null).future;
            }
        };
        MainStage.prototype.load = function () {
            var p1 = this.currentRenderer().load();
            return p1;
        };
        MainStage.prototype.preloadScreens = function (ofScreen) {
            var _this = this;
            var toPreload = this.creative.screensToPreload.get(ofScreen);
            toPreload && toPreload.map(function (screen) { return _this.renderersMap.get(screen).load(); });
        };
        MainStage.prototype.setScreenObservers = function (screen) {
            screen.remainingTimeMillisec.addObserver(this.updateRemainingTimeClosure);
            screen.duration.addObserver(this.updateDurationClosure);
            screen.timeMillisec.addObserver(this.updateTimeClosure);
            screen.onend.addObserver(this.updateOnEndClosure);
        };
        MainStage.prototype.removeScreenObservers = function (screen) {
            screen.remainingTimeMillisec.removeObserver(this.updateRemainingTimeClosure);
            screen.duration.removeObserver(this.updateDurationClosure);
            screen.timeMillisec.removeObserver(this.updateTimeClosure);
            screen.onend.removeObserver(this.updateOnEndClosure);
        };
        MainStage.prototype.showStage = function () {
            var _this = this;
            if (!this.inited) {
                this.init();
                this.render();
            }
            this.setScreenObservers(this.currentScreen);
            this.htmlElement.hidden = false;
            return this.switchBetween(null, this.currentScreen).map(function () { return _this.preloadScreens(_this.currentScreen); });
        };
        MainStage.prototype.hideStage = function () {
            var _this = this;
            var transition = new bnt.ScreenTransition(this.htmlElement);
            var p1 = transition.switchBetween(this.currentRenderer(), null);
            var p2 = p1;
            return p2.map(function () { return _this.htmlElement.hidden = true; });
        };
        MainStage.prototype.destroyStage = function () {
            var _this = this;
            this.inited = false;
            return this.switchBetween(this.currentScreen, null).flatMap(function () {
                return bnt.Promise.forAll(_this.renderersMap.mapToArray(function (screen, renderer) {
                    return renderer.destroy();
                }));
            }).map(function () {
                _this.rendered = false;
                _this.htmlElement && _this.htmlElement.parentNode && _this.htmlElement.parentNode.removeChild(_this.htmlElement);
            });
        };
        MainStage.prototype.switchBetween = function (screen1, screen2, switchTransition) {
            var _this = this;
            var transition = new bnt.ScreenTransition(this.htmlElement);
            var load = screen2 ? this.renderersMap.get(screen2).load().flatMap(function () {
                return _this.renderersMap.get(screen2).render(_this.htmlElement);
            }) : bnt.Promise.fulfilledWith(null).future;
            return load.flatMap(function () {
                _this.currentScreen = screen2;
                return transition.switchBetween(screen1 ? _this.renderersMap.get(screen1) : null, screen2 ? _this.renderersMap.get(screen2) : null, switchTransition);
            });
        };
        MainStage.prototype.switchTo = function (screenName, transition) {
            var _this = this;
            var fromScreen = this.currentScreen;
            var toScreen = this.creative.getScreen(screenName);
            if (fromScreen != toScreen) {
                if (fromScreen && toScreen && transition) {
                    var sheet = document.createElement('style');
                    sheet.id = bnt.Animation.composeTransStyleId(fromScreen.name, transition.name, transition.duration || 0, toScreen.name);
                    sheet.innerHTML += "\n" + bnt.Animation.createAnimForScreenTransition(screenName, transition.in, transition.duration || 0) +
                        "\n" + bnt.Animation.createAnimForScreenTransition(fromScreen.name, transition.out, transition.duration || 0);
                    if (!document.getElementById(sheet.id)) {
                        document.body.appendChild(sheet);
                    }
                }
                return this.switchBetween(fromScreen, toScreen, transition)
                    .map(function () {
                    _this.removeScreenObservers(fromScreen);
                    _this.creative.onmainscreen.update(toScreen == _this.creative.screens[0]);
                    _this.creative.onscreenchange.update({
                        from: fromScreen,
                        to: toScreen
                    });
                    _this.setScreenObservers(toScreen);
                    _this.preloadScreens(toScreen);
                    fromScreen.config.onHide = new bnt.AnimationConfig({});
                    toScreen.config.onShow = new bnt.AnimationConfig({});
                });
            }
            else {
                return bnt.Promise.fulfilledWith(undefined).future;
            }
        };
        return MainStage;
    }());
    bnt.MainStage = MainStage;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var StateChangeDetector = (function () {
        function StateChangeDetector(segments, canvases) {
            this.segments = segments;
            this.canvases = canvases;
            this.id = bnt.IdClass.getNext();
            this.stateUpdated = new bnt.Observable();
        }
        StateChangeDetector.prototype.update = function () {
            if (this.segment && this.canvas) {
                var state = this.getState();
                if (!this.currentState || state.hash() != this.currentState.hash()) {
                    this.currentState = state;
                    this.stateUpdated.update(this.currentState);
                }
            }
        };
        StateChangeDetector.prototype.getState = function () {
            return new bnt.State({ segment: this.segment, canvas: this.canvas });
        };
        StateChangeDetector.prototype.init = function () {
            var _this = this;
            this.canvasCD = new bnt.CanvasChangeDetector(bnt.get(bnt.ResizeController).resize, this.canvases);
            this.segmentsCD = new bnt.SegmentChangeDetector(this.segments);
            this.segmentsCD.segmentUpdated.addObserver(function (segment) { _this.segment = segment; _this.update(); });
            this.canvasCD.canvasChange.addObserver(function (canvas) { _this.canvas = canvas; _this.update(); });
            this.segmentsCD.init();
        };
        return StateChangeDetector;
    }());
    bnt.StateChangeDetector = StateChangeDetector;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var conjunctionReducer = function (a, b) { return a && b; };
    var bestSegmentReducer = function (a, b) { return a.signalHolders.length > b.signalHolders.length ? a : b; };
    var activeSegmentFilter = function (a) { return a.signalHolders
        .map(function (signalHolder) { return signalHolder.signal.isActive(); })
        .reduce(conjunctionReducer, true); };
    var SegmentChangeDetector = (function () {
        function SegmentChangeDetector(segments) {
            this.segments = segments;
            this.segmentUpdated = new bnt.Observable();
        }
        SegmentChangeDetector.prototype.init = function () {
            var _this = this;
            if (bnt.QueryParams.has("segment")) {
                var uuid_1 = bnt.QueryParams.get("segment");
                var segments = this.segments.filter(function (s) { return s.uuid == uuid_1; });
                if (segments.length)
                    this.segmentUpdated.update(segments[0]);
                else
                    console.error("Cannot find the segment with uuid '" + uuid_1 + "'");
            }
            else {
                this.updateSegment();
                bnt.get(bnt.SignalController).signalsUpdated.addObserver(function () { return _this.updateSegment(); });
            }
            this.initPreview();
        };
        SegmentChangeDetector.prototype.initPreview = function () {
            var _this = this;
            if (window) {
                window.addEventListener('message', function (e) {
                    if (!e.data || !e.data.type)
                        return;
                    if (e.data.type == 'segment') {
                        bnt.get(bnt.SignalController).removeObservers();
                        var segments = _this.segments.filter(function (s) { return s.uuid == e.data.uuid; });
                        if (segments.length) {
                            bnt.DynamicData.clear();
                            _this.segmentUpdated.update(segments[0]);
                        }
                    }
                    else if (e.data.type == 'resetSegment') {
                        bnt.get(bnt.SignalController).addObservers();
                    }
                });
            }
        };
        SegmentChangeDetector.prototype.updateSegment = function () {
            var bestSegment = SegmentChangeDetector.GetMostSuitableSegment(this.segments);
            if (bestSegment)
                this.segmentUpdated.update(bestSegment);
        };
        SegmentChangeDetector.GetMostSuitableSegment = function (segments) {
            return segments.filter(activeSegmentFilter).reduce(bestSegmentReducer);
        };
        return SegmentChangeDetector;
    }());
    bnt.SegmentChangeDetector = SegmentChangeDetector;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SignalController = (function () {
        function SignalController() {
            this.signalsUpdated = new bnt.Observable();
            this.values = new bnt.Map(new bnt.FunctionHash());
            this.observers = new bnt.Map(new bnt.FunctionHash());
        }
        SignalController.prototype.init = function () {
            this.addObservers();
        };
        SignalController.prototype.addObservers = function () {
            var _this = this;
            var signalsUsedInCreative = [];
            bnt.get(bnt.Creative).segments.forEach(function (segment) {
                segment.signalHolders.forEach(function (signalHolder) {
                    signalsUsedInCreative.push(signalHolder.signal.constructor);
                });
            });
            for (var type in bnt.signals) {
                bnt.signals[type].forEach(function (signalCtor) {
                    if (signalsUsedInCreative.indexOf(signalCtor) != -1) {
                        signalCtor.init();
                        var observer = function (value) {
                            _this.values.put(signalCtor, value);
                            _this.signalsUpdated.update({ changed: signalCtor, values: _this.values });
                        };
                        signalCtor.value.addObserver(observer);
                        _this.observers.put(signalCtor, observer);
                    }
                });
            }
        };
        SignalController.prototype.removeObservers = function () {
            this.observers.forEach(function (signalCtor, observer) {
                signalCtor.value.removeObserver(observer);
            });
            this.observers = new bnt.Map(new bnt.FunctionHash());
        };
        SignalController = __decorate([
            bnt.Singleton
        ], SignalController);
        return SignalController;
    }());
    bnt.SignalController = SignalController;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DynamicData = (function () {
        function DynamicData() {
        }
        DynamicData.init = function () {
            if (DynamicData.inited)
                return;
            DynamicData.inited = true;
            DynamicData.loadDataFromQueryParams();
            DynamicData.loadDataFromAdParameters();
            DynamicData.listenToOutsideChanges();
        };
        DynamicData.addData = function (key, value) {
            DynamicData.data.put(key, value);
        };
        DynamicData.getData = function (key) {
            return DynamicData.data.get(key);
        };
        DynamicData.hasData = function (key) {
            return DynamicData.data.contains(key);
        };
        DynamicData.clear = function () {
            DynamicData.data.clear();
        };
        DynamicData.loadDataFromQueryParams = function () {
            if (bnt.QueryParams.has("dynamicData")) {
                var dynamicData = bnt.QueryParams.get("dynamicData");
                dynamicData
                    .split("|")
                    .map(function (pair) { return pair.split(":"); })
                    .map(function (pair) {
                    DynamicData.addData(pair[0], pair[1]);
                });
            }
        };
        DynamicData.loadDataFromAdParameters = function () {
            if (bntAdParameters && bntAdParameters.hasOwnProperty("dynamicData")) {
                var dynamicData_1 = bntAdParameters["dynamicData"];
                Object.keys(dynamicData_1).forEach(function (k) { return DynamicData.addData(k, dynamicData_1[k]); });
            }
        };
        DynamicData.listenToOutsideChanges = function () {
            window.addEventListener('message', function (e) {
                if (e.data && e.data.type && e.data.type == 'dynamicData') {
                    var shouldUpdate_2 = false;
                    Object.keys(e.data.data).forEach(function (k) {
                        if (DynamicData.getData(k) != e.data.data[k]) {
                            DynamicData.addData(k, e.data.data[k]);
                            shouldUpdate_2 = true;
                        }
                    });
                    if (shouldUpdate_2)
                        DynamicData.onDataChange.update(undefined);
                }
            });
        };
        DynamicData.inited = false;
        DynamicData.data = new bnt.Map(new bnt.StringHash());
        DynamicData.onDataChange = new bnt.Observable();
        return DynamicData;
    }());
    bnt.DynamicData = DynamicData;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SIDE;
    (function (SIDE) {
        SIDE[SIDE["NONE"] = 0] = "NONE";
        SIDE[SIDE["WIDTH"] = 1] = "WIDTH";
        SIDE[SIDE["HEIGHT"] = 2] = "HEIGHT";
    })(SIDE = bnt.SIDE || (bnt.SIDE = {}));
    var ScaleToFill = (function () {
        function ScaleToFill() {
        }
        ScaleToFill.getSizes = function (vw, vh, ew, eh, forceSide) {
            if (forceSide === void 0) { forceSide = SIDE.NONE; }
            var referenceSide = ScaleToFill.getSide(ew, eh, vw, vh);
            referenceSide = forceSide == SIDE.NONE ? referenceSide : forceSide;
            var sizes = {
                w: 0,
                h: 0,
                x: 0,
                y: 0,
                side: referenceSide
            };
            if (referenceSide == SIDE.WIDTH) {
                sizes.w = vw;
                sizes.h = eh / (ew / vw);
                sizes.x = 0;
                sizes.y = (vh - sizes.h) / 2;
            }
            else if (referenceSide == SIDE.HEIGHT) {
                sizes.w = ew / (eh / vh);
                sizes.h = vh;
                sizes.x = (vw - sizes.w) / 2;
                sizes.y = 0;
            }
            return sizes;
        };
        ScaleToFill.getSide = function (ew, eh, vw, vh) {
            var side = ew > eh ? SIDE.HEIGHT : SIDE.WIDTH;
            if (side == SIDE.WIDTH) {
                var nh = eh / (ew / vw);
                if (nh < vh)
                    side = SIDE.HEIGHT;
            }
            else if (side == SIDE.HEIGHT) {
                var nw = ew / (eh / vh);
                if (nw < vw)
                    side = SIDE.WIDTH;
            }
            return side;
        };
        return ScaleToFill;
    }());
    bnt.ScaleToFill = ScaleToFill;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DeviceOrientation = (function () {
        function DeviceOrientation() {
        }
        DeviceOrientation.init = function () {
            DeviceOrientation.inited = true;
            window.addEventListener('deviceorientation', DeviceOrientation.deviceOrientationListener, true);
        };
        DeviceOrientation.deviceOrientationListener = function (e) {
            var raw = {
                alpha: e.alpha || 0,
                beta: e.beta || 0,
                gamma: e.gamma || 0
            };
            var response = {
                raw: raw,
                continuous: DeviceOrientation.getContinuousRotations(raw)
            };
            DeviceOrientation.fns.forEach(function (fn) {
                fn(response);
            });
        };
        DeviceOrientation.getContinuousRotations = function (raw) {
            if (DeviceOrientation.previousRotations == null)
                DeviceOrientation.previousRotations = raw;
            if (DeviceOrientation.continuousRotations == null)
                DeviceOrientation.continuousRotations = raw;
            this.offsetRotations.alpha = DeviceOrientation.updateRotationOffset(this.offsetRotations.alpha, raw.alpha - 180, DeviceOrientation.previousRotations.alpha - 180);
            this.offsetRotations.beta = DeviceOrientation.updateRotationOffset(this.offsetRotations.beta, raw.beta, DeviceOrientation.previousRotations.beta);
            this.offsetRotations.gamma = DeviceOrientation.updateRotationOffset(this.offsetRotations.gamma, raw.gamma, DeviceOrientation.previousRotations.gamma);
            DeviceOrientation.continuousRotations.alpha = raw.alpha + this.offsetRotations.alpha * 360;
            DeviceOrientation.continuousRotations.beta = raw.beta + this.offsetRotations.beta * 360;
            DeviceOrientation.continuousRotations.gamma = raw.gamma + this.offsetRotations.gamma * 180;
            DeviceOrientation.previousRotations = raw;
            return DeviceOrientation.continuousRotations;
        };
        DeviceOrientation.updateRotationOffset = function (offsetMultiplier, previousValue, currentValue) {
            if (!DeviceOrientation.isPointBetween(previousValue, -45, 45) && !DeviceOrientation.isPointBetween(currentValue, -45, 45)) {
                var previousValueSgn = DeviceOrientation.sgn(previousValue);
                var currentValueSgn = DeviceOrientation.sgn(currentValue);
                if (previousValueSgn != currentValueSgn) {
                    if (currentValueSgn == 1)
                        offsetMultiplier++;
                    else
                        offsetMultiplier--;
                }
            }
            return offsetMultiplier;
        };
        DeviceOrientation.isPointBetween = function (value, left, right) {
            return left <= value && value <= right;
        };
        DeviceOrientation.sgn = function (value) { return value < 0 ? -1 : 1; };
        DeviceOrientation.subscribe = function (fn) {
            if (!DeviceOrientation.inited)
                DeviceOrientation.init();
            DeviceOrientation.fns.push(fn);
            return {
                unsubscribe: DeviceOrientation.unsubscribe.bind(this, fn)
            };
        };
        DeviceOrientation.unsubscribe = function (fn) {
            var i = DeviceOrientation.fns.indexOf(fn);
            if (i != 1)
                DeviceOrientation.fns.splice(i, 1);
        };
        DeviceOrientation.inited = false;
        DeviceOrientation.fns = [];
        DeviceOrientation.offsetRotations = {
            alpha: 0,
            beta: 0,
            gamma: 0
        };
        return DeviceOrientation;
    }());
    bnt.DeviceOrientation = DeviceOrientation;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function requestAnimFrame(callback) {
        if (typeof window != "undefined")
            return window.requestAnimFrame(callback);
        return undefined;
    }
    bnt.requestAnimFrame = requestAnimFrame;
    function cancelAnimFrame(requestId) {
        if (typeof window != "undefined")
            window.cancelAnimFrame(requestId);
    }
    bnt.cancelAnimFrame = cancelAnimFrame;
})(bnt || (bnt = {}));
if (typeof window != "undefined") {
    window.requestAnimFrame = (function () {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            function (callback) {
                return window.setTimeout(callback, 1000 / 60);
            };
    })();
    window.cancelAnimFrame = (function () {
        return window.cancelAnimationFrame ||
            window.webkitCancelAnimationFrame ||
            window.mozCancelAnimationFrame ||
            clearTimeout;
    })();
}
var bnt;
(function (bnt) {
    function RendererOf(elementType, condition, priority) {
        return function (target) {
            bnt.ElementRendererRegistry.registerRenderer(elementType, target, condition, priority);
        };
    }
    bnt.RendererOf = RendererOf;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Animation = (function () {
        function Animation() {
            var _this = this;
            this.animationEnd = new bnt.Promise();
            this.animationPerformed = new bnt.Promise();
            this.complete = new bnt.Promise();
            this.completed = false;
            this.twoPhase = false;
            this.animationEnd.future.onComplete(function (_) {
                if (!_this.twoPhase) {
                    _this.complete.fulfill(_);
                }
            });
        }
        Object.defineProperty(Animation.prototype, "onComplete", {
            get: function () {
                return this.complete.future;
            },
            enumerable: true,
            configurable: true
        });
        Animation.of = function (element, elementId, stateHash, animation) {
            if (animation && animation.name) {
                var classNames = ["animated"];
                var duration = 1000;
                if (animation.name) {
                    classNames.push(animation.name);
                    classNames.push(Animation.composeAnimClassName(elementId, stateHash, animation.name));
                    duration = (animation.duration * 1000) * animation.repeat;
                }
                return new ActualAnimation(element, classNames, duration);
            }
            else {
                return new DummyAnimation();
            }
        };
        Animation.join = function (animations) {
            animations.forEach(function (animation) {
                animation.twoPhase = true;
            });
            var future = bnt.Promise.forAll(animations.map(function (animation) { return animation.animationEnd.future; }));
            future.onComplete(function () {
                animations.forEach(function (animation) { return animation.complete.succeed(null); });
            });
            return future;
        };
        Animation.createAnimForScreenTransition = function (targetElement, animationName, duration) {
            return "." + Animation.composeAnimClassName(targetElement, bnt.lazyGet(bnt.State)().hash(), animationName) + " {\n                -webkit-animation-duration: " + duration + "s;\n                animation-duration: " + duration + "s;\n             }";
        };
        Animation.createAnimStyle = function (elementId, stateHash, config) {
            var anim = function (animConfig) {
                return "." + Animation.composeAnimClassName(elementId, stateHash, animConfig.name) + " {\n          -webkit-animation-duration: " + animConfig.duration + "s;\n          animation-duration: " + animConfig.duration + "s;\n          \n          -webkit-animation-iteration-count: " + ((animConfig.repeat == 0) ? "infinite" : animConfig.repeat) + ";\n          animation-iteration-count: " + ((animConfig.repeat == 0) ? "infinite" : animConfig.repeat) + ";\n          \n          -webkit-animation-timing-function: " + animConfig.ease + ";\n          animation-timing-function: " + animConfig.ease + ";\n        }";
            };
            return anim(config.onShow) + "\n" + anim(config.onHide);
        };
        Animation.composeAnimClassName = function (elementId, stateHash, animName) {
            return elementId + "_" + stateHash + "_" + animName;
        };
        Animation.composeTransStyleId = function (fromScreen, transitionName, transitionDuration, toScreen) {
            return fromScreen + "_" + (transitionName ? transitionName : "noTransition") + "_" + transitionDuration + "_" + toScreen;
        };
        Animation.prototype.animationEnded = function () {
            this.completed = true;
            if (!this.animationEnd.fulfilled) {
                this.animationEnd.succeed(null);
            }
        };
        Animation.prototype.animationCanceled = function () {
            this.completed = true;
        };
        Object.defineProperty(Animation.prototype, "onAnimationPerformed", {
            get: function () {
                return this.animationPerformed.future;
            },
            enumerable: true,
            configurable: true
        });
        Animation.prototype.cancel = function () {
            if (!this.completed) {
                this.clean();
                this.animationCanceled();
            }
        };
        return Animation;
    }());
    bnt.Animation = Animation;
    var ActualAnimation = (function (_super) {
        __extends(ActualAnimation, _super);
        function ActualAnimation(element, classNames, duration) {
            var _this = _super.call(this) || this;
            _this.element = element;
            var completed = false;
            var $this = _this;
            function clean() {
                element.removeEventListener('webkitAnimationEnd', onAnimationEnd);
                element.removeEventListener('animationend', onAnimationEnd);
                classNames.forEach(function (className) { return element.classList.remove(className); });
                $this.completed = true;
            }
            function onAnimationEnd(e) {
                if (e && element != e.target)
                    return;
                clean();
                $this.animationEnd.succeed(null);
                $this.animationPerformed.succeed(null);
            }
            var animating = false;
            function onAnimationStart() {
                animating = true;
                element.removeEventListener('animationstart', onAnimationStart);
                element.removeEventListener('webkitAnimationStart', onAnimationStart);
                if (duration != 0) {
                    setTimeout(function () {
                        if (!$this.completed) {
                            console.warn('animation not ended', classNames, 'hidden?', element.hidden, "parent hidden?", (element.parentElement ? element.parentElement.hidden : "N/A"));
                            onAnimationEnd();
                        }
                    }, duration + 1000);
                }
            }
            _this.clean = clean;
            classNames.forEach(function (className) { return element.classList.add(className); });
            element.addEventListener('webkitAnimationEnd', onAnimationEnd);
            element.addEventListener('animationend', onAnimationEnd);
            element.addEventListener('animationstart', onAnimationStart);
            element.addEventListener('webkitAnimationStart', onAnimationStart);
            setTimeout(function () {
                if (!animating) {
                    console.warn('animation not started', classNames, 'hidden?', element.hidden, "parent hidden?", (element.parentElement ? element.parentElement.hidden : "N/A"));
                    onAnimationEnd();
                }
            }, 500);
            return _this;
        }
        return ActualAnimation;
    }(Animation));
    bnt.ActualAnimation = ActualAnimation;
    var DummyAnimation = (function (_super) {
        __extends(DummyAnimation, _super);
        function DummyAnimation() {
            var _this = _super.call(this) || this;
            _this.clean = function () { return true; };
            bnt.Promise.asyncFulfilledWith(null).future.map(function () { return _this.animationEnded(); });
            _this.onComplete.onComplete(function () { return _this.animationPerformed.succeed(null); });
            return _this;
        }
        DummyAnimation.prototype.cancel = function () { };
        return DummyAnimation;
    }(Animation));
    bnt.DummyAnimation = DummyAnimation;
    var CompoundAnimation = (function (_super) {
        __extends(CompoundAnimation, _super);
        function CompoundAnimation(animations) {
            var _this = _super.call(this) || this;
            _this.animations = animations;
            _this.clean = function () {
                _this.animations.forEach(function (a) { return a.clean(); });
            };
            Animation.join(animations).onComplete(function () {
                _this.animationEnd.succeed(null);
                _this.animationPerformed.succeed(null);
            });
            return _this;
        }
        CompoundAnimation.prototype.cancel = function () {
            this.animations.forEach(function (a) { return a.cancel(); });
        };
        return CompoundAnimation;
    }(Animation));
    bnt.CompoundAnimation = CompoundAnimation;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ScreenElements = (function () {
        function ScreenElements(a, b) {
            this.a = a;
            this.b = b;
            var eas = new bnt.Set(new bnt.ElementOnScreenHash());
            var ebs = new bnt.Set(new bnt.ElementOnScreenHash());
            var e = new bnt.Set(new bnt.ElementOnScreenHash());
            if (a)
                a.forEachEos(function (ea) { eas.add(ea); e.add(ea); });
            if (b)
                b.forEachEos(function (eb) { ebs.add(eb); e.add(eb); });
            this.onlyInA = eas.missingFrom(ebs);
            this.onlyInB = ebs.missingFrom(eas);
            this.common = e.missingFrom(this.onlyInA).missingFrom(this.onlyInB);
        }
        return ScreenElements;
    }());
    var ScreenTransition = (function () {
        function ScreenTransition(containerElement) {
            this.containerElement = containerElement;
            this.state = bnt.lazyGet(bnt.State);
        }
        ScreenTransition.prototype.moveTo = function (container, elements) {
            elements
                .map(function (eos) { return bnt.ElementRendererRegistry.rendererFor(eos.element).htmlElement; })
                .map(function (htmlElement) { return container.appendChild(htmlElement); });
        };
        ScreenTransition.prototype.moveToContainer = function (elements) {
            this.moveTo(this.containerElement, elements);
        };
        ScreenTransition.prototype.showScreen = function (screenRenderer, transition) {
            var screen = screenRenderer && screenRenderer.screen;
            if (screen) {
                var animation = screenRenderer.showScreen(new bnt.AnimationConfig({ name: transition ? transition.in : "", delay: 0, duration: transition ? transition.duration : bnt.Defaults.animation.duration, ease: bnt.Defaults.animation.ease, repeat: bnt.Defaults.animation.repeat }));
                return animation;
            }
            else {
                return new bnt.DummyAnimation();
            }
        };
        ScreenTransition.prototype.hideScreen = function (screenRenderer, transition) {
            var screen = screenRenderer && screenRenderer.screen;
            if (screen) {
                var animation = screenRenderer.hideScreen(new bnt.AnimationConfig({ name: transition ? transition.out : "", delay: 0, duration: transition ? transition.duration : bnt.Defaults.animation.duration, ease: bnt.Defaults.animation.ease, repeat: bnt.Defaults.animation.repeat }));
                return animation;
            }
            else {
                return new bnt.DummyAnimation();
            }
        };
        ScreenTransition.prototype.switchBetween = function (screenARenderer, screenBRenderer, switchTransition) {
            if (!ScreenTransition.currentTransition.completed) {
                return bnt.Promise.fulfilledWith(null).future;
            }
            var screenA = screenARenderer && screenARenderer.screen;
            var screenB = screenBRenderer && screenBRenderer.screen;
            var transition;
            if (switchTransition && switchTransition.name) {
                transition = this.switchWithTransition(screenARenderer, screenBRenderer, switchTransition);
            }
            else {
                transition = this.switchWithoutTransition(screenARenderer, screenBRenderer);
            }
            return transition;
        };
        ScreenTransition.prototype.switchWithTransition = function (screenARenderer, screenBRenderer, switchTransition) {
            var _this = this;
            var screenA = screenARenderer && screenARenderer.screen;
            var screenB = screenBRenderer && screenBRenderer.screen;
            var screenElements = new ScreenElements(screenA, screenB);
            this.moveToContainer(screenElements.common.toArray());
            var elementsBShow = bnt.Animation.join(screenElements.onlyInB.mapToArray(function (eos) {
                var state = _this.state();
                var eosConfig = eos.getConfig(state);
                var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                renderer.applyScreenConfig(state, eosConfig);
                return renderer.show(false);
            }));
            var all = elementsBShow.flatMap(function () {
                var screenBShowAnimation = _this.showScreen(screenBRenderer, switchTransition).onComplete;
                var screenAHideAnimation = _this.hideScreen(screenARenderer, switchTransition).onComplete;
                var screensTransition = bnt.Promise.forAll([screenBShowAnimation, screenAHideAnimation]);
                return screensTransition.flatMap(function () {
                    var elementsAHide = bnt.Animation.join(screenElements.onlyInA.mapToArray(function (eos) {
                        return bnt.ElementRendererRegistry.rendererFor(eos.element).hide(false);
                    }));
                    return elementsAHide;
                });
            })
                .map(function () { return screenB && _this.moveTo(screenBRenderer.screenElement, screenElements.common.toArray()); });
            return all;
        };
        ScreenTransition.prototype.switchWithoutTransition = function (screenARenderer, screenBRenderer) {
            var _this = this;
            var screenA = screenARenderer && screenARenderer.screen;
            var screenB = screenBRenderer && screenBRenderer.screen;
            var screenElements = new ScreenElements(screenA, screenB);
            this.moveToContainer(screenElements.common.toArray());
            var elementsAHide = bnt.Animation.join(screenElements.onlyInA.mapToArray(function (eos) {
                return bnt.ElementRendererRegistry.rendererFor(eos.element).hide(true);
            }));
            var screenAHide = elementsAHide.flatMap(function () {
                var screenAHideAnimation = _this.hideScreen(screenARenderer, null).onComplete;
                return screenAHideAnimation;
            });
            var all = screenAHide.flatMap(function () {
                var screenBShowAnimation = _this.showScreen(screenBRenderer, null);
                var elementsBShow = bnt.Animation.join([screenBShowAnimation].concat(screenElements.onlyInB.mapToArray(function (eos) {
                    var state = _this.state();
                    var eosConfig = eos.getConfig(state);
                    var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                    renderer.applyScreenConfig(state, eosConfig);
                    return renderer.show(true);
                })));
                var screenBShow = elementsBShow;
                return screenBShow;
            }).map(function () { return screenB && _this.moveTo(screenBRenderer.screenElement, screenElements.common.toArray()); });
            return all;
        };
        ScreenTransition.currentTransition = bnt.Promise.fulfilledWith(null).future;
        return ScreenTransition;
    }());
    bnt.ScreenTransition = ScreenTransition;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            this.x = x;
            this.y = y;
        }
        Point.prototype.minus = function (p) {
            return new Point(this.x - p.x, this.y - p.y);
        };
        Point.prototype.plus = function (point) {
            return new Point(this.x + point.x, this.y + point.y);
        };
        Point.prototype.mul = function (value) {
            return new Point(this.x * value, this.y * value);
        };
        Point.prototype.angle = function () {
            return Math.atan2(this.y, this.x);
        };
        Point.prototype.size = function () {
            return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
        };
        Point.prototype.clone = function () {
            return new Point(this.x, this.y);
        };
        Object.defineProperty(Point, "zero", {
            get: function () {
                return new Point(0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Point.from = function (x, y) {
            return new Point(x, typeof y == "number" ? y : x);
        };
        Point.ofTouchEvent = function (e) {
            return new Point(e.changedTouches[0].pageX, e.changedTouches[0].pageY);
        };
        Point.ofMouseSwipeEvent = function (e) {
            return new Point(e.pageX, e.pageY);
        };
        Point.Angle = function (one, two) {
            return Math.atan2(two.y - one.y, two.x - one.x);
        };
        return Point;
    }());
    bnt.Point = Point;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    bnt.logger.debug('SOME SOME SOME SOME SOME');
    var ScreenRenderer = (function () {
        function ScreenRenderer(screen) {
            var _this = this;
            this.screen = screen;
            this.currentAnimation = new bnt.DummyAnimation();
            this.state = bnt.lazyGet(bnt.State);
            this.mouseSwiping = false;
            this.adController = bnt.get(bnt.AdController);
            this.loaded = false;
            this.updateRemainTimeClosure = function (value) {
                var rt = _this.screen.timeline.getRemainingTime();
                _this.screen.remainingTimeMillisec.update(rt);
                _this.screen.remainingTime.value != Math.floor(rt) && _this.screen.remainingTime.update(Math.floor(rt));
            };
            this.updateDurationClosure = function (value) {
                _this.screen.duration.update(_this.screen.timeline.getDuration());
            };
            this.updateTimeClosure = function (value) {
                var t = _this.screen.timeline.getTime();
                _this.screen.timeMillisec.update(t);
                _this.screen.time.value != Math.floor(t) && _this.screen.time.update(Math.floor(t));
            };
            this.updateOnEndClosure = function () {
                if (_this.screen.timeline.getRemainingTime() === 0) {
                    _this.screen.onend.update(undefined);
                }
            };
            this.swipeDistanceThreshold = 50;
            this.swipeAllowedTime = 1000;
            this.bindedAddTouchEvents = function () { };
            this.bindedRemoveTouchEvents = function () { };
            this.onTouchStart = function (e) {
                _this.startPosition = bnt.Point.ofTouchEvent(e);
                _this.startTime = Date.now();
            };
            this.onMouseSwipeStart = function (e) {
                _this.startPosition = bnt.Point.ofMouseSwipeEvent(e);
                _this.startTime = Date.now();
                _this.setupMouseForSwipe(e);
            };
            this.onTouchMove = function (e) {
                if (_this.adController.preventDefaultTouchEvents) {
                    e.preventDefault();
                }
            };
            this.onMouseSwipeMove = function (e) {
                if (_this.adController.preventDefaultTouchEvents) {
                    e.preventDefault();
                }
            };
            this.onTouchEnd = function (e) {
                var endPosition = bnt.Point.ofTouchEvent(e);
                _this.updateSwipe(endPosition, e);
            };
            this.onMouseSwipeEnd = function (e) {
                var endPosition = bnt.Point.ofMouseSwipeEvent(e);
                _this.updateSwipe(endPosition, e);
                _this.resetMouseAfterSwipe(e);
            };
            this.onMouseClickForSwipe = function (e) {
                if (_this.mouseSwiping) {
                    e.stopImmediatePropagation();
                }
            };
            this.onMouseClickForObserver = function (e) {
                _this.screen.onclick.update(e);
            };
            bnt.get(bnt.StateChangeDetector).stateUpdated.addObserver(function (state) { return _this.applyState(state); });
        }
        ScreenRenderer.prototype.renderElement = function (element, screen, eos, state) {
            var renderer = bnt.ElementRendererRegistry.rendererFor(element);
            renderer.render(this.screenElement);
            renderer.configureForScreen(screen, eos);
        };
        ScreenRenderer.prototype.init = function () {
            var _this = this;
            bnt.logger.debug('SCREEN INIT');
            this.screen.timeline = new bnt.ScreenTimeline(this);
            this.screen.forEachEos(function (eos, index, eosArr) {
                var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                renderer.init();
                eos.initZIndex(eosArr.length - index);
                renderer.configureForScreen(_this.screen, eos);
            });
            this.screen.volume.addObserver(function (value) {
                _this.screen.timeline.getElementsWithTimeline().map(function (element) { return element.volume.update(value); });
            });
        };
        ScreenRenderer.prototype.load = function () {
            if (!this.loaded) {
                this.loaded = true;
                var futures = this.screen.eosMap(function (eos) {
                    return bnt.ElementRendererRegistry.rendererFor(eos.element).load();
                });
                return bnt.Promise.forAll(futures.concat(this.screen.customLoads));
            }
            else {
                return bnt.Promise.fulfilledWith(null).future;
            }
        };
        ScreenRenderer.prototype.render = function (target) {
            var _this = this;
            bnt.logger.debug('render', this.screen);
            if (!this.screenElement) {
                this.screenElement = bnt.createElement("div", target);
                this.screenElement.id = this.screen.name;
                this.screenElement.hidden = true;
                this.configureMe(this.state());
                var futures = this.screen.eosMap(function (eos) { return bnt.ElementRendererRegistry
                    .rendererFor(eos.element).render(_this.screenElement); });
                this.bindedAddTouchEvents = this.addTouchEvents.bind(this, this.screenElement);
                this.bindedRemoveTouchEvents = this.removeTouchEvents.bind(this, this.screenElement);
                return bnt.Promise.forAll(futures);
            }
            else {
                return bnt.Promise.fulfilledWith(null).future;
            }
        };
        ScreenRenderer.prototype.showScreen = function (animationConfig) {
            var _this = this;
            if (animationConfig === void 0) { animationConfig = null; }
            bnt.logger.debug('show', this.screen);
            this.currentAnimation.cancel();
            this.screenElement.hidden = false;
            var animation = bnt.Animation.of(this.screenElement, this.screenElement.id, bnt.lazyGet(bnt.State)().hash(), animationConfig);
            this.currentAnimation = animation;
            this.screen.onshowAnimationStart.update(undefined);
            this.screen.timeline.getElementsWithTimeline().map(function (ewt) {
                ewt.remainingTimeMillisec.addObserver(_this.updateRemainTimeClosure);
                ewt.duration.addObserver(_this.updateDurationClosure);
                ewt.timeMillisec.addObserver(_this.updateTimeClosure);
                ewt.onend.addObserver(_this.updateOnEndClosure);
            });
            this.screen.eosMap(function (eos) { return bnt.ElementRendererRegistry.rendererFor(eos.element).screenShowing(animation); });
            animation.onComplete.onComplete(function () {
                _this.bindedAddTouchEvents();
                _this.screen.onshow.update(undefined);
                _this.screen.onshowAnimationEnd.update(undefined);
            });
            return animation;
        };
        ScreenRenderer.prototype.hideScreen = function (animationConfig) {
            var _this = this;
            if (animationConfig === void 0) { animationConfig = null; }
            this.currentAnimation.cancel();
            var animation = bnt.Animation.of(this.screenElement, this.screenElement.id, bnt.lazyGet(bnt.State)().hash(), animationConfig);
            this.currentAnimation = animation;
            this.screen.timeline.getElementsWithTimeline().map(function (ewt) {
                ewt.remainingTimeMillisec.removeObserver(_this.updateRemainTimeClosure);
                ewt.duration.removeObserver(_this.updateDurationClosure);
                ewt.timeMillisec.removeObserver(_this.updateTimeClosure);
                ewt.onend.removeObserver(_this.updateOnEndClosure);
            });
            this.bindedRemoveTouchEvents();
            this.screen.onhide.update(undefined);
            this.screen.onhideAnimationStart.update(undefined);
            this.screen.eosMap(function (eos) { return bnt.ElementRendererRegistry.rendererFor(eos.element).screenHiding(animation); });
            this.bindedRemoveTouchEvents();
            animation.onComplete.onComplete(function () {
                _this.screenElement.hidden = true;
                _this.screen.onhideAnimationEnd.update(undefined);
            });
            return animation;
        };
        ScreenRenderer.prototype.destroy = function () {
            var futures = this.screen.eosMap(function (eos) {
                return bnt.ElementRendererRegistry.rendererFor(eos.element).destroy();
            });
            this.bindedRemoveTouchEvents();
            return bnt.Promise.forAll(futures);
        };
        ScreenRenderer.prototype.updateSwipe = function (endPosition, e) {
            var _this = this;
            var deltaPosition = endPosition.minus(this.startPosition);
            var deltaTime = Date.now() - this.startTime;
            if (deltaTime <= this.swipeAllowedTime && deltaPosition.size() >= this.swipeDistanceThreshold) {
                var angle = deltaPosition.angle() * 180 / Math.PI;
                var halfCheckSectionSize = 45;
                if (angle >= -halfCheckSectionSize && angle <= halfCheckSectionSize) {
                    this.screen.onswiperight.update(undefined);
                }
                else if (angle >= halfCheckSectionSize && angle <= halfCheckSectionSize * 3) {
                    this.screen.onswipedown.update(undefined);
                }
                else if (angle <= -halfCheckSectionSize && angle >= -halfCheckSectionSize * 3) {
                    this.screen.onswipeup.update(undefined);
                }
                else if (angle >= halfCheckSectionSize * 3 || angle <= -halfCheckSectionSize * 3) {
                    this.screen.onswipeleft.update(undefined);
                }
                this.mouseSwiping = true;
                setTimeout(function () {
                    _this.mouseSwiping = false;
                }, 1);
                e.stopPropagation();
            }
            else {
                this.mouseSwiping = false;
            }
        };
        ScreenRenderer.prototype.setupMouseForSwipe = function (e) {
            e.currentTarget.addEventListener("mousemove", this.onMouseSwipeMove);
            e.currentTarget.addEventListener("mouseup", this.onMouseSwipeEnd);
            e.currentTarget.addEventListener("mouseleave", this.onMouseSwipeEnd);
        };
        ScreenRenderer.prototype.resetMouseAfterSwipe = function (e) {
            e.currentTarget.removeEventListener("mousemove", this.onMouseSwipeMove);
            e.currentTarget.removeEventListener("mouseup", this.onMouseSwipeEnd);
            e.currentTarget.removeEventListener("mouseleave", this.onMouseSwipeEnd);
        };
        ScreenRenderer.prototype.addTouchEvents = function (target) {
            target.addEventListener("touchstart", this.onTouchStart);
            target.addEventListener("touchmove", this.onTouchMove);
            target.addEventListener("touchend", this.onTouchEnd);
            target.addEventListener("touchleave", this.onTouchEnd);
            target.addEventListener("mousedown", this.onMouseSwipeStart);
            target.addEventListener("click", this.onMouseClickForSwipe, true);
            target.addEventListener("click", this.onMouseClickForObserver, false);
        };
        ScreenRenderer.prototype.removeTouchEvents = function (target) {
            target.removeEventListener("touchstart", this.onTouchStart);
            target.removeEventListener("touchmove", this.onTouchMove);
            target.removeEventListener("touchend", this.onTouchEnd);
            target.removeEventListener("touchleave", this.onTouchEnd);
            target.removeEventListener("mousedown", this.onMouseSwipeStart);
            target.removeEventListener("mousemove", this.onMouseSwipeMove);
            target.removeEventListener("mouseup", this.onMouseSwipeEnd);
            target.removeEventListener("mouseleave", this.onMouseSwipeEnd);
            target.removeEventListener("click", this.onMouseClickForSwipe, true);
            target.removeEventListener("click", this.onMouseClickForObserver, false);
        };
        ScreenRenderer.prototype.applyState = function (state) {
            var _this = this;
            var futures = [];
            this.configureMe(state);
            this.screen.forEachEos(function (eos) {
                var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                var eos = renderer.screenConfigs.get(_this.screen);
                var eosConfig = eos.getConfig(state);
                renderer.applyScreenConfig(state, eosConfig);
                futures.push(renderer.configure(state));
            });
            return bnt.Promise.forAll(futures);
        };
        ScreenRenderer.prototype.configureMe = function (state) {
            if (this.screenElement) {
                bnt.style(this.screenElement, {
                    overflow: "hidden",
                    position: "absolute",
                    top: bnt.px(0),
                    left: bnt.px(0),
                    width: bnt.px(state.canvas.config.width),
                    height: bnt.px(state.canvas.config.height)
                });
            }
        };
        return ScreenRenderer;
    }());
    bnt.ScreenRenderer = ScreenRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CreativeRenderer = (function () {
        function CreativeRenderer() {
            this.document = document;
            this.renderersMap = new bnt.Map(new bnt.ScreenHash());
            this.rendered = false;
            this.onstatechange = new bnt.Observable();
            bnt.set(CreativeRenderer, this);
            this.mainStage = new bnt.MainStage();
        }
        CreativeRenderer.prototype.init = function () {
            var _this = this;
            this.creative = bnt.get(bnt.Creative);
            this.mainStage.init();
            if (!this.creative.stages) {
                this.creative.stages = [];
            }
            if (this.creative.bannerScreen && this.creative.stages
                .filter(function (stage) { return stage.constructor == bnt.BannerStage; }).length == 0) {
                var bannerStage = new bnt.BannerStage();
                bannerStage.screen = this.creative.bannerScreen;
                bannerStage.canvases = this.creative.bannerCanvases;
                this.creative.stages.push(bannerStage);
            }
            this.creative.stages.forEach(function (stage) { return stage.init(); });
            this.creative.timeline = new bnt.CreativeTimeline(this);
            this.creative.volume.addObserver(function (value) {
                _this.creative.forEachScreen(function (screen) { return screen.volume.update(value); });
            });
        };
        CreativeRenderer.prototype.load = function () {
            return bnt.Promise.forAll([this.mainStage.load()].concat(this.creative.stages.map(function (stage) { return stage.load(); })));
        };
        CreativeRenderer.prototype.render = function (target) {
            return bnt.Promise.forAll([this.mainStage.render(target)].concat(this.creative.stages.map(function (stage) { return stage.render(target); })));
        };
        CreativeRenderer.prototype.showCreative = function () {
            return bnt.Promise.forAll([this.mainStage.start()].concat(this.creative.stages.map(function (stage) { return stage.start(); })));
        };
        CreativeRenderer.prototype.onHideTransitionStart = function () { return bnt.Promise.fulfilledWith(undefined).future; };
        CreativeRenderer.prototype.onHideTransitionComplete = function () { return bnt.Promise.fulfilledWith(undefined).future; };
        CreativeRenderer.prototype.onShowTransitionStart = function () { return bnt.Promise.fulfilledWith(undefined).future; };
        CreativeRenderer.prototype.onShowTransitionComplete = function () { return bnt.Promise.fulfilledWith(undefined).future; };
        CreativeRenderer.prototype.destroyCreative = function () {
            return this.mainStage.destroyStage();
        };
        CreativeRenderer.prototype.switchTo = function (screenName, transition) {
            return this.mainStage.switchTo(screenName, transition);
        };
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative
            }, 'screen'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String, Object]),
            __metadata("design:returntype", Object)
        ], CreativeRenderer.prototype, "switchTo", null);
        return CreativeRenderer;
    }());
    bnt.CreativeRenderer = CreativeRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ElementRenderer = (function () {
        function ElementRenderer(element) {
            var _this = this;
            this.element = element;
            this.screenConfigs = new bnt.Map(new bnt.ScreenHash());
            this.domElementReady = new bnt.Observable();
            this.listeners = {};
            this.screenVisible = false;
            this.shown = false;
            this.lastAnimation = new bnt.DummyAnimation();
            this.state = bnt.lazyGet(bnt.State);
            this.onDomElementReady = function () {
                _this.element.onrender.update(undefined);
            };
            this.updateVisibleListener = function (v) {
                if (_this.lastEosConfig != null) {
                    return _this.updateVisible(!!_this.lastEosConfig[(v ? "onShow" : "onHide")].name);
                }
            };
            this.updateVisible = function (animated) {
                var visible = _this.element.visible.value && _this.screenVisible;
                var needsShow = !_this.shown && visible;
                var needsHide = _this.shown && !visible;
                var needsTransition = needsShow || needsHide;
                if (needsTransition) {
                    _this.lastAnimation.cancel();
                    var animation = null;
                    if (needsShow) {
                        _this.shown = true;
                        _this.htmlElement.hidden = false;
                        animation = _this.doShowAnimation(animated);
                    }
                    if (needsHide) {
                        _this.shown = false;
                        animation = _this.doHideAnimation(animated);
                        animation.onAnimationPerformed.map(function () {
                            _this.htmlElement.hidden = true;
                        });
                    }
                    return animation;
                }
                else {
                    return new bnt.DummyAnimation();
                }
            };
            this.domElementReady.addObserver(this.onDomElementReady);
        }
        ElementRenderer.prototype.init = function () {
            var _this = this;
            this.domElementReady.addObserver(function () { return _this.registerBasicListeners(); });
            this.initImpl();
        };
        ElementRenderer.prototype.load = function () {
            return this.loadImpl();
        };
        ElementRenderer.prototype.initImpl = function () { };
        ElementRenderer.prototype.loadImpl = function () { return bnt.Promise.fulfilledWith(undefined).future; };
        ElementRenderer.prototype.configureForScreen = function (screen, eos) {
            this.screenConfigs.put(screen, eos);
        };
        ElementRenderer.prototype.createScreenTransition = function (fromScreen, toScreen, transition) {
            var transitionSheet = document.createElement('style');
            transitionSheet.id = bnt.Animation.composeTransStyleId(fromScreen, transition.name, transition.duration || 0, toScreen);
            transitionSheet.innerHTML += "\n" + bnt.Animation.createAnimForScreenTransition(toScreen, transition.in, transition.duration || 0) +
                "\n" + bnt.Animation.createAnimForScreenTransition(fromScreen, transition.out, transition.duration || 0);
            document.body.appendChild(transitionSheet);
        };
        ElementRenderer.prototype.render = function (target) {
            var _this = this;
            var sheet = document.createElement('style');
            this.screenConfigs.forEach(function (screen, eos) {
                eos.getConfigsCopy().forEach(function (state, config) {
                    sheet.innerHTML += bnt.Animation.createAnimStyle(_this.element.elementId, state.hash(), config);
                });
                if (screen.interactions && screen.interactions.length) {
                    var screenSwitchInteractions = screen.interactions.filter(function (interaction) {
                        return interaction.action == "switchTo";
                    });
                    screenSwitchInteractions.forEach(function (interaction) {
                        if (interaction.actionParameters[0]) {
                            _this.createScreenTransition(screen.name, interaction.actionParameters[0].name, interaction.transition);
                        }
                    });
                }
                if (eos.interactions && eos.interactions.length) {
                    var switchInteractions = eos.interactions.filter(function (interaction) {
                        return interaction.action == "switchTo";
                    });
                    switchInteractions.forEach(function (interaction) {
                        if (interaction.actionParameters[0]) {
                            _this.createScreenTransition(screen.name, interaction.actionParameters[0].name, interaction.transition);
                        }
                    });
                }
            });
            document.body.appendChild(sheet);
            return this.elementRenderImpl(target).map(function (element) {
                _this.htmlElement = _this.applyEffects(element);
                _this.positionDiv.id = _this.element.elementId;
                target.appendChild(_this.htmlElement);
                _this.htmlElement.hidden = true;
                if (_this.element.hasOwnProperty("onclick") && _this.element.onclick.hasObservers()) {
                    _this.htmlElement.style.cursor = "pointer";
                }
                _this.element.visible.addObserver(_this.updateVisibleListener);
                _this.configure(_this.state());
            });
        };
        ElementRenderer.prototype.applyScreenConfig = function (state, config) {
            this.lastState = state;
            this.lastEosConfig = config;
            if (this.positionDiv) {
                bnt.style(this.positionDiv, {
                    position: "absolute",
                    left: bnt.px(config.x),
                    top: bnt.px(config.y),
                    zIndex: config.zIndex
                });
                this.positionDiv.style['-webkit-transform'] = "translateZ(0)";
            }
        };
        ElementRenderer.prototype.configure = function (state) {
            var config = this.element.getConfig(state);
            this.elementConfig = config;
            return this.applyElementConfig(config);
        };
        ElementRenderer.prototype.doShowAnimation = function (animated) {
            var _this = this;
            var animation = (animated)
                ? bnt.Animation.of(this.animationDiv, this.element.elementId, this.lastState.hash(), this.lastEosConfig && this.lastEosConfig.onShow)
                : new bnt.DummyAnimation();
            this.lastAnimation = animation;
            this.element.onshowAnimationStart.update(undefined);
            this.htmlElement.classList.add('if-dummy-animated-hack-for-edge');
            this.htmlElement.classList.remove('if-dummy-animated-hack-for-edge');
            animation.onComplete.onComplete(function () {
                _this.element.onshowAnimationEnd.update(undefined);
            });
            return animation;
        };
        ElementRenderer.prototype.doHideAnimation = function (animated) {
            var _this = this;
            var animation = (animated)
                ? bnt.Animation.of(this.animationDiv, this.element.elementId, this.lastState.hash(), this.lastEosConfig && this.lastEosConfig.onHide)
                : new bnt.DummyAnimation();
            this.lastAnimation = animation;
            this.element.onhideAnimationStart.update(undefined);
            animation.onComplete.onComplete(function () {
                _this.element.onhideAnimationEnd.update(undefined);
            });
            return animation;
        };
        ElementRenderer.prototype.show = function (animated) {
            this.screenVisible = true;
            return this.updateVisible(animated);
        };
        ElementRenderer.prototype.hide = function (animated) {
            this.screenVisible = false;
            return this.updateVisible(animated);
        };
        ElementRenderer.prototype.screenShowing = function (animation) {
            var _this = this;
            animation.onComplete.onComplete(function () { return _this.registerEventListenersImpl(); });
        };
        ElementRenderer.prototype.screenHiding = function (animation) {
            this.unregisterEventListenersImpl();
        };
        ElementRenderer.prototype.destroy = function () {
            return this.destroyImpl();
        };
        ElementRenderer.prototype.destroyImpl = function () {
            this.element.visible.removeObserver(this.updateVisibleListener);
            this.domElementReady.removeObserver(this.onDomElementReady);
            this.unregisterEventListenersImpl();
            return this.elementDestroyImpl();
        };
        ElementRenderer.prototype.registerBasicListeners = function () {
        };
        ElementRenderer.prototype.registerFor = function (target, name, observable, stopPropagation, eventHandler, alwaysFire) {
            if (stopPropagation === void 0) { stopPropagation = false; }
            if (!this.listeners[name] && (observable.hasObservers() || alwaysFire)) {
                this.listeners[name] = {};
                this.listeners[name].listener = eventHandler || (function (e) {
                    if (stopPropagation)
                        e.stopPropagation();
                    observable.update(e);
                });
                this.listeners[name].target = target;
                target.addEventListener(name, this.listeners[name].listener);
            }
        };
        ElementRenderer.prototype.unregisterFor = function (target, name) {
            if (this.listeners[name]) {
                target.removeEventListener(name, this.listeners[name].listener);
                delete this.listeners[name];
            }
        };
        ElementRenderer.prototype.unregisterAllFromElement = function () {
            var _this = this;
            Object.keys(this.listeners).forEach(function (eventName) {
                _this.listeners[eventName].target.removeEventListener(eventName, _this.listeners[eventName].listener);
                delete _this.listeners[eventName];
            });
        };
        ElementRenderer.prototype.applyEffects = function (element) {
            var ret = this.applyAnimations(element);
            ret = this.applyPosition(ret);
            return ret;
        };
        ElementRenderer.prototype.applyPosition = function (element) {
            var div = this.wrapDiv(element, 'position');
            this.positionDiv = div;
            return div;
        };
        ElementRenderer.prototype.applyAnimations = function (element) {
            var div = this.wrapDiv(element, 'animation');
            this.animationDiv = div;
            return div;
        };
        ElementRenderer.prototype.wrapDiv = function (element, aClass) {
            var div = document.createElement('div');
            div.classList.add(aClass);
            div.appendChild(element);
            return div;
        };
        return ElementRenderer;
    }());
    bnt.ElementRenderer = ElementRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var DefaultCondition = function (element) { return true; };
    function printElement(element) {
        return (bnt.fnName(element.constructor) + ' id:' + element.id) || JSON.stringify(element);
    }
    var ElementRendererRegistry = (function () {
        function ElementRendererRegistry() {
        }
        ElementRendererRegistry.registerRenderer = function (element, renderer, condition, priority) {
            if (condition === void 0) { condition = DefaultCondition; }
            if (priority === void 0) { priority = 100; }
            if (!ElementRendererRegistry.registry.get(element)) {
                ElementRendererRegistry.registry.put(element, new Array());
            }
            var mapping = ElementRendererRegistry.registry.get(element);
            mapping.push({ renderer: renderer, condition: condition, priority: priority });
            mapping.sort(function (a, b) { return a.priority - b.priority; });
        };
        ElementRendererRegistry.rendererFor = function (element) {
            var renderer = ElementRendererRegistry.renderer.get(element);
            if (renderer != null) {
                return renderer;
            }
            else {
                var mappings = ElementRendererRegistry.registry.get(element.constructor);
                if (mappings) {
                    var possibleRenderers = mappings.filter(function (mapping) { return mapping.condition(element); });
                    if (possibleRenderers.length == 0) {
                        throw new Error("no renderer matched for " + printElement(element) + "\n            options were: \n            " + (mappings.map(function (mapping) { return bnt.fnName(mapping.renderer); }).join(',')));
                    }
                    else {
                        var rendererType = possibleRenderers[0].renderer;
                        var renderer = new rendererType(element);
                        ElementRendererRegistry.renderer.put(element, renderer);
                        return renderer;
                    }
                }
                else {
                    throw new Error('no renderer configured for ' + printElement(element));
                }
            }
        };
        ElementRendererRegistry.registry = new bnt.Map(new bnt.FunctionHash);
        ElementRendererRegistry.renderer = new bnt.Map(new bnt.ElementHash());
        return ElementRendererRegistry;
    }());
    bnt.ElementRendererRegistry = ElementRendererRegistry;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Smooth = (function () {
        function Smooth(threshold) {
            this.threshold = threshold;
            this.speed = 0;
            this.catchUpFactor = 1;
        }
        Smooth.prototype.get = function (value) {
            if (this.lastValue == null)
                this.lastValue = value;
            this.speed = value - this.lastValue;
            if (Math.abs(this.speed) > this.threshold) {
                this.lastValue = value;
            }
            else {
                this.lastValue += this.speed * this.catchUpFactor * (Math.abs(this.speed) / this.threshold);
            }
            return this.lastValue;
        };
        return Smooth;
    }());
    bnt.Smooth = Smooth;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ScreenOrientationType;
    (function (ScreenOrientationType) {
        ScreenOrientationType[ScreenOrientationType["Portrait"] = 0] = "Portrait";
        ScreenOrientationType[ScreenOrientationType["LandscapeLeft"] = 1] = "LandscapeLeft";
        ScreenOrientationType[ScreenOrientationType["LandscapeRight"] = 2] = "LandscapeRight";
        ScreenOrientationType[ScreenOrientationType["PortraitReverse"] = 3] = "PortraitReverse";
    })(ScreenOrientationType = bnt.ScreenOrientationType || (bnt.ScreenOrientationType = {}));
    var ScreenOrientation = (function () {
        function ScreenOrientation() {
        }
        ScreenOrientation.is = function (screenOrientation) {
            return ScreenOrientation.get() == screenOrientation;
        };
        Object.defineProperty(ScreenOrientation, "isLandscape", {
            get: function () {
                var o = ScreenOrientation.get();
                return o == ScreenOrientationType.LandscapeLeft || o == ScreenOrientationType.LandscapeRight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScreenOrientation, "isPortrait", {
            get: function () {
                var o = ScreenOrientation.get();
                return o == ScreenOrientationType.Portrait || o == ScreenOrientationType.PortraitReverse;
            },
            enumerable: true,
            configurable: true
        });
        ScreenOrientation.get = function () {
            var w = window;
            var screenOrientation;
            if (w && w.screen && w.screen.orientation && typeof w.screen.orientation.angle == "number") {
                switch (w.screen.orientation.angle) {
                    case 0:
                        screenOrientation = ScreenOrientationType.Portrait;
                        break;
                    case 90:
                        screenOrientation = ScreenOrientationType.LandscapeLeft;
                        break;
                    case 180:
                        screenOrientation = ScreenOrientationType.PortraitReverse;
                        break;
                    case 270:
                        screenOrientation = ScreenOrientationType.LandscapeRight;
                        break;
                    default:
                        screenOrientation = ScreenOrientation.getInaccurateOrientation();
                }
            }
            else if (typeof w.orientation == "number") {
                switch (w.orientation) {
                    case 0:
                        screenOrientation = ScreenOrientationType.Portrait;
                        break;
                    case 90:
                        screenOrientation = ScreenOrientationType.LandscapeLeft;
                        break;
                    case 180:
                        screenOrientation = ScreenOrientationType.PortraitReverse;
                        break;
                    case -90:
                        screenOrientation = ScreenOrientationType.LandscapeRight;
                        break;
                    default:
                        return ScreenOrientation.getInaccurateOrientation();
                }
            }
            else {
                return ScreenOrientation.getInaccurateOrientation();
            }
            screenOrientation = ScreenOrientation.sanityCheck(screenOrientation);
            return screenOrientation;
        };
        ScreenOrientation.getInaccurateOrientation = function () {
            var get = function (w) { return w.innerWidth > w.innerHeight ? ScreenOrientationType.LandscapeLeft : ScreenOrientationType.Portrait; };
            try {
                return get(window.top);
            }
            catch (e) {
                return get(window);
            }
        };
        ScreenOrientation.sanityCheck = function (screenOrientation) {
            var inaccurateOrientation = ScreenOrientation.getInaccurateOrientation();
            if ((inaccurateOrientation == ScreenOrientationType.Portrait && (screenOrientation == ScreenOrientationType.LandscapeLeft || screenOrientation == ScreenOrientationType.LandscapeRight)) ||
                (inaccurateOrientation == ScreenOrientationType.LandscapeLeft && (screenOrientation == ScreenOrientationType.Portrait || screenOrientation == ScreenOrientationType.PortraitReverse))) {
                return inaccurateOrientation;
            }
            else {
                return screenOrientation;
            }
        };
        return ScreenOrientation;
    }());
    bnt.ScreenOrientation = ScreenOrientation;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TextBoxRenderer = (function (_super) {
        __extends(TextBoxRenderer, _super);
        function TextBoxRenderer(textbox) {
            var _this = _super.call(this, textbox) || this;
            _this.textbox = textbox;
            return _this;
        }
        TextBoxRenderer.prototype.elementRenderImpl = function (target) {
            this.textboxElement = document.createElement("div");
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.textboxElement).future;
        };
        TextBoxRenderer.prototype.elementDestroyImpl = function () {
            this.textboxElement && this.textboxElement.parentNode && this.textboxElement.parentNode.removeChild(this.textboxElement);
            return bnt.Promise.fulfilledWith(this.textboxElement).future;
        };
        TextBoxRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            if (this.textboxElement) {
                this.textboxElement.innerText = config.text;
                bnt.style(this.textboxElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height),
                    wordBreak: "keep-all",
                    overflow: "hidden",
                    color: config.color,
                    textAlign: config.textAlign,
                    fontFamily: config.fontFamily,
                    fontWeight: config.fontWeight,
                    fontStyle: config.fontStyle,
                    fontSize: bnt.px(config.fontSize),
                    textTransform: config.textTransform,
                    textDecoration: config.textDecoration,
                    transform: 'rotate(' + config.angle + 'deg)',
                    webkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
                    lineHeight: 'normal'
                });
            }
            return bnt.Promise.fulfilledWith(true).future;
        };
        TextBoxRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.textboxElement, 'click', this.textbox.onclick, true);
            this.registerFor(this.textboxElement, 'mouseenter', this.textbox.onmouseenter);
            this.registerFor(this.textboxElement, 'mouseleave', this.textbox.onmouseleave);
        };
        TextBoxRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.textboxElement, 'click');
            this.unregisterFor(this.textboxElement, 'mouseenter');
            this.unregisterFor(this.textboxElement, 'mouseleave');
        };
        TextBoxRenderer = __decorate([
            bnt.RendererOf(bnt.TextBox),
            __metadata("design:paramtypes", [bnt.TextBox])
        ], TextBoxRenderer);
        return TextBoxRenderer;
    }(bnt.ElementRenderer));
    bnt.TextBoxRenderer = TextBoxRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var SubtitleRenderer = (function (_super) {
        __extends(SubtitleRenderer, _super);
        function SubtitleRenderer(subtitle) {
            var _this = _super.call(this, subtitle) || this;
            _this.subtitle = subtitle;
            _this.time = 0;
            _this.actions = null;
            return _this;
        }
        SubtitleRenderer.prototype.elementRenderImpl = function (target) {
            this.subtitleElement = document.createElement("div");
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.subtitleElement).future;
        };
        SubtitleRenderer.prototype.elementDestroyImpl = function () {
            this.subtitleElement && this.subtitleElement.parentNode && this.subtitleElement.parentNode.removeChild(this.subtitleElement);
            return bnt.Promise.fulfilledWith(this.subtitleElement).future;
        };
        SubtitleRenderer.prototype.applyElementConfig = function (config) {
            var _this = this;
            var targetVideo = config.targetVideo;
            this.videoElement = targetVideo ? targetVideo.timeline.videoRenderer.videoElement : null;
            if (this.videoElement && this.subtitleElement) {
                var currentSrc = targetVideo.getConfig(bnt.get(bnt.State)).src;
                if (this.oldVideoSrc != currentSrc) {
                    this.actions = [].concat(config.subtitleActions);
                    this.subtitleElement.innerHTML = '';
                    this.oldVideoSrc = currentSrc;
                }
                targetVideo.onplay.addEventListener(function () {
                    if (!_this.interval && _this.actions.length > 0) {
                        _this.createInterval(config, targetVideo);
                    }
                    if (!_this.element.visible.value) {
                        _this.element.visible.update(true);
                    }
                });
                this.videoElement.addEventListener('play', function () {
                    if (!_this.interval && _this.actions.length > 0) {
                        _this.createInterval(config, targetVideo);
                    }
                });
                this.videoElement.addEventListener('pause', function () {
                    if (_this.videoElement.currentTime > 0 && !_this.interval) {
                        _this.createInterval(config, targetVideo);
                    }
                    if (_this.videoElement.currentTime == _this.videoElement.duration) {
                        bnt.cancelAnimFrame(_this.interval);
                        _this.actions = [].concat(config.subtitleActions);
                        _this.time = 0;
                        _this.interval = null;
                        _this.subtitleElement.innerHTML = "";
                    }
                    else {
                        bnt.cancelAnimFrame(_this.interval);
                        _this.interval = null;
                    }
                });
            }
            else {
                console.warn("Subtitle doesn't have a valid video selected");
            }
            bnt.style(this.subtitleElement, {
                width: bnt.px(config.width),
                height: bnt.px(config.height),
                wordBreak: "keep-all",
                color: config.color,
                textAlign: config.textAlign,
                fontFamily: config.fontFamily,
                fontWeight: config.fontWeight,
                fontStyle: config.fontStyle,
                fontSize: bnt.px(config.fontSize),
                textTransform: config.textTransform,
                textDecoration: config.textDecoration,
                transform: 'rotate(' + config.angle + 'deg)',
                overflow: 'hidden',
                cursor: "default",
                webkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
                lineHeight: 'normal',
                visibility: 'hidden'
            });
            return bnt.Promise.fulfilledWith(true).future;
        };
        SubtitleRenderer.prototype.smallDifference = function (current, target) {
            var tollerance = 0.1;
            return current > target || Math.abs(target - current) < tollerance;
        };
        SubtitleRenderer.prototype.createInterval = function (config, targetVideo) {
            var _this = this;
            var loop = function () {
                _this.interval = bnt.requestAnimFrame(loop);
                _this.time = _this.videoElement.currentTime || targetVideo.timeMillisec.value;
                if (config.visibleOnMute) {
                    _this.element.visible.update(!targetVideo.volume.value);
                }
                if (_this.actions.length > 0 && _this.smallDifference(_this.time, _this.actions[0].time / 1000)) {
                    var doNow = _this.actions[0];
                    switch (doNow.action) {
                        case "show":
                            _this.subtitleElement.innerHTML = doNow.data;
                            bnt.style(_this.subtitleElement, { visibility: 'visible' });
                            break;
                        case "hide":
                            bnt.style(_this.subtitleElement, { visibility: 'hidden' });
                            _this.subtitleElement.innerHTML = "";
                            break;
                    }
                    _this.actions.shift();
                }
            };
            loop();
        };
        SubtitleRenderer.prototype.registerEventListenersImpl = function () { };
        SubtitleRenderer.prototype.unregisterEventListenersImpl = function () { };
        SubtitleRenderer = __decorate([
            bnt.RendererOf(bnt.Subtitle),
            __metadata("design:paramtypes", [bnt.Subtitle])
        ], SubtitleRenderer);
        return SubtitleRenderer;
    }(bnt.ElementRenderer));
    bnt.SubtitleRenderer = SubtitleRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HtmlBoxRenderer = (function (_super) {
        __extends(HtmlBoxRenderer, _super);
        function HtmlBoxRenderer(htmlBox) {
            var _this = _super.call(this, htmlBox) || this;
            _this.htmlBox = htmlBox;
            return _this;
        }
        HtmlBoxRenderer.prototype.elementRenderImpl = function (target) {
            this.htmlBoxElement = document.createElement('div');
            this.htmlBoxElement.innerHTML = decodeURIComponent(this.element.htmlCode) || "";
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.htmlBoxElement).future;
        };
        HtmlBoxRenderer.prototype.elementDestroyImpl = function () {
            this.htmlBoxElement && this.htmlBoxElement.parentNode && this.htmlBoxElement.parentNode.removeChild(this.htmlBoxElement);
            return bnt.Promise.fulfilledWith(this.htmlBoxElement).future;
        };
        HtmlBoxRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            if (this.htmlBoxElement) {
                bnt.style(this.htmlBoxElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height),
                    overflow: "hidden",
                });
            }
            return bnt.Promise.fulfilledWith(null).future;
        };
        HtmlBoxRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.htmlBoxElement, 'click', this.htmlBox.onclick, true);
            this.registerFor(this.htmlBoxElement, 'mouseenter', this.htmlBox.onmouseenter);
            this.registerFor(this.htmlBoxElement, 'mouseleave', this.htmlBox.onmouseleave);
        };
        HtmlBoxRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.htmlBoxElement, 'click');
            this.unregisterFor(this.htmlBoxElement, 'mouseenter');
            this.unregisterFor(this.htmlBoxElement, 'mouseleave');
        };
        HtmlBoxRenderer = __decorate([
            bnt.RendererOf(bnt.HtmlBox),
            __metadata("design:paramtypes", [bnt.HtmlBox])
        ], HtmlBoxRenderer);
        return HtmlBoxRenderer;
    }(bnt.ElementRenderer));
    bnt.HtmlBoxRenderer = HtmlBoxRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ShapeRenderer = (function (_super) {
        __extends(ShapeRenderer, _super);
        function ShapeRenderer(shape) {
            var _this = _super.call(this, shape) || this;
            _this.shape = shape;
            return _this;
        }
        ShapeRenderer.prototype.elementRenderImpl = function (target) {
            this.divElement = document.createElement('div');
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.divElement).future;
        };
        ShapeRenderer.prototype.elementDestroyImpl = function () {
            this.divElement && this.divElement.parentNode && this.divElement.parentNode.removeChild(this.divElement);
            return bnt.Promise.fulfilledWith(this.divElement).future;
        };
        ShapeRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            if (this.divElement) {
                bnt.style(this.divElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height),
                    borderRadius: bnt.px(config.radius),
                    backgroundColor: config.backgroundColor,
                    border: bnt.px(config.border) + ' solid ' + config.borderColor,
                    transform: 'rotate(' + config.angle + 'deg)',
                    boxSizing: 'border-box'
                });
            }
            return bnt.Promise.fulfilledWith(null).future;
        };
        ShapeRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.divElement, 'click', this.shape.onclick, true);
            this.registerFor(this.divElement, 'mouseenter', this.shape.onmouseenter);
            this.registerFor(this.divElement, 'mouseleave', this.shape.onmouseleave);
        };
        ShapeRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.divElement, 'click');
            this.unregisterFor(this.divElement, 'mouseenter');
            this.unregisterFor(this.divElement, 'mouseleave');
        };
        ShapeRenderer = __decorate([
            bnt.RendererOf(bnt.Shape),
            __metadata("design:paramtypes", [bnt.Shape])
        ], ShapeRenderer);
        return ShapeRenderer;
    }(bnt.ElementRenderer));
    bnt.ShapeRenderer = ShapeRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var HotspotRenderer = (function (_super) {
        __extends(HotspotRenderer, _super);
        function HotspotRenderer(hotspot) {
            var _this = _super.call(this, hotspot) || this;
            _this.hotspot = hotspot;
            return _this;
        }
        HotspotRenderer.prototype.elementRenderImpl = function (target) {
            this.divElement = document.createElement('div');
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.divElement).future;
        };
        HotspotRenderer.prototype.elementDestroyImpl = function () {
            this.divElement && this.divElement.parentNode && this.divElement.parentNode.removeChild(this.divElement);
            return bnt.Promise.fulfilledWith(this.divElement).future;
        };
        HotspotRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            if (this.divElement) {
                bnt.style(this.divElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height),
                    borderRadius: bnt.px(config.radius),
                    transform: 'rotate(' + config.angle + 'deg)',
                    boxSizing: 'border-box',
                    webkitTapHighlightColor: 'rgba(0, 0, 0, 0)'
                });
            }
            return bnt.Promise.fulfilledWith(null).future;
        };
        HotspotRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.divElement, 'click', this.hotspot.onclick, true);
            this.registerFor(this.divElement, 'mouseenter', this.hotspot.onmouseenter);
            this.registerFor(this.divElement, 'mouseleave', this.hotspot.onmouseleave);
        };
        HotspotRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.divElement, 'click');
            this.unregisterFor(this.divElement, 'mouseenter');
            this.unregisterFor(this.divElement, 'mouseleave');
        };
        HotspotRenderer = __decorate([
            bnt.RendererOf(bnt.Hotspot),
            __metadata("design:paramtypes", [bnt.Hotspot])
        ], HotspotRenderer);
        return HotspotRenderer;
    }(bnt.ElementRenderer));
    bnt.HotspotRenderer = HotspotRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var BaseVideoRenderer = (function (_super) {
        __extends(BaseVideoRenderer, _super);
        function BaseVideoRenderer(video) {
            var _this = _super.call(this, video) || this;
            _this.video = video;
            _this.videoHasEverPlayed = false;
            var config = video.getConfig(bnt.get(bnt.State));
            if (bnt.isVast(config.src)) {
                bnt.extendInstance(_this, [bnt.VastAdaptor]);
            }
            return _this;
        }
        BaseVideoRenderer.prototype.preloadAssets = function () { };
        BaseVideoRenderer.prototype.initImpl = function () {
            this.video.timeline = new bnt.VideoTimeline(this);
        };
        BaseVideoRenderer.prototype.loadImpl = function () {
            this.preloadAssets();
            return bnt.Promise.fulfilledWith(null).future;
        };
        BaseVideoRenderer.prototype.populateElements = function (target) {
            throw new Error("The required method `populateElements` was not implemented.");
        };
        BaseVideoRenderer.prototype.loadVideoSrc = function () {
            var state = bnt.get(bnt.State);
            var config = this.video.getConfig(state);
            if (this.videoElement && bnt.formatProtocol(this.videoElement.src) != bnt.getSrc(config.src)) {
                this.videoElement.src = bnt.getSrc(config.src);
                if (!this.isVideoUrlOptimized(this.videoElement.src) && !bnt.LIBRARY[bnt.extractAssetId(config.src)].external) {
                    bnt.sumo({ 'e': 'unoptimizedMedia' });
                }
            }
        };
        BaseVideoRenderer.prototype.isVideoUrlOptimized = function (videoSrc) {
            return /\.(high|low)\.mp4/.test(videoSrc);
        };
        BaseVideoRenderer.prototype.loadCoverSrc = function () {
            var state = bnt.get(bnt.State);
            var config = this.video.getConfig(state);
            if (this.coverElement && bnt.formatProtocol(this.coverElement.src) != bnt.getSrc(config.cover)) {
                this.coverElement.src = bnt.getSrc(config.cover);
            }
        };
        BaseVideoRenderer.prototype.elementRenderImpl = function (target) {
            var _this = this;
            this.populateElements(target);
            bnt.style(this.coverElement, {
                width: "0",
                height: "0",
                zIndex: "5"
            });
            var state = bnt.get(bnt.State);
            var config = this.video.getConfig(state);
            if (config.cover && !config.autoplay) {
                this.coverElement.hidden = false;
            }
            else {
                this.coverElement.hidden = true;
            }
            this.video.onplay.addEventListener(function () {
                _this.coverElement.hidden = true;
                _this.videoHasEverPlayed = true;
            });
            this.bindedHandlerCoverClick = this.handlerCoverClick.bind(this);
            this.coverElement.addEventListener('click', this.bindedHandlerCoverClick);
            if (config.autoplay) {
                this.video.play();
            }
            else {
                this.video.timeline.play().map(function () { return _this.video.timeline.stop(); });
            }
            return bnt.Promise.fulfilledWith(this.containerElement).future;
        };
        BaseVideoRenderer.prototype.handlerCoverClick = function (e) {
            e.stopPropagation();
            this.coverElement.removeEventListener('click', this.bindedHandlerCoverClick);
            this.video.play();
        };
        ;
        BaseVideoRenderer.prototype.show = function (animated) {
            this.video.resume().onComplete(function (_) { return _; });
            return _super.prototype.show.call(this, animated);
        };
        BaseVideoRenderer.prototype.hide = function (animated) {
            var _this = this;
            var a = _super.prototype.hide.call(this, animated);
            a.onComplete.map(function () { return _this.video.suspend(); });
            return a;
        };
        BaseVideoRenderer.prototype.elementDestroyImpl = function () {
            return bnt.Promise.fulfilledWith(null).future;
        };
        BaseVideoRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value) {
                this.element.visible.update(config.visible);
            }
            return this.applyElementConfigImpl(config);
        };
        BaseVideoRenderer.prototype.applyElementConfigImpl = function (config) {
            var videoIsChanging = false;
            if (this.videoElement) {
                videoIsChanging = bnt.formatProtocol(this.videoElement.src) != bnt.getSrc(config.src);
            }
            if (this.containerElement) {
                this.containerElement.style.width = bnt.px(config.width);
                this.containerElement.style.height = bnt.px(config.height);
            }
            if (this.coverElement) {
                this.coverElement.style.border = "0";
                this.coverElement.style.position = "absolute";
                this.coverElement.style.left = "0";
                this.coverElement.style.top = "0";
                this.coverElement.style.width = bnt.px(config.width);
                this.coverElement.style.height = bnt.px(config.height);
                if (videoIsChanging) {
                    this.coverElement.hidden = !config.cover || config.autoplay;
                }
            }
            this.loadVideoSrc();
            this.loadCoverSrc();
            if (this.screenVisible) {
                if (config.autoplay) {
                    if (!this.videoHasEverPlayed || videoIsChanging) {
                        this.video.play();
                    }
                }
            }
            return bnt.Promise.fulfilledWith(undefined).future;
        };
        BaseVideoRenderer.prototype.registerBasicListeners = function () {
            var _this = this;
            this.registerFor(this.videoElement, 'ended', this.video.onend, false, function () { return _this.video.onend.update(undefined); }, true);
            this.registerFor(this.videoElement, 'durationchange', this.video.duration, false, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return setTimeout(function () { return !isNaN(_this.videoElement.duration) && _this.video.duration.update(_this.videoElement.duration); }, 1);
            }, true);
            this.registerFor(this.videoElement, 'timeupdate', this.video.timeMillisec, false, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (isNaN(_this.videoElement.duration)) {
                    return;
                }
                var t = _this.videoElement.currentTime;
                if (isNaN(t))
                    t = 0;
                var rt = _this.videoElement.duration - t;
                if (rt < 0)
                    rt = 0;
                _this.video.timeMillisec.update(t);
                _this.video.time.value != Math.floor(t) && _this.video.time.update(Math.floor(t));
                _this.video.remainingTimeMillisec.update(rt);
                _this.video.remainingTime.value != Math.floor(rt) && _this.video.remainingTime.update(Math.floor(rt));
            }, true);
            this.video.volume.addObserver(function (value) {
                _this.volume = value;
                _this.videoElement.volume = value;
                _this.videoElement.muted = !value;
            });
        };
        BaseVideoRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.getClickTarget(), 'click', this.video.onclick, true);
            this.registerFor(this.containerElement, 'mouseenter', this.video.onmouseenter);
            this.registerFor(this.containerElement, 'mouseleave', this.video.onmouseleave);
        };
        BaseVideoRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.getClickTarget(), 'click');
            this.unregisterFor(this.containerElement, 'mouseenter');
            this.unregisterFor(this.containerElement, 'mouseleave');
        };
        BaseVideoRenderer.prototype.getClickTarget = function () {
            return this.videoElement;
        };
        return BaseVideoRenderer;
    }(bnt.ElementRenderer));
    bnt.BaseVideoRenderer = BaseVideoRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var WithPan = (function (_super) {
        __extends(WithPan, _super);
        function WithPan() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WithPan.prototype.getVideoElementWithPan = function () {
            return this.videoElementWithPan;
        };
        WithPan.prototype.elementRenderImpl = function (target) {
            var _this = this;
            var f = _super.prototype.elementRenderImpl.call(this, target);
            this.videoElementWithPan = new bnt.ElementWithPan({
                container: {
                    element: this.containerElement,
                    width: function (c) { return c.width; },
                    height: function (c) { return c.height; }
                },
                element: {
                    element: this.videoElement,
                    width: function (c) { return c.videoWidth; },
                    height: function (c) { return c.videoHeight; }
                }
            });
            this.videoElementWithPan.onSizesChange.addObserver(function (sizes) {
                if (!sizes || !_this.videoElement)
                    return;
                _this.videoElement.hidden = false;
                bnt.style(_this.videoElement, {
                    position: "absolute",
                    left: bnt.px(sizes.x),
                    top: bnt.px(sizes.y),
                    width: bnt.px(sizes.w),
                    height: bnt.px(sizes.h)
                });
            });
            this.coverElementWithPan = new bnt.ElementWithPan({
                container: {
                    element: this.containerElement,
                    width: function (c) { return c.width; },
                    height: function (c) { return c.height; }
                },
                element: {
                    element: this.coverElement,
                    width: function (c) { return c.coverWidth; },
                    height: function (c) { return c.coverHeight; }
                }
            });
            this.coverElementWithPan.onSizesChange.addObserver(function (sizes) {
                if (!sizes || !_this.coverElement)
                    return;
                bnt.style(_this.coverElement, {
                    position: "absolute",
                    left: bnt.px(sizes.x),
                    top: bnt.px(sizes.y),
                    border: "0",
                    width: bnt.px(sizes.w),
                    height: bnt.px(sizes.h)
                });
            });
            this.enablePanForCorrectElement();
            return f;
        };
        WithPan.prototype.enablePanForCorrectElement = function () {
            if (!this.videoElementWithPan || !this.coverElementWithPan)
                return;
            var state = bnt.get(bnt.State);
            var vConfig = this.video.getConfig(state);
            this.videoElementWithPan.disable();
            this.coverElementWithPan.disable();
            if (vConfig.panActive) {
                if (vConfig.cover && !vConfig.autoplay) {
                    this.coverElementWithPan.enable();
                }
                else {
                    this.videoElementWithPan.enable();
                }
            }
        };
        WithPan.prototype.registerEventListenersImpl = function () {
            _super.prototype.registerEventListenersImpl.call(this);
            if (this.videoElementWithPan)
                this.videoElementWithPan.registerListeners();
            if (this.coverElementWithPan)
                this.coverElementWithPan.registerListeners();
        };
        WithPan.prototype.unregisterEventListenersImpl = function () {
            _super.prototype.unregisterEventListenersImpl.call(this);
            if (this.videoElementWithPan)
                this.videoElementWithPan.unregisterListeners();
            if (this.coverElementWithPan)
                this.coverElementWithPan.unregisterListeners();
        };
        WithPan.prototype.handlerCoverClick = function (e) {
            _super.prototype.handlerCoverClick.call(this, e);
            var state = bnt.get(bnt.State);
            var vConfig = this.video.getConfig(state);
            if (vConfig.panActive) {
                this.coverElementWithPan.disable();
                this.videoElementWithPan.enable();
            }
        };
        WithPan.prototype.applyElementConfigImpl = function (config) {
            _super.prototype.applyElementConfigImpl.call(this, config);
            this.lastConfig = config;
            if (this.containerElement) {
                bnt.style(this.containerElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height),
                    overflow: "hidden",
                    position: "relative"
                });
            }
            if (this.videoElementWithPan) {
                this.videoElementWithPan.updateConfig(config);
            }
            if (this.coverElementWithPan) {
                this.coverElementWithPan.updateConfig(config);
            }
            this.enablePanForCorrectElement();
            return bnt.Promise.fulfilledWith(null).future;
        };
        return WithPan;
    }(bnt.BaseVideoRenderer));
    bnt.WithPan = WithPan;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ElementWithPan = (function () {
        function ElementWithPan(options) {
            var _this = this;
            this.options = options;
            this.gyroLocked = false;
            this.pointerHasMoved = false;
            this.pointerAfterSpeed = bnt.Point.zero;
            this.elementPosition = bnt.Point.zero;
            this.sizes = { w: 0, h: 0, x: 0, y: 0, side: bnt.SIDE.NONE };
            this.enabled = true;
            this.onSizesChange = new bnt.ObservableValue(null);
            this.resettingToCenter = {
                active: false,
                startPosition: null,
                percentageDone: null,
                speed: bnt.Point.from(7.5)
            };
            this.touchstart = function (e) {
                if (_this.pointerEventsEnabled) {
                    _this.gyroLocked = true;
                    _this.pointerHasMoved = false;
                    _this.pointerPosition = new bnt.Point(e.touches[0].clientX, e.touches[0].clientY);
                    _this.pointerAfterSpeed = bnt.Point.zero;
                }
            };
            this.touchmove = function (e) {
                if (_this.pointerEventsEnabled) {
                    if (_this.gyroLocked) {
                        _this.pointerHasMoved = true;
                        _this.pointerPosition = new bnt.Point(e.touches[0].clientX, e.touches[0].clientY);
                    }
                }
            };
            this.mousedown = function (e) {
                if (_this.pointerEventsEnabled) {
                    _this.gyroLocked = true;
                    _this.pointerHasMoved = false;
                    _this.pointerPosition = new bnt.Point(e.clientX, e.clientY);
                    _this.pointerAfterSpeed = bnt.Point.zero;
                }
            };
            this.mousemove = function (e) {
                if (_this.pointerEventsEnabled) {
                    if (_this.gyroLocked) {
                        if ((e.buttons != null && e.buttons % 2 == 0) || e.button) {
                            _this.pointerAfterSpeed = bnt.Point.zero;
                            _this.pointerout.call(_this);
                        }
                        _this.pointerHasMoved = true;
                        _this.pointerPosition = new bnt.Point(e.clientX, e.clientY);
                    }
                }
            };
            this.pointerout = function () {
                if (_this.pointerEventsEnabled) {
                    _this.gyroLocked = false;
                    _this.pointerLastPosition = null;
                }
            };
            this.click = function (e) {
                if (_this.pointerHasMoved)
                    e.stopPropagation();
            };
            this.dragstart = function (e) {
                e.preventDefault();
            };
            this.contextmenu = function (e) {
                e.preventDefault();
            };
            this.autoenable = true;
            ElementWithPan.init();
            ElementWithPan.registerElement(this);
            this.smoothAlpha = new bnt.Smooth(20);
            this.smoothBeta = new bnt.Smooth(20);
            this.smoothGamma = new bnt.Smooth(20);
            this.addViewportInidicator();
        }
        ElementWithPan.init = function () {
            if (ElementWithPan.inited)
                return;
            ElementWithPan.inited = true;
            ElementWithPan.initViewportStyle();
            ElementWithPan.update();
        };
        ElementWithPan.initViewportStyle = function () {
            var viewportIndicatorSize = 25 * (devicePixelRatio ? ElementWithPan.clamp(devicePixelRatio, 0, 2) : 1);
            var viewportIndicatorBackgroundColor = "rgba(0, 0, 0, .5)";
            var viewportIndicatorForegroundColor = "rgba(255, 255, 255, 0.9)";
            var viewportIndicatorShadowColor = "rgba(255, 255, 255, 0.1)";
            var viewportIndicatorStyle = bnt.createElement("style", document.body);
            viewportIndicatorStyle.innerHTML = "\n        .bnt-viewport-indicator {\n          width: " + bnt.px(viewportIndicatorSize) + ";\n          height: " + bnt.px(viewportIndicatorSize) + ";\n          position: absolute;\n          right: 10px;\n          top: 50%;\n          -webkit-transform: translateY(-50%) translateZ(0);\n          transform: translateY(-50%) translateZ(0);\n          border-radius: 50%;\n          background: " + viewportIndicatorBackgroundColor + ";\n          z-index: 6;\n        }\n        .bnt-viewport-indicator:before {\n          content: \"\";\n          width: " + bnt.px(viewportIndicatorSize * 0.85) + ";\n          height: " + bnt.px(viewportIndicatorSize * 0.85) + ";\n          border: 1px solid " + viewportIndicatorForegroundColor + ";\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n          border-radius: inherit;\n        }\n        .bnt-viewport-indicator:after {\n          content: \"\";\n          width: " + bnt.px(viewportIndicatorSize * 0.1) + ";\n          height: " + bnt.px(viewportIndicatorSize * 0.1) + ";\n          background: " + viewportIndicatorForegroundColor + ";\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n          border-radius: inherit;\n        }\n        .bnt-viewport-indicator .bnt-indicator {\n          width: 0;\n          height: 0;\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          -webkit-transform: translate(-50%, -50%) rotate(0deg);\n          transform: translate(-50%, -50%) rotate(0deg);\n        }\n        .bnt-viewport-indicator .bnt-indicator .bnt-indicator-inner {\n          width: " + bnt.px(viewportIndicatorSize) + ";\n          height: " + bnt.px(viewportIndicatorSize * 0.3) + ";\n          position: absolute;\n          left: 50%;\n          bottom: " + bnt.px(viewportIndicatorSize * 0.1) + ";\n          -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n          overflow: hidden;\n        }\n        .bnt-viewport-indicator .bnt-indicator .bnt-indicator-inner:after {\n          content: \"\";\n          width: 0;\n          height: 0;\n          border-top: " + bnt.px(viewportIndicatorSize * 0.4) + " solid " + viewportIndicatorForegroundColor + ";\n          border-left: " + bnt.px(viewportIndicatorSize / 4) + " solid transparent;\n          border-right: " + bnt.px(viewportIndicatorSize / 4) + " solid transparent;\n          position: absolute;\n          left: 50%;\n          top: " + bnt.px(viewportIndicatorSize * 0.025) + ";\n          -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n          border-radius: 100% 100% 0 0;\n        }\n        \n        .bnt-viewport-indicator .bnt-indicator.bnt-indicator-shadow .bnt-indicator-inner:after {\n          border-top-color: " + viewportIndicatorShadowColor + ";\n        }\n      ";
        };
        ElementWithPan.update = function () {
            bnt.requestAnimFrame(ElementWithPan.update);
            var dt = ElementWithPan.getDeltaTime;
            ElementWithPan.elements.forEach(function (el) { return el.update(dt); });
        };
        ElementWithPan.registerElement = function (el) {
            ElementWithPan.elements.push(el);
        };
        Object.defineProperty(ElementWithPan, "getDeltaTime", {
            get: function () {
                var ts = Date.now();
                if (!ElementWithPan.lsts)
                    ElementWithPan.lsts = ts;
                var dt = (ts - ElementWithPan.lsts) / 1000;
                ElementWithPan.lsts = ts;
                return dt;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementWithPan.prototype, "pointerDown", {
            get: function () { return this.gyroLocked; },
            enumerable: true,
            configurable: true
        });
        ;
        ElementWithPan.prototype.addViewportInidicator = function () {
            var _this = this;
            this.indicatorWrap = bnt.createElement("div", this.options.container.element);
            this.indicatorWrap.classList.add("bnt-viewport-indicator");
            this.indicatorWrap.addEventListener("click", function (e) {
                _this.resettingToCenter.startPosition = _this.elementPosition.clone();
                _this.resettingToCenter.percentageDone = bnt.Point.zero;
                _this.resettingToCenter.active = true;
                e.stopPropagation();
            });
            this.indicator = bnt.createElement("div", this.indicatorWrap);
            this.indicator.classList.add("bnt-indicator");
            var helperElement2 = bnt.createElement("div", this.indicator);
            helperElement2.classList.add("bnt-indicator-inner");
            var helperElement3 = bnt.createElement("div", this.indicatorWrap);
            helperElement3.classList.add("bnt-indicator");
            helperElement3.classList.add("bnt-indicator-shadow");
            var helperElement4 = bnt.createElement("div", helperElement3);
            helperElement4.classList.add("bnt-indicator-inner");
            helperElement4.classList.add("bnt-indicator-inner");
        };
        Object.defineProperty(ElementWithPan.prototype, "pointerEventsEnabled", {
            get: function () {
                return ((this.config && this.config.panActive && this.config.usePointer) || !this.config);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementWithPan.prototype, "gyroscopeEnabled", {
            get: function () {
                return ((this.config && this.config.panActive && this.config.useGyroscope) || !this.config);
            },
            enumerable: true,
            configurable: true
        });
        ElementWithPan.prototype.registerListeners = function () {
            var _this = this;
            this.options.container.element.addEventListener("touchstart", this.touchstart, true);
            this.options.container.element.addEventListener("touchmove", this.touchmove, true);
            this.options.container.element.addEventListener("touchend", this.pointerout, true);
            this.options.container.element.addEventListener("touchleave", this.pointerout, true);
            this.options.container.element.addEventListener("mousedown", this.mousedown, true);
            this.options.container.element.addEventListener("mousemove", this.mousemove, true);
            this.options.container.element.addEventListener("mouseup", this.pointerout, true);
            this.options.container.element.addEventListener("click", this.click, true);
            this.options.container.element.addEventListener("dragstart", this.dragstart, true);
            this.options.element.element.addEventListener("dragstart", this.dragstart, true);
            this.options.element.element.addEventListener("contextmenu", this.contextmenu, true);
            this.subDeviceOrientation = bnt.DeviceOrientation.subscribe(function (rotation) {
                rotation.continuous = {
                    alpha: _this.smoothAlpha.get(rotation.continuous.alpha),
                    beta: _this.smoothBeta.get(rotation.continuous.beta),
                    gamma: _this.smoothGamma.get(rotation.continuous.gamma)
                };
                if (!_this.deviceLastRotation)
                    _this.deviceLastRotation = rotation.continuous;
                if (bnt.ScreenOrientation.get() != _this.currentOrientation) {
                    _this.deviceLastRotation = rotation.continuous;
                    _this.currentOrientation = bnt.ScreenOrientation.get();
                }
                _this.deviceRotation = rotation.continuous;
            });
        };
        ElementWithPan.prototype.unregisterListeners = function () {
            this.options.container.element.removeEventListener("touchstart", this.touchstart, true);
            this.options.container.element.removeEventListener("touchmove", this.touchmove, true);
            this.options.container.element.removeEventListener("touchend", this.pointerout, true);
            this.options.container.element.removeEventListener("touchleave", this.pointerout, true);
            this.options.container.element.removeEventListener("mousedown", this.mousedown, true);
            this.options.container.element.removeEventListener("mousemove", this.mousemove, true);
            this.options.container.element.removeEventListener("mouseup", this.pointerout, true);
            this.options.container.element.removeEventListener("click", this.click, true);
            this.options.container.element.removeEventListener("dragstart", this.dragstart, true);
            this.options.element.element.removeEventListener("dragstart", this.dragstart, true);
            this.options.element.element.removeEventListener("contextmenu", this.contextmenu, true);
            if (this.subDeviceOrientation)
                this.subDeviceOrientation.unsubscribe();
        };
        ElementWithPan.prototype.update = function (dt) {
            var _a, _b, _c;
            if (!this.enabled)
                return;
            var x = 0, y = 0;
            _a = __read(this.updateWithPointerAfterMovement([x, y, dt]), 2), x = _a[0], y = _a[1];
            if (this.gyroLocked) {
                _b = __read(this.updateWithPointerMovement([x, y]), 2), x = _b[0], y = _b[1];
            }
            else {
                _c = __read(this.updateWithGyroMovement([x, y]), 2), x = _c[0], y = _c[1];
            }
            this.updateGyroLastRotations();
            if (this.resettingToCenter.active)
                this.resetToCenter(dt);
            x = ElementWithPan.clampAbs(this.elementPosition.x + x, Math.abs(this.sizes.x));
            y = ElementWithPan.clampAbs(this.elementPosition.y + y, Math.abs(this.sizes.y));
            this.updateIndicator(this.sizes.side == bnt.SIDE.WIDTH ? y / Math.abs(this.sizes.y) : x / Math.abs(this.sizes.x));
            this.elementPosition.x = x;
            this.elementPosition.y = y;
            this.updateElementPosition(x + this.sizes.x, y + this.sizes.y);
        };
        ElementWithPan.prototype.updateWithPointerMovement = function (_a) {
            var _b = __read(_a, 2), x = _b[0], y = _b[1];
            if (!this.pointerEventsEnabled)
                return [x, y];
            this.resettingToCenter.active = false;
            if (this.pointerPosition) {
                var scale = this.options.container.element.getBoundingClientRect().width / this.options.container.width(this.config);
                if (!this.pointerLastPosition)
                    this.pointerLastPosition = this.pointerPosition.clone();
                var speed = bnt.Point.zero;
                if (this.sizes.side == bnt.SIDE.WIDTH) {
                    var ySpeed = this.pointerPosition.y - this.pointerLastPosition.y;
                    ySpeed /= scale;
                    y += ySpeed;
                    speed.y = ySpeed;
                }
                else if (this.sizes.side == bnt.SIDE.HEIGHT) {
                    var xSpeed = this.pointerPosition.x - this.pointerLastPosition.x;
                    xSpeed /= scale;
                    x += xSpeed;
                    speed.x = xSpeed;
                }
                if (speed.size() > 5) {
                    this.pointerAfterSpeed = speed;
                }
                this.pointerLastPosition = this.pointerPosition.clone();
            }
            return [x, y];
        };
        ElementWithPan.prototype.updateWithPointerAfterMovement = function (_a) {
            var _this = this;
            var _b = __read(_a, 3), x = _b[0], y = _b[1], dt = _b[2];
            if (this.pointerAfterSpeed.size() >= 0 && !this.pointerDown) {
                x = this.pointerAfterSpeed.x;
                y = this.pointerAfterSpeed.y;
                var getXorY_1 = function () { return _this.pointerAfterSpeed.x || _this.pointerAfterSpeed.y; };
                var getXorYSign = function () { return ElementWithPan.sign(getXorY_1()); };
                var sign = getXorYSign();
                var speed = -getXorY_1() * 8 * dt;
                var speedPoint = new bnt.Point(this.pointerAfterSpeed.x && speed, this.pointerAfterSpeed.y && speed);
                this.pointerAfterSpeed = this.pointerAfterSpeed.plus(speedPoint);
                if (sign != getXorYSign())
                    this.pointerAfterSpeed = bnt.Point.zero;
                if (this.pointerAfterSpeed.size() < 0.05)
                    this.pointerAfterSpeed = bnt.Point.zero;
            }
            return [x, y];
        };
        ElementWithPan.prototype.updateWithGyroMovement = function (_a) {
            var _b = __read(_a, 2), x = _b[0], y = _b[1];
            if (!this.gyroscopeEnabled)
                return [x, y];
            if (this.deviceRotation) {
                if (!this.deviceLastRotation)
                    this.deviceLastRotation = {
                        alpha: this.deviceRotation.alpha,
                        beta: this.deviceRotation.beta,
                        gamma: this.deviceRotation.gamma
                    };
                if (this.resettingToCenter.active)
                    return [x, y];
                var pixelsPerDegree = 30;
                var positionDelta = void 0;
                var directionDelta = (this.deviceRotation.alpha - this.deviceLastRotation.alpha) * pixelsPerDegree;
                if ((bnt.ScreenOrientation.isLandscape && this.sizes.side == bnt.SIDE.HEIGHT) || (bnt.ScreenOrientation.isPortrait && this.sizes.side == bnt.SIDE.WIDTH)) {
                    positionDelta = (this.deviceRotation.beta - this.deviceLastRotation.beta) * pixelsPerDegree;
                    if (bnt.ScreenOrientation.isPortrait && this.sizes.side == bnt.SIDE.WIDTH)
                        positionDelta *= -1;
                }
                else {
                    positionDelta = (this.deviceRotation.gamma - this.deviceLastRotation.gamma) * pixelsPerDegree;
                    if (bnt.ScreenOrientation.is(bnt.ScreenOrientationType.LandscapeRight))
                        positionDelta *= -1;
                }
                if (this.sizes.side == bnt.SIDE.WIDTH) {
                    y += positionDelta + directionDelta;
                }
                else if (this.sizes.side == bnt.SIDE.HEIGHT) {
                    x += positionDelta + directionDelta;
                }
            }
            return [x, y];
        };
        ElementWithPan.prototype.updateGyroLastRotations = function () {
            if (this.deviceRotation) {
                this.deviceLastRotation = {
                    alpha: this.deviceRotation.alpha,
                    beta: this.deviceRotation.beta,
                    gamma: this.deviceRotation.gamma
                };
            }
        };
        ElementWithPan.prototype.resetToCenter = function (dt) {
            this.resettingToCenter.percentageDone = this.resettingToCenter.percentageDone.plus(this.resettingToCenter.speed.mul(dt));
            this.resettingToCenter.percentageDone.x = ElementWithPan.clamp01(this.resettingToCenter.percentageDone.x);
            this.resettingToCenter.percentageDone.y = ElementWithPan.clamp01(this.resettingToCenter.percentageDone.y);
            this.elementPosition.x = ElementWithPan.lerp(this.resettingToCenter.startPosition.x, 0, this.resettingToCenter.percentageDone.x);
            this.elementPosition.y = ElementWithPan.lerp(this.resettingToCenter.startPosition.y, 0, this.resettingToCenter.percentageDone.y);
            if (this.resettingToCenter.percentageDone.x == 1 && this.resettingToCenter.percentageDone.y == 1) {
                this.resettingToCenter.active = false;
            }
        };
        ElementWithPan.prototype.updateIndicator = function (percent) {
            bnt.style(this.indicator, {
                "webkitTransform": "translate(-50%, -50%) rotate(" + -percent * 60 + "deg)",
                "transform": "translate(-50%, -50%) rotate(" + -percent * 60 + "deg)"
            });
        };
        ElementWithPan.prototype.hideIndicator = function () {
            this.indicatorWrap.hidden = true;
        };
        ElementWithPan.prototype.showIndicator = function () {
            this.indicatorWrap.hidden = false;
        };
        ElementWithPan.prototype.updateElementPosition = function (x, y) {
            if (this.options.element.element) {
                bnt.style(this.options.element.element, {
                    left: bnt.px(x),
                    top: bnt.px(y)
                });
            }
        };
        ElementWithPan.prototype.updateConfig = function (config) {
            if (config.panActive) {
                if (this.autoenable)
                    this.enable();
            }
            else
                this.disable();
            this.config = config;
            if (this.enabled) {
                this.sizes = bnt.ScaleToFill.getSizes(this.options.container.width(this.config), this.options.container.height(this.config), this.options.element.width(this.config), this.options.element.height(this.config));
            }
            else {
                this.sizes = {
                    x: 0,
                    y: 0,
                    w: this.options.container.width(this.config),
                    h: this.options.container.height(this.config),
                    side: bnt.SIDE.NONE
                };
            }
            this.onSizesChange.update(this.sizes);
        };
        ElementWithPan.prototype.enable = function () {
            this.enabled = true;
            this.showIndicator();
        };
        ElementWithPan.prototype.disable = function () {
            this.enabled = false;
            this.hideIndicator();
        };
        ElementWithPan.prototype.forceUpdateLastConfig = function () {
            if (this.config)
                this.updateConfig(this.config);
        };
        ElementWithPan.prototype.preventAutoEnable = function (value) {
            var oldAutoenable = this.autoenable;
            this.autoenable = !value;
            if (oldAutoenable != this.autoenable)
                this.forceUpdateLastConfig();
        };
        ElementWithPan.sign = function (value) {
            return value < 0 ? -1 : 1;
        };
        ElementWithPan.clamp01 = function (value) {
            return ElementWithPan.clamp(value, 0, 1);
        };
        ElementWithPan.clamp = function (value, min, max) {
            return value > max ? max : (value < min ? min : value);
        };
        ElementWithPan.clampAbs = function (value, abs) {
            return ElementWithPan.clamp(value, -abs, abs);
        };
        ElementWithPan.lerp = function (v0, v1, t) {
            return v0 * (1 - t) + v1 * t;
        };
        ElementWithPan.elements = [];
        ElementWithPan.inited = false;
        return ElementWithPan;
    }());
    bnt.ElementWithPan = ElementWithPan;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Timeline = (function () {
        function Timeline() {
        }
        return Timeline;
    }());
    bnt.Timeline = Timeline;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CreativeTimeline = (function () {
        function CreativeTimeline(creativeRenderer) {
            this.creativeRenderer = creativeRenderer;
        }
        CreativeTimeline.prototype.getScreen = function () {
            return bnt.get(bnt.MainStage).currentScreen;
        };
        CreativeTimeline.prototype.play = function () {
            return this.getScreen().play();
        };
        CreativeTimeline.prototype.pause = function () {
            return this.getScreen().pause();
        };
        CreativeTimeline.prototype.stop = function () {
            return this.getScreen().stop();
        };
        CreativeTimeline.prototype.suspend = function () {
            return this.getScreen().suspend();
        };
        CreativeTimeline.prototype.resume = function () {
            return this.getScreen().resume();
        };
        CreativeTimeline.prototype.mute = function () {
            return this.getScreen().mute();
        };
        CreativeTimeline.prototype.unmute = function () {
            return this.getScreen().unmute();
        };
        return CreativeTimeline;
    }());
    bnt.CreativeTimeline = CreativeTimeline;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VideoTimeline = (function () {
        function VideoTimeline(videoRenderer) {
            this.videoRenderer = videoRenderer;
            this.paused = true;
        }
        VideoTimeline.prototype.play = function () {
            var _this = this;
            this.paused = false;
            var p = new bnt.Promise();
            bnt.Promise.tryFulfill(function () { return _this.videoRenderer.videoElement.play(); })
                .onComplete(function (_) {
                if (_ instanceof bnt.Failure) {
                    var knownFailure = false;
                    try {
                        if (_.failure.code === DOMException.ABORT_ERR) {
                            knownFailure = true;
                        }
                    }
                    catch (er) { }
                    if (!knownFailure) {
                        console.error(_.failure);
                        bnt.get(bnt.AdController).onerror.update(_.failure.message);
                    }
                }
                p.succeed(undefined);
            });
            return p.future;
        };
        VideoTimeline.prototype.pause = function () {
            this.videoRenderer.videoElement.pause();
            this.paused = true;
            return bnt.Promise.fulfilledWith(undefined).future;
        };
        VideoTimeline.prototype.stop = function () {
            var _this = this;
            return this.pause().map(function () {
                _this.videoRenderer.videoElement.currentTime = 0;
            });
        };
        VideoTimeline.prototype.suspend = function () {
            if (!this.paused) {
                this.videoRenderer.videoElement.pause();
            }
            return bnt.Promise.fulfilledWith(undefined).future;
        };
        VideoTimeline.prototype.resume = function () {
            var _this = this;
            if (!this.paused) {
                return bnt.Promise.tryFulfill(function () {
                    return _this.videoRenderer.videoElement.play();
                }).map(function (_) {
                    return _;
                });
            }
            else
                return bnt.Promise.fulfilledWith(undefined).future;
        };
        VideoTimeline.prototype.mute = function () {
            var _this = this;
            return bnt.Promise.tryFulfill(function () {
                return _this.videoRenderer.videoElement.muted = true;
            });
        };
        VideoTimeline.prototype.unmute = function () {
            var _this = this;
            return bnt.Promise.tryFulfill(function () {
                return _this.videoRenderer.videoElement.muted = false;
            });
        };
        __decorate([
            bnt.Action({
                actionOf: bnt.Video
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], VideoTimeline.prototype, "play", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Video
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], VideoTimeline.prototype, "pause", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Video
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], VideoTimeline.prototype, "stop", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Video
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], VideoTimeline.prototype, "mute", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Video
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], VideoTimeline.prototype, "unmute", null);
        return VideoTimeline;
    }());
    bnt.VideoTimeline = VideoTimeline;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ScreenTimeline = (function (_super) {
        __extends(ScreenTimeline, _super);
        function ScreenTimeline(screenRenderer) {
            var _this = _super.call(this) || this;
            _this.screenRenderer = screenRenderer;
            if (screenRenderer.screen.config.duration != 0) {
                _this.timedTimeline = new TimelineTimer(screenRenderer.screen.config.duration * 1000);
                _this.timedTimeline.play().map(function (_) { return _this.timedTimeline.suspend(); });
                _this.screenRenderer.screen.onshowAnimationStart.addObserver(function () { return _this.timedTimeline.resume(); });
                _this.screenRenderer.screen.onhideAnimationEnd.addObserver(function () { return _this.timedTimeline.suspend(); });
            }
            return _this;
        }
        ScreenTimeline.prototype.getElementsWithTimeline = function () {
            var fn = function (container) {
                var arr = [];
                container.forEachEos(function (eos) {
                    if (eos.element.hasOwnProperty("timeline"))
                        arr.push(eos.element);
                    if (eos.element instanceof bnt.Group) {
                        arr = __spread(arr, fn(eos.element));
                    }
                });
                return arr;
            };
            var ewt = fn(this.screenRenderer.screen);
            if (this.timedTimeline) {
                ewt.push(this.timedTimeline);
            }
            return ewt;
        };
        ScreenTimeline.prototype.play = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.play(); }));
        };
        ScreenTimeline.prototype.pause = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.pause(); }));
        };
        ScreenTimeline.prototype.stop = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.stop(); }));
        };
        ScreenTimeline.prototype.suspend = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.suspend(); }));
        };
        ScreenTimeline.prototype.resume = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.resume(); }));
        };
        ScreenTimeline.prototype.mute = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.mute(); }));
        };
        ScreenTimeline.prototype.unmute = function () {
            return bnt.Promise.forAll(this.getElementsWithTimeline().map(function (e) { return e.unmute(); }));
        };
        ScreenTimeline.prototype.getRemainingTime = function () {
            if (this.timedTimeline) {
                return this.timedTimeline.remainingTimeMillisec.value;
            }
            return this.getElementsWithTimeline().reduce(function (maxRemainingTime, ewt) { return Math.max(maxRemainingTime, ewt.remainingTimeMillisec.value); }, -1);
        };
        ScreenTimeline.prototype.getDuration = function () {
            if (this.timedTimeline) {
                return this.timedTimeline.duration.value;
            }
            return this.getElementsWithTimeline().reduce(function (maxDuration, ewt) { return Math.max(maxDuration, ewt.duration.value); }, -1);
        };
        ScreenTimeline.prototype.getTime = function () {
            if (this.timedTimeline) {
                return this.timedTimeline.timeMillisec.value;
            }
            return this.getElementsWithTimeline().reduce(function (maxTime, ewt) { return Math.max(maxTime, ewt.timeMillisec.value); }, -1);
        };
        return ScreenTimeline;
    }(bnt.Timeline));
    bnt.ScreenTimeline = ScreenTimeline;
    var TimelineTimer = (function (_super) {
        __extends(TimelineTimer, _super);
        function TimelineTimer(duration) {
            var _this = _super.call(this) || this;
            _this.paused = false;
            _this.onplay = new bnt.Observable();
            _this.onpause = new bnt.Observable();
            _this.onstop = new bnt.Observable();
            _this.onend = new bnt.Observable();
            _this.muted = new bnt.ObservableValue();
            _this.duration = new bnt.ObservableValue();
            _this.remainingTimeMillisec = new bnt.ObservableValue(-1);
            _this.timeMillisec = new bnt.ObservableValue();
            _this.volume = new bnt.ObservableValue();
            _this.updateCallback = function () {
                _this.timeMillisec.update(_this.timer.getTime() / 1000);
                _this.remainingTimeMillisec.update(_this.timer.getTimeRemaining() / 1000);
                if (_this.timer.getTimeRemaining() === 0) {
                    clearInterval(_this.tickIntervalID);
                    _this.onend.update(undefined);
                }
            };
            _this.timeline = _this;
            _this.timer = new bnt.Timer(duration);
            return _this;
        }
        TimelineTimer.prototype.play = function () {
            this.paused = false;
            this.timer.play();
            clearInterval(this.tickIntervalID);
            this.tickIntervalID = setInterval(this.updateCallback.bind(this), TimelineTimer.TICKING_INTERVAL);
            this.duration.update(this.timer.duration / 1000);
            return bnt.Promise.fulfilledWith(this.onplay.update(undefined)).future;
        };
        TimelineTimer.prototype.pause = function () {
            this.paused = true;
            clearInterval(this.tickIntervalID);
            this.timer.pause();
            return bnt.Promise.fulfilledWith(this.onpause.update(undefined)).future;
        };
        TimelineTimer.prototype.stop = function () {
            clearInterval(this.tickIntervalID);
            this.timer.stop();
            return bnt.Promise.fulfilledWith(this.onstop.update(undefined)).future;
        };
        TimelineTimer.prototype.suspend = function () {
            if (!this.paused) {
                clearInterval(this.tickIntervalID);
                this.timer.pause();
                return bnt.Promise.fulfilledWith(undefined).future;
            }
            return bnt.Promise.failedWith(undefined).future;
        };
        TimelineTimer.prototype.resume = function () {
            if (!this.paused) {
                this.timer.play();
                clearInterval(this.tickIntervalID);
                this.tickIntervalID = setInterval(this.updateCallback.bind(this), TimelineTimer.TICKING_INTERVAL);
                return bnt.Promise.fulfilledWith(undefined).future;
            }
            else {
                return bnt.Promise.failedWith(undefined).future;
            }
        };
        TimelineTimer.prototype.mute = function () {
            this.muted.update(true);
            return bnt.Promise.fulfilledWith(undefined).future;
        };
        TimelineTimer.prototype.unmute = function () {
            this.muted.update(false);
            return bnt.Promise.fulfilledWith(undefined).future;
        };
        TimelineTimer.TICKING_INTERVAL = 200;
        return TimelineTimer;
    }(bnt.Timeline));
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    function rel(a, b) {
        return Math.abs((b - a) / a);
    }
    var AdController = (function () {
        function AdController(creative) {
            this.creative = creative;
            this.desiredExpandState = new bnt.Observable();
            this.rendered = false;
            this.expanded = false;
            this.expanding = false;
            this.collapsing = false;
            this.preventDefaultTouchEvents = false;
            this.signalObserversMap = [];
            this.resizeController = bnt.get(bnt.ResizeController);
            this.isBannerAd = false;
            AdController.instance = this;
            var ll = Number(bnt.QueryParams.get("logLevel"));
            isNaN(ll) && (ll = Number(bnt.LogLevel[bnt.QueryParams.get("logLevel")]));
            bnt.logger.LOG_LEVEL = isNaN(ll) ? bnt.LogLevel.error : ll;
            this.element = document.body ? document.body : document.documentElement;
            this.onstart = new bnt.Observable();
            this.ondestroy = new bnt.Observable();
            this.onresume = new bnt.Observable();
            this.onsuspend = new bnt.Observable();
            this.onclickthru = new bnt.Observable();
            this.interaction = new bnt.Observable();
            this.onerror = new bnt.Observable();
            this.onplay = new bnt.Observable();
            this.onpause = new bnt.Observable();
            this.fullscreen = new bnt.ObservableValue(false);
            this.setAutoResize(true);
            this.stateChangeDetector = new bnt.StateChangeDetector(creative.segments, creative.canvases);
            this.stateChangeDetector.stateUpdated.addObserver(function (state) {
                bnt.set(bnt.State, state);
            });
            bnt.set(bnt.StateChangeDetector, this.stateChangeDetector);
            bnt.set(bnt.Creative, this.creative);
            bnt.set(bnt.net.Monitor, new bnt.net.Monitor());
            bnt.set(AdController, this);
            creative.setController(this);
            bnt.DynamicData.init();
            bnt.QueryParams.init();
        }
        AdController.prototype.sendAdClickThru = function (url) {
            if (!this.isBannerAd)
                return;
            bnt.TeadsPlayerAddons.apiProxy.addObserver(function (api) {
                if (!api)
                    return;
                api.isStudioDisplay().onSuccess(function (isStudioDisplay) {
                    if (!isStudioDisplay)
                        return;
                    api.sendAdClickThru({
                        url: url,
                        id: null,
                        playerHandles: false
                    });
                });
            });
        };
        AdController.prototype.getStageWidth = function () {
            return bnt.get(bnt.ResizeController).previous.width;
        };
        AdController.prototype.getStageHeight = function () {
            return bnt.get(bnt.ResizeController).previous.height;
        };
        AdController.prototype.getSkippable = function () {
            return this.creative.skippable.value;
        };
        AdController.prototype.getRemainingTime = function () {
            return this.creative.remainingTimeMillisec.value;
        };
        AdController.prototype.getDuration = function () {
            return this.creative.duration.value;
        };
        AdController.prototype.getVolume = function () {
            return this.creative.volume.value;
        };
        AdController.prototype.setVolume = function (value) {
            this.creative.volume.update(value);
        };
        AdController.prototype.setAutoResize = function (value) {
            if (value)
                this.resizeController.setAutomatic();
            else
                this.resizeController.setManual();
        };
        AdController.prototype.init = function () {
            var _this = this;
            if (this.videoSlot) {
                this.creative.config.color = "";
            }
            bnt.logger.debug('controller.init');
            if (!this.rendered) {
                this.rendered = true;
                if (this.creative && this.element) {
                    bnt.get(bnt.SignalController).init();
                    this.resizeController.init();
                    this.stateChangeDetector.init();
                    this.renderer = new bnt.CreativeRenderer();
                    this.resizeController.start();
                    var initPr_1 = new bnt.Promise();
                    bnt.TeadsPlayerAddons.apiProxy.addObserver(function () {
                        _this.renderer.init();
                        _this.renderer.load().map(function (_) { return initPr_1.succeed(undefined); });
                    });
                    return initPr_1.future;
                }
                else {
                    var err = new Error('"Controller is not configured " + this.creative + " " + this.element');
                    ;
                    this.onerror.update(err);
                    throw err;
                }
            }
            else {
                bnt.logger.debug('controller not rendered');
            }
            return undefined;
        };
        AdController.prototype.start = function () {
            var _this = this;
            bnt.logger.debug('AdController start');
            if (!this.rendered) {
                var err = new Error('Controller is not rendered');
                this.onerror.update(err);
                throw err;
            }
            return this.renderer.render(this.element)
                .flatMap(function () {
                _this.onstart.update(undefined);
                return _this.renderer.showCreative();
            });
        };
        AdController.prototype.closeAd = function () {
            var _this = this;
            return bnt.Promise.asyncFulfilledWith(null).future
                .flatMap(function () { return _this.renderer.destroyCreative(); })
                .map(function () { return bnt.get(bnt.BannerStage) && _this.collapse(); })
                .map(function () { return _this.ondestroy.update(undefined); });
        };
        AdController.prototype.pause = function () {
            var _this = this;
            return this.creative.suspend().map(function () { return _this.onsuspend.update(undefined); });
        };
        AdController.prototype.play = function () {
            var _this = this;
            return this.creative.play().map(function () { return _this.onplay.update(undefined); });
        };
        AdController.prototype.suspend = function () {
            var _this = this;
            return this.creative.suspend().map(function () { return _this.onsuspend.update(undefined); });
        };
        AdController.prototype.pause_pause = function () {
            var _this = this;
            return this.creative.pause().map(function () { return _this.onpause.update(undefined); });
        };
        AdController.prototype.resume = function () {
            var _this = this;
            return this.creative.resume().map(function () { return _this.onresume.update(undefined); });
        };
        AdController.prototype.resize = function (size) {
            bnt.logger.debug('AdController resize', JSON.stringify(size));
            this.fullscreen.update(size.viewMode === "fullscreen");
            bnt.get(bnt.ManualResizeStrategy) && bnt.get(bnt.ManualResizeStrategy).update(size);
        };
        AdController.prototype.clickthru = function (url) {
            if (url) {
                this.onclickthru.update(bnt.TeadsTracking.replaceTeadsMacro(bnt.net.cacheBuster(url)));
                this.sendAdClickThru(url);
            }
        };
        AdController.prototype.trackPixel = function (uri) {
            bntTracking.trackPixel(uri);
        };
        AdController.prototype.expand = function () {
            var _this = this;
            var bannerStage = bnt.get(bnt.BannerStage);
            if (bannerStage && !this.expanding) {
                this.expanding = true;
                bannerStage.hideStage().onSuccess(function () {
                    bnt.set(bnt.State, _this.stateChangeDetector.getState());
                    _this.desiredExpandState.update({
                        expanded: true
                    });
                });
            }
        };
        AdController.prototype.collapse = function () {
            var _this = this;
            var bannerStage = bnt.get(bnt.BannerStage);
            if (bannerStage && !this.collapsing) {
                this.collapsing = true;
                bnt.get(bnt.MainStage).hideStage().onSuccess(function () {
                    bnt.set(bnt.State, bannerStage.getState());
                    _this.desiredExpandState.update({
                        expanded: false
                    });
                });
            }
        };
        AdController.prototype.toggleExpand = function () {
            if (this.expanded) {
                this.collapse();
            }
            else {
                this.expand();
            }
        };
        AdController.prototype.expandPerformed = function (state) {
            this.expanded = state;
            if (this.expanded) {
                bnt.get(bnt.MainStage).showStage();
                this.collapsing = false;
            }
            else {
                bnt.get(bnt.BannerStage).showStage();
                this.expanding = false;
            }
        };
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative,
                allowed: function (interaction, creative, screen) {
                    return (creative.bannerScreen && screen != creative.bannerScreen) || !creative.bannerScreen;
                }
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", Object)
        ], AdController.prototype, "closeAd", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative,
                allowed: function (interaction) {
                    return interaction.triggerName == "onclick";
                }
            }, 'url'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String]),
            __metadata("design:returntype", void 0)
        ], AdController.prototype, "clickthru", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative
            }, 'url'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String]),
            __metadata("design:returntype", void 0)
        ], AdController.prototype, "trackPixel", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative,
                allowed: function (interaction, creative, screen) {
                    return creative.bannerScreen && screen == creative.bannerScreen;
                }
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], AdController.prototype, "expand", null);
        __decorate([
            bnt.Action({
                actionOf: bnt.Creative,
                allowed: function (interaction, creative, screen) {
                    return creative.bannerScreen && screen != creative.bannerScreen;
                }
            }),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], AdController.prototype, "collapse", null);
        return AdController;
    }());
    bnt.AdController = AdController;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VideoSlotRenderer = (function (_super) {
        __extends(VideoSlotRenderer, _super);
        function VideoSlotRenderer(video) {
            var _this = _super.call(this, video) || this;
            if (VideoSlotRenderer_1.instance === null) {
                VideoSlotRenderer_1.instance = _this;
            }
            else {
                throw new Error("Can't run more instances of VideoSlotRenderer of it's subclasses! => " + VideoSlotRenderer_1.instance);
            }
            return _this;
        }
        VideoSlotRenderer_1 = VideoSlotRenderer;
        VideoSlotRenderer.prototype.preloadAssets = function () {
            this.videoElement = bnt.AdController.instance.videoSlot;
            this.coverElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.coverElement);
            this.containerElement = this.htmlElement = document.createElement("div");
            this.domElementReady.update(undefined);
            this.loadVideoSrc();
            this.loadCoverSrc();
        };
        VideoSlotRenderer.prototype.populateElements = function (target) {
            this.htmlElement.appendChild(this.coverElement);
            target.appendChild(this.containerElement);
        };
        VideoSlotRenderer.prototype.elementDestroyImpl = function () {
            this.videoElement && (this.videoElement.src = '');
            this.containerElement && this.containerElement.parentNode && this.containerElement.parentNode.removeChild(this.containerElement);
            this.unregisterAllFromElement();
            return bnt.Promise.fulfilledWith(null).future;
        };
        VideoSlotRenderer.prototype.getClickTarget = function () {
            return this.containerElement;
        };
        var VideoSlotRenderer_1;
        VideoSlotRenderer.instance = null;
        VideoSlotRenderer = VideoSlotRenderer_1 = __decorate([
            bnt.RendererOf(bnt.Video, function (video) {
                var config = video.getConfig(bnt.get(bnt.State));
                var videoSlot = bnt.get(bnt.AdController).videoSlot;
                var firstScreen = bnt.get(bnt.Creative).firstScreen();
                var isBottomMost = firstScreen.getBottomElementByType(bnt.Video) == video;
                return isBottomMost &&
                    videoSlot &&
                    !bnt.isVast(config.src) &&
                    VideoSlotRenderer_1.instance === null;
            }, 30),
            __metadata("design:paramtypes", [bnt.Video])
        ], VideoSlotRenderer);
        return VideoSlotRenderer;
    }(bnt.BaseVideoRenderer));
    bnt.VideoSlotRenderer = VideoSlotRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsVideoSlotRenderer = (function (_super) {
        __extends(TeadsVideoSlotRenderer, _super);
        function TeadsVideoSlotRenderer(video) {
            return _super.call(this, video) || this;
        }
        TeadsVideoSlotRenderer.prototype.preloadAssets = function () {
            this.videoElement = bnt.AdController.instance.videoSlot;
            this.coverElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.coverElement);
            this.containerElement = this.htmlElement = document.createElement("div");
            this.domElementReady.update(undefined);
            this.loadVideoSrc();
            this.loadCoverSrc();
        };
        TeadsVideoSlotRenderer.prototype.populateElements = function (target) {
            this.containerElement.appendChild(this.videoElement);
            this.containerElement.appendChild(this.coverElement);
            target.appendChild(this.containerElement);
            if (bnt.TeadsPlayerAddons.apiProxy.value) {
                bnt.TeadsPlayerAddons.fixVideoSlotSize(this.video);
            }
        };
        TeadsVideoSlotRenderer = __decorate([
            bnt.Mixin(bnt.WithPan),
            bnt.RendererOf(bnt.Video, function (video) {
                var creative = bnt.get(bnt.Creative);
                var videoSlot = bnt.get(bnt.AdController).videoSlot;
                var firstScreen = bnt.get(bnt.Creative).firstScreen();
                var isOnMainScreen = firstScreen.deepGetEos(video) || false;
                var videosOnMainScreen = firstScreen.deepGetEosByType(bnt.Video);
                var isBottomMostVideo = isOnMainScreen && (videosOnMainScreen.length == 1 || videosOnMainScreen[videosOnMainScreen.length - 1].element == video);
                return isOnMainScreen &&
                    isBottomMostVideo &&
                    videoSlot &&
                    videoSlot.nodeType == Node.ELEMENT_NODE &&
                    bnt.TeadsPlayerAddons.apiProxy.value &&
                    bnt.VideoSlotRenderer.instance === null;
            }, 10),
            __metadata("design:paramtypes", [bnt.Video])
        ], TeadsVideoSlotRenderer);
        return TeadsVideoSlotRenderer;
    }(bnt.VideoSlotRenderer));
    bnt.TeadsVideoSlotRenderer = TeadsVideoSlotRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var LKQDVideoSlotRenderer = (function (_super) {
        __extends(LKQDVideoSlotRenderer, _super);
        function LKQDVideoSlotRenderer(video) {
            return _super.call(this, video) || this;
        }
        LKQDVideoSlotRenderer.prototype.preloadAssets = function () {
            this.videoElement = bnt.AdController.instance.videoSlot;
            this.coverElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.coverElement);
            this.domElementReady.update(undefined);
            this.loadVideoSrc();
            this.loadCoverSrc();
        };
        LKQDVideoSlotRenderer.prototype.populateElements = function (target) {
            this.videoElement.style.width = "";
            this.videoElement.style.height = "";
            this.videoElement.classList.remove("lkqdvideo");
            this.containerElement = this.htmlElement = bnt.createElement("div", target);
            this.containerElement.appendChild(this.videoElement);
            this.containerElement.appendChild(this.coverElement);
        };
        LKQDVideoSlotRenderer = __decorate([
            bnt.Mixin(bnt.WithPan),
            bnt.RendererOf(bnt.Video, function (video) {
                var creative = bnt.get(bnt.Creative);
                var videoSlot = bnt.get(bnt.AdController).videoSlot;
                var firstScreen = bnt.get(bnt.Creative).firstScreen();
                var isOnMainScreen = firstScreen.deepGetEos(video) || false;
                var videosOnMainScreen = firstScreen.deepGetEosByType(bnt.Video);
                var isBottomMostVideo = isOnMainScreen && (videosOnMainScreen.length == 1 || videosOnMainScreen[videosOnMainScreen.length - 1].element == video);
                return isOnMainScreen &&
                    isBottomMostVideo &&
                    bnt.QueryParams.get("lkqd") == "1" &&
                    videoSlot != null &&
                    bnt.VideoSlotRenderer.instance === null;
            }, 20),
            __metadata("design:paramtypes", [bnt.Video])
        ], LKQDVideoSlotRenderer);
        return LKQDVideoSlotRenderer;
    }(bnt.VideoSlotRenderer));
    bnt.LKQDVideoSlotRenderer = LKQDVideoSlotRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VastTrackingEvent = (function () {
        function VastTrackingEvent() {
        }
        VastTrackingEvent.error = 'error';
        VastTrackingEvent.click = 'click';
        VastTrackingEvent.pause = 'pause';
        VastTrackingEvent.resume = 'resume';
        VastTrackingEvent.skip = 'skip';
        VastTrackingEvent.creativeView = 'creativeView';
        VastTrackingEvent.start = 'start';
        VastTrackingEvent.firstQuartile = 'firstQuartile';
        VastTrackingEvent.midpoint = 'midpoint';
        VastTrackingEvent.thirdQuartile = 'thirdQuartile';
        VastTrackingEvent.complete = 'complete';
        VastTrackingEvent.impression = 'impression';
        VastTrackingEvent.close = 'close';
        VastTrackingEvent.progress = 'progress';
        VastTrackingEvent.mute = 'mute';
        VastTrackingEvent.unmute = 'unmute';
        VastTrackingEvent.rewind = 'rewind';
        VastTrackingEvent.fullscreen = 'fullscreen';
        VastTrackingEvent.exitFullscreen = 'exitFullscreen';
        VastTrackingEvent.expand = 'expand';
        VastTrackingEvent.collapse = 'collapse';
        VastTrackingEvent.acceptInvitationLinear = 'acceptInvitationLinear';
        VastTrackingEvent.acceptInvitation = 'acceptInvitation';
        VastTrackingEvent.closeLinear = 'closeLinear';
        VastTrackingEvent.noAd = 'noAd';
        VastTrackingEvent.noLinearAd = 'noLinearAd';
        VastTrackingEvent.customClicks = 'customClicks';
        VastTrackingEvent.billable = 'billable';
        return VastTrackingEvent;
    }());
    bnt.VastTrackingEvent = VastTrackingEvent;
    var VastAdaptor = (function (_super) {
        __extends(VastAdaptor, _super);
        function VastAdaptor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VastAdaptor.prototype.loadImpl = function () {
            var _this = this;
            this.preloadAssets();
            bnt.get(bnt.StateChangeDetector).stateUpdated.addObserver(function () { return _this.updateStateConfigVideoMetadata(); });
            return this.vastPromise.future;
        };
        VastAdaptor.prototype.loadVideoSrc = function () {
            this.vastPromise = new bnt.Promise();
            var state = bnt.get(bnt.State);
            var config = this.video.getConfig(state);
            var vUrl = bnt.getVast(config.src);
            if (this.videoElement) {
                if (vUrl && this.lastVastPlayed != vUrl) {
                    if (this.lastVastPlayed) {
                        if (this.teadsTracker) {
                            this.teadsTracker.deinit();
                        }
                        this.teadsTracker = null;
                        this.linearAd = null;
                        this.playerConfig = null;
                        this.mediaFile = null;
                        this.teadsPlayer = null;
                    }
                    this.lastVastPlayed = vUrl;
                    if (!this.teadsLibWin) {
                        this.loadVASTPlayer();
                    }
                    else {
                        this.initVastPlayer();
                    }
                }
            }
        };
        VastAdaptor.prototype.loadVASTPlayer = function () {
            var _this = this;
            var filePrFu = bnt.net.downloadScript(VAST_PLAYER, false).map(function (sandboxWindow) {
                _this.teadsLibWin = sandboxWindow;
                var state = bnt.get(bnt.State);
                var config = _this.video.getConfig(state);
                _this.initVastPlayer();
            });
        };
        VastAdaptor.prototype.initVastPlayer = function (responsive, template, customVideo) {
            var _this = this;
            if (responsive === void 0) { responsive = false; }
            if (template === void 0) { template = ""; }
            if (customVideo === void 0) { customVideo = false; }
            this.playerConfig = {
                path: '../dist',
                debug: true,
                width: responsive ? null : 1280,
                useCustomVideo: customVideo,
                ui: undefined
            };
            if (template) {
                this.playerConfig.ui = {
                    name: template,
                    config: {
                        components: {
                            clicktoplay: {
                                disable: true
                            },
                            clickbutton: {
                                disable: true
                            },
                            endscreen: {
                                disable: true
                            }
                        }
                    }
                };
            }
            this.teadsPlayer = new this.teadsLibWin.teads.player.VASTPlayer(null, this.playerConfig);
            this.teadsPlayer.loadVast(this.lastVastPlayed, function (linearAd) { return _this.onVastReady(linearAd); }, function (err) { return console.error(err); });
        };
        VastAdaptor.prototype.onVastReady = function (linearAd) {
            var _this = this;
            this.linearAd = linearAd;
            this.teadsLibWin.teads.player.MediaFileHelper.getOptimalMediaFiles(this.linearAd.mediaFiles, null, function (mediaFiles) {
                if (!mediaFiles.length) {
                    _this.vastPromise.fail(new Error('No media file compatible with context'));
                    return;
                }
                _this.mediaFile = mediaFiles[0];
                if (_this.videoElement.src != _this.mediaFile.url) {
                    _this.videoElement.src = _this.mediaFile.url;
                }
                _this.videoElement.addEventListener('durationchange', function () { return _this.updateStateConfigVideoMetadata(); });
                _this.vastPromise.succeed(undefined);
                if (!_this.video.onclick.hasObservers()) {
                    if (_this.linearAd.clickThrough) {
                        _this.video.onclick.addEventListener(function () {
                            adController.clickthru(_this.linearAd.clickThrough[0]);
                            bntTracking.trackEvent(_this.video.elementId + ": onclick", null);
                        });
                    }
                }
                _this.trackVastEvents(_this.video);
            }, this.teadsLibWin.teads.player.PLAYER_TYPE.HTML5);
        };
        VastAdaptor.prototype.updateStateConfigVideoMetadata = function () {
            if (this.videoElement && this.videoElement.videoWidth && this.videoElement.videoHeight && this.videoElement.duration) {
                var state = bnt.get(bnt.State);
                var config = this.video.getConfig(state);
                config.videoWidth = this.videoElement.videoWidth;
                config.videoHeight = this.videoElement.videoHeight;
                config.videoDuration = this.videoElement.duration;
                var panMechanic = this.getVideoElementWithPan();
                panMechanic && panMechanic.forceUpdateLastConfig();
            }
        };
        VastAdaptor.prototype.trackVastEvents = function (video) {
            var tracker = new this.teadsLibWin.teads.player.VASTEventTracker(this.linearAd, this.playerConfig);
            var trackStart = function () {
                tracker.track(VastTrackingEvent.impression);
                tracker.track(VastTrackingEvent.start);
                tracker.track(VastTrackingEvent.creativeView);
                video.onplay.removeObserver(trackStart);
                video.onplay.addObserver(trackResume);
            };
            var trackResume = function () {
                tracker.track(VastTrackingEvent.resume);
            };
            var trackPause = function () {
                tracker.track(VastTrackingEvent.pause);
            };
            var lastVolume = video.volume.value;
            var trackMute = function (volume) {
                if (volume && !lastVolume)
                    tracker.track(VastTrackingEvent.unmute);
                else if (!volume && lastVolume)
                    tracker.track(VastTrackingEvent.mute);
                lastVolume = volume;
            };
            var trackFullScreen = function (fullscreenOn) {
                if (fullscreenOn)
                    tracker.track(VastTrackingEvent.fullscreen);
                else
                    tracker.track(VastTrackingEvent.exitFullscreen);
            };
            var quartiles = [false, false, false, false];
            var trackQuartiles = function (time) {
                if (video.timeMillisec.value <= 0 || video.duration.value <= 0)
                    return;
                if (video.timeMillisec.value / video.duration.value >= .75 && !quartiles[2]) {
                    quartiles[2] = true;
                    tracker.track(VastTrackingEvent.thirdQuartile);
                }
                if (video.timeMillisec.value / video.duration.value >= .50 && !quartiles[1]) {
                    quartiles[1] = true;
                    tracker.track(VastTrackingEvent.midpoint);
                }
                if (video.timeMillisec.value / video.duration.value >= .25 && !quartiles[0]) {
                    quartiles[0] = true;
                    tracker.track(VastTrackingEvent.firstQuartile);
                }
            };
            var trackEnd = function () {
                if (!quartiles[3]) {
                    quartiles[3] = true;
                    tracker.track(VastTrackingEvent.complete);
                }
            };
            var trackClick = function () {
                tracker.track(VastTrackingEvent.click);
            };
            video.onplay.addObserver(trackStart);
            video.onpause.addObserver(trackPause);
            video.timeMillisec.addObserver(trackQuartiles);
            video.onend.addObserver(trackEnd);
            video.volume.addObserver(trackMute);
            video.onclick.addObserver(trackClick);
            adController.fullscreen.addObserver(trackFullScreen);
        };
        return VastAdaptor;
    }(bnt.BaseVideoRenderer));
    bnt.VastAdaptor = VastAdaptor;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var VideoRenderer = (function (_super) {
        __extends(VideoRenderer, _super);
        function VideoRenderer(video) {
            return _super.call(this, video) || this;
        }
        VideoRenderer.prototype.preloadAssets = function () {
            this.videoElement = document.createElement('video');
            this.videoElement.setAttribute('webkit-playsinline', 'true');
            this.videoElement.setAttribute('playsinline', 'true');
            this.coverElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.coverElement);
            this.containerElement = this.htmlElement = document.createElement("div");
            this.domElementReady.update(undefined);
            this.loadVideoSrc();
            this.loadCoverSrc();
        };
        VideoRenderer.prototype.populateElements = function (target) {
            this.htmlElement.appendChild(this.videoElement);
            this.htmlElement.appendChild(this.coverElement);
            target.appendChild(this.containerElement);
        };
        VideoRenderer.prototype.elementDestroyImpl = function () {
            this.containerElement && this.containerElement.parentNode && this.containerElement.parentNode.removeChild(this.containerElement);
            return bnt.Promise.fulfilledWith(null).future;
        };
        VideoRenderer = __decorate([
            bnt.Mixin(bnt.WithPan),
            bnt.RendererOf(bnt.Video),
            __metadata("design:paramtypes", [bnt.Video])
        ], VideoRenderer);
        return VideoRenderer;
    }(bnt.BaseVideoRenderer));
    bnt.VideoRenderer = VideoRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var GroupRenderer = (function (_super) {
        __extends(GroupRenderer, _super);
        function GroupRenderer(group) {
            var _this = _super.call(this, group) || this;
            _this.group = group;
            return _this;
        }
        GroupRenderer.prototype.initImpl = function () {
            var _this = this;
            this.group.eos.forEach(function (eos, index) {
                eos.initZIndex(_this.group.eos.length - index);
                bnt.ElementRendererRegistry.rendererFor(eos.element).init();
            });
        };
        GroupRenderer.prototype.loadImpl = function () {
            var futures = this.group.eos.map(function (eos) {
                return bnt.ElementRendererRegistry.rendererFor(eos.element).load();
            });
            return bnt.Promise.forAll(futures);
        };
        GroupRenderer.prototype.elementRenderImpl = function (target) {
            var _this = this;
            this.divElement = document.createElement('div');
            this.domElementReady.update(undefined);
            var futures = this.group.eos.map(function (eos) {
                return bnt.ElementRendererRegistry.rendererFor(eos.element).render(_this.divElement);
            });
            return bnt.Promise.forAll(futures).map(function () {
                return _this.divElement;
            });
        };
        GroupRenderer.prototype.elementDestroyImpl = function () {
            var _this = this;
            this.divElement && this.divElement.parentNode && this.divElement.parentNode.removeChild(this.divElement);
            var futures = this.group.eos.map(function (eos) {
                return bnt.ElementRendererRegistry.rendererFor(eos.element).destroy();
            });
            return bnt.Promise.forAll(futures).map(function () {
                return _this.divElement;
            });
        };
        GroupRenderer.prototype.configureForScreen = function (screen, eos) {
            _super.prototype.configureForScreen.call(this, screen, eos);
            this.element.eos.forEach(function (e) { return bnt.ElementRendererRegistry.rendererFor(e.element).configureForScreen(screen, e); });
        };
        GroupRenderer.prototype.screenShowing = function (animation) {
            _super.prototype.screenShowing.call(this, animation);
            this.element.eos.map(function (e) { return bnt.ElementRendererRegistry.rendererFor(e.element).screenShowing(animation); });
        };
        GroupRenderer.prototype.screenHiding = function (animation) {
            _super.prototype.screenHiding.call(this, animation);
            this.element.eos.map(function (e) { return bnt.ElementRendererRegistry.rendererFor(e.element).screenHiding(animation); });
        };
        GroupRenderer.prototype.show = function (animated) {
            this.element.forEachEos(function (e) { return bnt.ElementRendererRegistry.rendererFor(e.element).show(false); });
            return _super.prototype.show.call(this, animated);
        };
        GroupRenderer.prototype.hide = function (animated) {
            this.element.forEachEos(function (e) { return bnt.ElementRendererRegistry.rendererFor(e.element).hide(false); });
            return _super.prototype.hide.call(this, animated);
        };
        GroupRenderer.prototype.doShowAnimation = function (animated) {
            var a = _super.prototype.doShowAnimation.call(this, animated);
            var animations = this.element.eos
                .map(function (e) {
                return [e, bnt.ElementRendererRegistry.rendererFor(e.element)];
            })
                .filter(function (_a) {
                var _b = __read(_a, 2), e = _b[0], r = _b[1];
                return r.screenVisible && e.element.visible.value;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), e = _b[0], r = _b[1];
                return r.doShowAnimation(!!r.lastEosConfig.onShow.name);
            });
            a = new bnt.CompoundAnimation(__spread([a], animations));
            return a;
        };
        GroupRenderer.prototype.doHideAnimation = function (animated) {
            var a = _super.prototype.doHideAnimation.call(this, animated);
            var animations = this.element.eos
                .map(function (e) {
                return [e, bnt.ElementRendererRegistry.rendererFor(e.element)];
            })
                .filter(function (_a) {
                var _b = __read(_a, 2), e = _b[0], r = _b[1];
                return r.screenVisible && e.element.visible.value;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), e = _b[0], r = _b[1];
                return r.doHideAnimation(!!r.lastEosConfig.onHide.name);
            });
            a = new bnt.CompoundAnimation(__spread([a], animations));
            return a;
        };
        GroupRenderer.prototype.applyScreenConfig = function (state, config) {
            _super.prototype.applyScreenConfig.call(this, state, config);
            this.group.eos.forEach(function (eos) {
                var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                var eosConfig = eos.getConfig(state);
                renderer.applyScreenConfig(state, eosConfig);
            });
        };
        GroupRenderer.prototype.applyElementConfig = function (config) {
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            if (this.divElement) {
                bnt.style(this.divElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height)
                });
            }
            var futures = this.group.eos.map(function (eos) {
                var renderer = bnt.ElementRendererRegistry.rendererFor(eos.element);
                var config = eos.element.getConfig(bnt.get(bnt.State));
                return renderer.applyElementConfig(config);
            });
            return bnt.Promise.forAll(futures);
        };
        GroupRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.divElement, 'click', this.group.onclick);
            this.registerFor(this.divElement, 'mouseenter', this.group.onmouseenter);
            this.registerFor(this.divElement, 'mouseleave', this.group.onmouseleave);
        };
        GroupRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.divElement, 'click');
            this.unregisterFor(this.divElement, 'mouseenter');
            this.unregisterFor(this.divElement, 'mouseleave');
        };
        GroupRenderer = __decorate([
            bnt.RendererOf(bnt.Group),
            __metadata("design:paramtypes", [bnt.Group])
        ], GroupRenderer);
        return GroupRenderer;
    }(bnt.ElementRenderer));
    bnt.GroupRenderer = GroupRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var PositionHelper = (function () {
        function PositionHelper() {
        }
        PositionHelper.GetAbsolutePosition = function (container, eos, state) {
            var fn = function (container) {
                var e_12, _a;
                try {
                    for (var _b = __values(container.eos), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var localEos = _c.value;
                        if (localEos == eos) {
                            var config = eos.getConfig(state);
                            return { x: config.x, y: config.y };
                        }
                        if (localEos.element instanceof bnt.Group) {
                            var position = fn(localEos.element);
                            if (position != null) {
                                var config = localEos.getConfig(state);
                                return {
                                    x: position.x + config.x,
                                    y: position.y + config.y
                                };
                            }
                        }
                    }
                }
                catch (e_12_1) { e_12 = { error: e_12_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_12) throw e_12.error; }
                }
            };
            return fn(container) || { x: 0, y: 0 };
        };
        return PositionHelper;
    }());
    bnt.PositionHelper = PositionHelper;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ResizeController = (function () {
        function ResizeController() {
            this.resize = new bnt.Observable();
        }
        ResizeController.prototype.setAutomatic = function () {
            this.changeStrategy(new bnt.WindowListenerResizeStrategy());
        };
        ResizeController.prototype.setManual = function () {
            this.changeStrategy(new bnt.ManualResizeStrategy());
        };
        ResizeController.prototype.changeStrategy = function (strategy) {
            if (this.strategy)
                this.strategy.dispose();
            this.strategy = strategy;
            this.strategy.init(this);
        };
        ResizeController.prototype.init = function () {
            var _this = this;
            if (!this.strategy) {
                this.strategy = new bnt.ResizeStrategy.defaultStrategy();
            }
            this.strategy.init(this);
            this.resize.addObserver(function (dim) { return _this.previous = dim; });
        };
        ResizeController.prototype.start = function () {
            this.strategy.start();
        };
        ResizeController = __decorate([
            bnt.Singleton
        ], ResizeController);
        return ResizeController;
    }());
    bnt.ResizeController = ResizeController;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ResizeStrategy = (function () {
        function ResizeStrategy() {
        }
        ResizeStrategy.prototype.dispose = function () { };
        return ResizeStrategy;
    }());
    bnt.ResizeStrategy = ResizeStrategy;
    var WindowListenerResizeStrategy = (function (_super) {
        __extends(WindowListenerResizeStrategy, _super);
        function WindowListenerResizeStrategy() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.useOuterDimensions = null;
            _this.resizeHandler = function () {
                var dim = {
                    width: Math.max(document.documentElement.clientWidth, (_this.useOuterDimensions ? _this.useOuterDimensions.width : window.innerWidth) || 0),
                    height: Math.max(document.documentElement.clientHeight, (_this.useOuterDimensions ? _this.useOuterDimensions.height : window.innerHeight) || 0)
                };
                _this.controller.resize.update(dim);
            };
            return _this;
        }
        WindowListenerResizeStrategy.prototype.init = function (controller) {
            bnt.set(WindowListenerResizeStrategy, this);
            this.controller = controller;
            if (window) {
                window.addEventListener('resize', this.resizeHandler);
            }
            else {
                bnt.logger.error('This strategy cannot be applied without a <window> object');
            }
        };
        WindowListenerResizeStrategy.prototype.start = function () {
            this.resizeHandler();
        };
        WindowListenerResizeStrategy.prototype.dispose = function () {
            window.removeEventListener('resize', this.resizeHandler);
        };
        return WindowListenerResizeStrategy;
    }(ResizeStrategy));
    bnt.WindowListenerResizeStrategy = WindowListenerResizeStrategy;
    ResizeStrategy.defaultStrategy = WindowListenerResizeStrategy;
    var ManualResizeStrategy = (function (_super) {
        __extends(ManualResizeStrategy, _super);
        function ManualResizeStrategy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ManualResizeStrategy.prototype.init = function (controller) {
            this.controller = controller;
            bnt.set(ManualResizeStrategy, this);
            bnt.logger.debug('Ad resize is handled by the container.');
        };
        ManualResizeStrategy.prototype.start = function () {
        };
        ManualResizeStrategy.prototype.update = function (dimension) {
            this.controller.resize.update(dimension);
        };
        return ManualResizeStrategy;
    }(ResizeStrategy));
    bnt.ManualResizeStrategy = ManualResizeStrategy;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var PixelType;
    (function (PixelType) {
        PixelType[PixelType["js"] = 0] = "js";
        PixelType[PixelType["url"] = 1] = "url";
        PixelType[PixelType["script"] = 2] = "script";
        PixelType[PixelType["img"] = 3] = "img";
    })(PixelType || (PixelType = {}));
    var TrackingUnit = (function () {
        function TrackingUnit(config) {
            var _this = this;
            this.config = config;
            this.started = false;
            this.quartiles = [false, false, false, false, false];
            this.teadsTracking = new bnt.TeadsTracking(config);
            bnt.TeadsPlayerAddons.apiProxy.addObserver(function (apiProxy) {
                if (apiProxy) {
                    apiProxy.getContextData().map(function (contextData) {
                        _this.teadsTracking.setContext(contextData && contextData.tracking);
                    });
                    apiProxy.getTeadsInfo().map(function (cids) {
                        _this.teadsTracking.setTeadsInfo(cids);
                    });
                }
                else {
                    _this.teadsTracking.setContext(null);
                    _this.teadsTracking.setTeadsInfo(null);
                }
            });
            bnt.logger.debug(config);
        }
        TrackingUnit.prototype.track = function (events) {
            var _this = this;
            Object.keys(events).map(function (key) {
                var event;
                if (typeof events[key].type === 'string') {
                    event = events[key];
                }
                else {
                    event = {
                        listener: events[key],
                        type: 'info'
                    };
                }
                event.listener.addEventListener(function () {
                    _this.trackEvent(key, event.type);
                });
            });
        };
        TrackingUnit.prototype.trackPixel = function (pixel, type) {
            if (!pixel)
                return;
            type = (type || 'url');
            pixel = pixel.trim();
            switch (PixelType[type]) {
                case PixelType.url:
                    this.urlRequest(bnt.TeadsTracking.replaceTeadsMacro(pixel));
                    break;
                case PixelType.js:
                    bnt.TrackingUnit.trackingScript(pixel);
                    break;
                case PixelType.script:
                    var scriptData = /<script.*?(src=\"(.+?)\")*.*?>((.|\n|\r|\r\n)*)<\/script>/mgi.exec(pixel);
                    var scriptUrl = scriptData[2];
                    var body = scriptData[3];
                    bnt.TrackingUnit.trackingScript(scriptUrl, body);
                    break;
                case PixelType.img:
                    var imgSrc = /<img.+?src=[\"'](.+?)[\"'].*?>/.exec(pixel)[1];
                    this.urlRequest(imgSrc);
                    break;
            }
        };
        TrackingUnit.prototype.trackEvent = function (name, value) {
            this.trackTeadsEvent(name, value);
        };
        TrackingUnit.prototype.trackTeadsEvent = function (name, value) {
            this.teadsTracking.send(value ? name + "-" + value : name);
        };
        TrackingUnit.prototype.trackVideoQuartiles = function (video, videoName) {
            var videoTracker = function (video, name, tracker) {
                var v = video;
                var trk = tracker;
                var vName = name;
                var onstart = false;
                var onfirstq = false;
                var onmidpoint = false;
                var onthirdq = false;
                var onend = false;
                var updateQuartiles = function () {
                    if (v.timeMillisec.value <= 0 || v.duration.value <= 0)
                        return;
                    if (v.timeMillisec.value / v.duration.value >= .75 && !onthirdq) {
                        onthirdq = true;
                        trk.trackEvent('+#' + videoName + ': thirdquartile');
                    }
                    if (v.timeMillisec.value / v.duration.value >= .50 && !onmidpoint) {
                        onmidpoint = true;
                        trk.trackEvent('+#' + vName + ': midpoint');
                    }
                    if (v.timeMillisec.value / v.duration.value >= .25 && !onfirstq) {
                        onfirstq = true;
                        trk.trackEvent('+#' + vName + ': firstquartile');
                    }
                    if (!onstart) {
                        onstart = true;
                        trk.trackEvent('+#' + vName + ': start');
                    }
                };
                v.timeMillisec.addObserver(updateQuartiles);
                v.onend.addObserver(function () {
                    if (!onend) {
                        onend = true;
                        trk.trackEvent('+#' + videoName + ' complete');
                    }
                });
            };
            videoTracker(video, videoName, this);
        };
        TrackingUnit.prototype.trackCreative = function (creative) {
            var _this = this;
            this.trackEvent('load');
            this.creative = creative;
            creative.getController().onclickthru.addObserver(function () { return _this.trackEvent('completionLayer'); });
            creative.getController().onstart.addObserver(function () { return _this.trackCreativeStart(); });
            creative.getController().desiredExpandState.addObserver(function (state) { return _this.trackCreativeExpand(state); });
            creative.timeMillisec.addObserver(function () { return _this.trackCreativeQuartiles(); });
            creative.onend.addObserver(function () { return _this.trackCreativeEnd(); });
            creative.onscreenchange.addObserver(function (_a) {
                var from = _a.from, to = _a.to;
                return _this.handlerScreenChange(from, to);
            });
        };
        TrackingUnit.prototype.trackCreativeStart = function () {
            this.trackEvent('show');
            this.started = true;
        };
        TrackingUnit.prototype.handlerScreenChange = function (fromScreen, toScreen) {
            if (!this.started)
                return;
            toScreen && this.trackEvent('+#Screen changed to ' + toScreen.name);
        };
        TrackingUnit.prototype.trackCreativeExpand = function (state) {
            var evt = state.expanded ? '+Creative expand' : '+Creative collapse';
            this.trackEvent(evt);
        };
        TrackingUnit.prototype.trackCreativeQuartiles = function () {
            if (this.creative.onmainscreen.value) {
                var time = this.creative.timeMillisec.value;
                var duration = this.creative.duration.value;
                if (time <= 0 || duration <= 0)
                    return;
                var percent_1 = time / duration;
                if (percent_1 >= .75 && !this.quartiles[3]) {
                    this.quartiles[3] = true;
                    this.trackEvent('AdVideoThirdQuartile');
                }
                if (percent_1 >= .50 && !this.quartiles[2]) {
                    this.quartiles[2] = true;
                    this.trackEvent('AdVideoMidpoint');
                }
                if (percent_1 >= .25 && !this.quartiles[1]) {
                    this.quartiles[1] = true;
                    this.trackEvent('AdVideoFirstQuartile');
                }
                if (!this.quartiles[0]) {
                    this.quartiles[0] = true;
                    this.trackEvent('AdVideoStart');
                }
            }
        };
        TrackingUnit.prototype.trackCreativeEnd = function () {
            if (this.creative.onmainscreen.value) {
                if (!this.quartiles[4]) {
                    this.quartiles[4] = true;
                    this.trackEvent('AdVideoComplete');
                }
            }
        };
        Object.defineProperty(TrackingUnit.prototype, "canTrack", {
            get: function () {
                return this.config.uid && this.config.cid;
            },
            enumerable: true,
            configurable: true
        });
        TrackingUnit.prototype.urlRequest = function (url) {
            url = bnt.net.cacheBuster(url);
            if (this.canTrack) {
                return bnt.net.triggerPixel(url);
            }
            else {
                return bnt.Promise.fulfilledWith(true).future;
            }
        };
        TrackingUnit.trackingScript = function (scriptUrl, scriptBody) {
            if (scriptBody === void 0) { scriptBody = ""; }
            var getSrcAttribute = function (scriptUrl) { return scriptUrl ? ' src="' + scriptUrl + '" ' : ''; };
            var frame = document.createElement("IFRAME");
            if (/iPad;/g.test(navigator.userAgent)) {
                frame.contentDocument.writeln('<scr' + 'ipt type="text/javascript" ' + getSrcAttribute(scriptUrl) + '>' + scriptBody + '</scr' + 'ipt>');
            }
            else {
                frame.src = 'javascript:document.innerHTML="'
                    + '<scr' + 'ipt type=\'text/javascript\' '
                    + getSrcAttribute(scriptUrl).replace(new RegExp('"', 'g'), '\\"')
                    + '>'
                    + scriptBody.replace(new RegExp('"', 'g'), '\\"')
                    + '</scr' + 'ipt>"';
            }
            document.body.appendChild(frame);
        };
        __decorate([
            bnt.Action({
                actionOf: TrackingUnit
            }, "track-event-string"),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String, Object]),
            __metadata("design:returntype", void 0)
        ], TrackingUnit.prototype, "trackEvent", null);
        return TrackingUnit;
    }());
    bnt.TrackingUnit = TrackingUnit;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var TeadsTracking = (function () {
        function TeadsTracking(config, evtNamePrevix) {
            if (evtNamePrevix === void 0) { evtNamePrevix = 'studio_'; }
            var _this = this;
            this.config = config;
            this.evtNamePrevix = evtNamePrevix;
            this.initialized = new bnt.ObservableValue(undefined);
            this.prContext = new bnt.Promise();
            this.prCampaignIds = new bnt.Promise();
            bnt.Promise.forAll([this.prContext, this.prCampaignIds].map(function (pr) { return pr.future; })).map(function () {
                _this.setupTeadsInfo();
                _this.initialized.update(true);
            });
        }
        TeadsTracking.prototype.setContext = function (teadsContext) {
            TeadsTracking.teadsContext = teadsContext;
            this.prContext.succeed(true);
        };
        TeadsTracking.prototype.setTeadsInfo = function (campaignIds) {
            TeadsTracking.teadsInfo = campaignIds;
            this.prCampaignIds.succeed(true);
        };
        TeadsTracking.prototype.send = function (action) {
            var _this = this;
            if (!this.initialized.value) {
                this.initialized.addObserver(function () { return _this.send(action); });
                return;
            }
            var url;
            try {
                url = this.buildUrl(action);
            }
            catch (er) {
                bnt.logger.error('Something went wrong while building the pixel url', action, TeadsTracking.teadsContext, er);
                return;
            }
            if (this.isTrackingAllowed()) {
                bnt.net.triggerPixel(url).map(function (success) {
                    if (!success)
                        bnt.logger.warn("Teads pixel failled: " + url);
                });
            }
            else {
                bnt.logger.debug('Teads pixel:', url);
            }
        };
        TeadsTracking.prototype.isTrackingAllowed = function () {
            return !!(this.config.cid && this.config.uid);
        };
        TeadsTracking.prototype.buildUrl = function (action) {
            var creativeId = (TeadsTracking.teadsContext && TeadsTracking.teadsContext.studio_cid && TeadsTracking.teadsContext.studio_cid.toString()) || (this.config && this.config.cid);
            var creativeState = bnt.get(bnt.State);
            var trackedInfo = {
                action: this.evtNamePrevix + action,
                studio_cid: creativeId,
                referer: document.referrer,
                ts: Date.now()
            };
            if (creativeState) {
                trackedInfo.studio_canvas = creativeState.canvas.config.name,
                    trackedInfo.studio_segment = creativeState.segment.config.name;
            }
            this.addTeadsInfo(trackedInfo);
            var endpoint = TeadsTracking.ENDPOINT;
            var protocol = TeadsTracking.PROTOCOL;
            return protocol + "//" + endpoint + "/track?" + bnt.net.serializeObjectAsURI(trackedInfo);
        };
        TeadsTracking.prototype.addTeadsInfo = function (trackedInfo) {
            TeadsTracking.teadsTrackInfo.sid && (trackedInfo.sid = TeadsTracking.teadsTrackInfo.sid);
            TeadsTracking.teadsTrackInfo.gid && (trackedInfo.gid = TeadsTracking.teadsTrackInfo.gid);
            TeadsTracking.teadsTrackInfo.cid && (trackedInfo.cid = TeadsTracking.teadsTrackInfo.cid);
            TeadsTracking.teadsTrackInfo.pid && (trackedInfo.pid = TeadsTracking.teadsTrackInfo.pid);
            TeadsTracking.teadsTrackInfo.env && (trackedInfo.env = TeadsTracking.teadsTrackInfo.env);
            TeadsTracking.teadsTrackInfo.slot && (trackedInfo.slot = TeadsTracking.teadsTrackInfo.slot);
        };
        TeadsTracking.getTeadsTrackedInfo = function (contextName, apiName) {
            if (TeadsTracking.teadsContext && TeadsTracking.teadsContext[contextName]) {
                return TeadsTracking.teadsContext[contextName];
            }
            if (apiName && TeadsTracking.teadsInfo && TeadsTracking.teadsInfo[apiName]) {
                return TeadsTracking.teadsInfo[apiName];
            }
        };
        TeadsTracking.prototype.setupTeadsInfo = function () {
            TeadsTracking.teadsTrackInfo.sid = TeadsTracking.getTeadsTrackedInfo('sid', 'connectionId');
            TeadsTracking.teadsTrackInfo.gid = TeadsTracking.getTeadsTrackedInfo('gid', 'insertionId');
            TeadsTracking.teadsTrackInfo.cid = TeadsTracking.getTeadsTrackedInfo('cid', 'creativeId');
            TeadsTracking.teadsTrackInfo.pid = TeadsTracking.getTeadsTrackedInfo('pid', 'placementId');
            TeadsTracking.teadsTrackInfo.env = TeadsTracking.getTeadsTrackedInfo('env', 'environment');
            TeadsTracking.teadsTrackInfo.slot = TeadsTracking.getTeadsTrackedInfo('slot', 'slotType');
            TeadsTracking.teadsTrackInfo.wname = TeadsTracking.getTeadsTrackedInfo('wname');
            TeadsTracking.teadsTrackInfo.wid = TeadsTracking.getTeadsTrackedInfo('wid');
            TeadsTracking.teadsTrackInfo.idfa = TeadsTracking.getTeadsTrackedInfo('idfa');
            TeadsTracking.teadsTrackInfo.auctid = TeadsTracking.getTeadsTrackedInfo('auctid');
        };
        TeadsTracking.replaceTeadsMacro = function (url) {
            this.teadsTrackInfo.cid && (url = url.replace(/\[CID\]/i, TeadsTracking.teadsTrackInfo.cid.toString()));
            this.teadsTrackInfo.gid && (url = url.replace(/\[GID\]/i, TeadsTracking.teadsTrackInfo.gid.toString()));
            this.teadsTrackInfo.pid && (url = url.replace(/\[PID\]/i, TeadsTracking.teadsTrackInfo.pid.toString()));
            this.teadsTrackInfo.wname && (url = url.replace(/\[WNAME\]/i, TeadsTracking.teadsTrackInfo.wname));
            this.teadsTrackInfo.wid && (url = url.replace(/\[WID\]/i, TeadsTracking.teadsTrackInfo.wid));
            this.teadsTrackInfo.idfa && (url = url.replace(/\[IDFA\]/i, TeadsTracking.teadsTrackInfo.idfa));
            this.teadsTrackInfo.auctid && (url = url.replace(/\[AUCTID\]/i, TeadsTracking.teadsTrackInfo.auctid.toString()));
            return url;
        };
        TeadsTracking.ENDPOINT = 'studio-t.teads.tv';
        TeadsTracking.PROTOCOL = 'https:';
        TeadsTracking.teadsTrackInfo = {
            sid: undefined,
            endpoint: "",
            gid: undefined,
            cid: undefined,
            pid: undefined,
            env: "",
            slot: "",
            studio_cid: undefined,
            wid: "",
            wname: "",
            idfa: "",
            auctid: undefined
        };
        return TeadsTracking;
    }());
    bnt.TeadsTracking = TeadsTracking;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var net;
    (function (net) {
        function downloadScript(src, sameSandbox) {
            if (sameSandbox === void 0) { sameSandbox = true; }
            if (sameSandbox) {
                return createScript(src);
            }
            else {
                return createNewSandbox().flatMap(function (newSandboxWin) { return createScript(src, newSandboxWin.document.documentElement); });
            }
        }
        net.downloadScript = downloadScript;
        function createNewSandbox() {
            var newSandbox = document.createElement('iframe');
            newSandbox.width = "0px";
            newSandbox.height = "0px";
            var pr = new bnt.Promise();
            newSandbox.onload = function () {
                pr.succeed(newSandbox.contentWindow);
            };
            document.body.appendChild(newSandbox);
            return pr.future;
        }
        function createScript(src, scriptContainer) {
            if (!scriptContainer)
                scriptContainer = document.documentElement;
            var scriptElement = document.createElement('script');
            var ret = new bnt.Promise();
            scriptElement.addEventListener('load', function () {
                ret.succeed(scriptElement.ownerDocument.defaultView || scriptElement.ownerDocument.parentWindow);
            });
            scriptElement.addEventListener('error', function () {
                ret.fail(null);
            });
            scriptElement.setAttribute('src', src);
            scriptContainer.appendChild(scriptElement);
            return ret.future;
        }
        function serializeObjectAsURI(obj) {
            var parts = [];
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    parts.push(encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]));
                }
            }
            return parts.join("&");
        }
        net.serializeObjectAsURI = serializeObjectAsURI;
        function triggerPixel(url) {
            var p = new bnt.Promise();
            var image = new Image();
            image.onload = function () { return !p.fulfilled && p.succeed(true); };
            image.onerror = function () { return !p.fulfilled && p.succeed(false); };
            image.src = url;
            return p.future;
        }
        net.triggerPixel = triggerPixel;
        function cacheBuster(url) {
            var regPatt = /(\[timestamp\]|\[CACHEBUSTER\]|\[CACHEBUSTING\]|\%\%RANDOM\%\%|\$\{CACHEBUSTER\})/gi;
            return url.replace(regPatt, String(Date.now()));
        }
        net.cacheBuster = cacheBuster;
    })(net = bnt.net || (bnt.net = {}));
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var net;
    (function (net) {
        var Monitor = (function () {
            function Monitor() {
                var _this = this;
                this.totalbytes = new bnt.ObservableValue(0);
                this.externalAssetsLoaded = 0;
                this.htmlElementLoaded = function (e) {
                    var el = e.currentTarget;
                    var elSrc = el.src;
                    var assetId = Object.keys(bnt.LIBRARY).filter(function (assetId) {
                        var same = bnt.LIBRARY[assetId].link.replace(/https|http/, '') == elSrc.replace(/https|http/, '');
                        return same;
                    })[0];
                    if (assetId) {
                        var size = bnt.LIBRARY[assetId].size;
                        !isNaN(size) && _this.appendLoadedBytes(size);
                    }
                    else {
                        bnt.logger.info('RESOURCE NOT IN LIBRARY', elSrc, el);
                        _this.externalAssetsLoaded++;
                    }
                };
            }
            Monitor.prototype.appendLoadedBytes = function (bytes) {
                this.totalbytes.update(this.totalbytes.value + bytes);
            };
            Monitor.prototype.monitorHtmlElementLoad = function (htmlElement) {
                htmlElement.addEventListener('load', this.htmlElementLoaded);
            };
            return Monitor;
        }());
        net.Monitor = Monitor;
    })(net = bnt.net || (bnt.net = {}));
})(bnt || (bnt = {}));
if (typeof module != 'undefined')
    module.exports = bnt;
var bnt;
(function (bnt) {
    function cloneContainerContents(originalContainer, clonedContainer) {
        var e2e = new bnt.Map(new bnt.ElementHash());
        if (originalContainer instanceof bnt.Element &&
            clonedContainer instanceof bnt.Element) {
            e2e.put(originalContainer, clonedContainer);
        }
        originalContainer.forEachEos(function (eos) {
            var clonedEos = eos.clone();
            e2e.put(eos.element, clonedEos.element);
            clonedContainer.addElementOnScreenAtEnd(clonedEos);
        });
        var fn = function (container) {
            container.forEachEos(function (eos) {
                if (eos.element instanceof bnt.Group)
                    fn(eos.element);
                eos.interactions.forEach(function (int) {
                    int.target = updateReference(int.target, e2e);
                });
                if (eos.element instanceof bnt.Subtitle) {
                    var states = eos.element.getConfigsCopy().mapToArray(function (k) { return k; });
                    states.forEach(function (state) {
                        var config = eos.element.getConfig(state);
                        config.targetVideo = updateReference(config.targetVideo, e2e);
                    });
                }
            });
        };
        fn(clonedContainer);
    }
    bnt.cloneContainerContents = cloneContainerContents;
    function updateReference(currentRef, refMap) {
        if (currentRef && refMap.contains(currentRef)) {
            return refMap.get(currentRef);
        }
        else {
            return null;
        }
    }
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var CloseButtonRenderer = (function (_super) {
        __extends(CloseButtonRenderer, _super);
        function CloseButtonRenderer(closeButton) {
            var _this = _super.call(this, closeButton) || this;
            _this.closeButton = closeButton;
            return _this;
        }
        CloseButtonRenderer.prototype.elementRenderImpl = function (target) {
            this.closeButtonElement = document.createElement('div');
            this.closeButtonElement.innerHTML = "X";
            this.domElementReady.update(undefined);
            return bnt.Promise.fulfilledWith(this.closeButtonElement).future;
        };
        CloseButtonRenderer.prototype.elementDestroyImpl = function () {
            this.closeButtonElement && this.closeButtonElement.parentNode && this.closeButtonElement.parentNode.removeChild(this.closeButtonElement);
            return bnt.Promise.fulfilledWith(this.closeButtonElement).future;
        };
        CloseButtonRenderer.prototype.applyElementConfig = function (config) {
            if (this.closeButtonElement) {
                bnt.style(this.closeButtonElement, {
                    width: bnt.px(config.width),
                    height: bnt.px(config.height)
                });
            }
            return bnt.Promise.fulfilledWith(null).future;
        };
        CloseButtonRenderer.prototype.registerEventListenersImpl = function () {
            this.registerFor(this.closeButtonElement, 'click', this.closeButton.onclick, true);
            this.registerFor(this.closeButtonElement, 'mouseenter', this.closeButton.onmouseenter);
            this.registerFor(this.closeButtonElement, 'mouseleave', this.closeButton.onmouseleave);
        };
        CloseButtonRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.closeButtonElement, 'click');
            this.unregisterFor(this.closeButtonElement, 'mouseenter');
            this.unregisterFor(this.closeButtonElement, 'mouseleave');
        };
        CloseButtonRenderer = __decorate([
            bnt.RendererOf(bnt.CloseButton),
            __metadata("design:paramtypes", [bnt.CloseButton])
        ], CloseButtonRenderer);
        return CloseButtonRenderer;
    }(bnt.ElementRenderer));
    bnt.CloseButtonRenderer = CloseButtonRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var ImageRenderer = (function (_super) {
        __extends(ImageRenderer, _super);
        function ImageRenderer(image) {
            var _this = _super.call(this, image) || this;
            _this.image = image;
            return _this;
        }
        ImageRenderer.prototype.loadImpl = function () {
            var state = bnt.get(bnt.State);
            var config = this.image.getConfig(state);
            this.imageElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.imageElement);
            this.hoverImageElement = document.createElement('img');
            bnt.get(bnt.net.Monitor).monitorHtmlElementLoad(this.hoverImageElement);
            this.setSrc(config);
            return bnt.Promise.fulfilledWith(null).future;
        };
        ImageRenderer.prototype.setSrc = function (config) {
            var bntSrc = bnt.getSrc(config.src);
            var bntSrcHover = bnt.getSrc(config.hoverImage);
            if (this.imageElement) {
                if (this.imageElement.src != bntSrc) {
                    this.imageElement.src = bntSrc;
                    if (bntSrc) {
                        this.imageElement.src = bntSrc;
                    }
                    else {
                        this.imageElement.removeAttribute('src');
                    }
                }
            }
            if (this.hoverImageElement) {
                if (this.hoverImageElement.src != bntSrcHover) {
                    if (bntSrcHover) {
                        this.hoverImageElement.src = bntSrcHover;
                    }
                    else {
                        this.hoverImageElement.removeAttribute('src');
                    }
                }
            }
        };
        ImageRenderer.prototype.show = function (animated) {
            var _this = this;
            this.deactivateHover();
            var a = _super.prototype.show.call(this, animated);
            a.onComplete
                .map(function () {
                _this.lastConfig = _this.element.getConfig(_this.state());
                if (_this.imageElementWithPan) {
                    _this.imageElementWithPan.registerListeners();
                    _this.imageElementWithPan.updateConfig(_this.lastConfig);
                }
                if (_this.hoverImageElementWithPan) {
                    _this.hoverImageElementWithPan.registerListeners();
                    _this.hoverImageElementWithPan.updateConfig(_this.lastConfig);
                }
            });
            return a;
        };
        ImageRenderer.prototype.hide = function (animated) {
            var _this = this;
            var a = _super.prototype.hide.call(this, animated);
            a.onComplete
                .map(function () {
                if (_this.imageElementWithPan)
                    _this.imageElementWithPan.unregisterListeners();
                if (_this.hoverImageElementWithPan)
                    _this.hoverImageElementWithPan.unregisterListeners();
            });
            return a;
        };
        ImageRenderer.prototype.elementRenderImpl = function (target) {
            var _this = this;
            this.containerElement = this.htmlElement = document.createElement('div');
            this.htmlElement.appendChild(this.imageElement);
            this.htmlElement.appendChild(this.hoverImageElement);
            this.domElementReady.update(undefined);
            this.imageElementWithPan = new bnt.ElementWithPan({
                container: {
                    element: this.containerElement,
                    width: function (c) { return c.width; },
                    height: function (c) { return c.height; }
                },
                element: {
                    element: this.imageElement,
                    width: function (c) { return c.imageWidth; },
                    height: function (c) { return c.imageHeight; }
                }
            });
            this.imageElementWithPan.onSizesChange.addObserver(function (sizes) {
                if (!sizes || !_this.imageElement)
                    return;
                bnt.style(_this.imageElement, {
                    width: bnt.px(sizes.w),
                    height: bnt.px(sizes.h),
                    position: 'absolute',
                    left: bnt.px(sizes.x),
                    top: bnt.px(sizes.y),
                    webkitUserSelect: "none",
                    transform: "translateZ(0)"
                });
            });
            this.hoverImageElementWithPan = new bnt.ElementWithPan({
                container: {
                    element: this.containerElement,
                    width: function (c) { return c.width; },
                    height: function (c) { return c.height; }
                },
                element: {
                    element: this.hoverImageElement,
                    width: function (c) { return c.imageWidth; },
                    height: function (c) { return c.imageHeight; }
                }
            });
            this.hoverImageElementWithPan.disable();
            this.hoverImageElementWithPan.preventAutoEnable(true);
            this.hoverImageElementWithPan.onSizesChange.addObserver(function (sizes) {
                if (!sizes || !_this.hoverImageElement)
                    return;
                bnt.style(_this.hoverImageElement, {
                    width: bnt.px(sizes.w),
                    height: bnt.px(sizes.h),
                    position: 'absolute',
                    left: bnt.px(sizes.x),
                    top: bnt.px(sizes.y),
                    webkitUserSelect: "none",
                    transform: "translateZ(0)"
                });
            });
            return bnt.Promise.fulfilledWith(this.containerElement).future;
        };
        ImageRenderer.prototype.elementDestroyImpl = function () {
            this.imageElement && this.imageElement.parentNode && this.imageElement.parentNode.removeChild(this.imageElement);
            this.hoverImageElement && this.hoverImageElement.parentNode && this.hoverImageElement.parentNode.removeChild(this.hoverImageElement);
            return bnt.Promise.fulfilledWith(this.imageElement).future;
        };
        ImageRenderer.prototype.applyElementConfig = function (config) {
            this.lastConfig = config;
            if (config.visible != this.element.visible.value)
                this.element.visible.update(config.visible);
            this.setSrc(config);
            this.configureSizes(config);
            return bnt.Promise.fulfilledWith(null).future;
        };
        ImageRenderer.prototype.configureSizes = function (config) {
            var width = config.width;
            var height = config.height;
            if (this.containerElement)
                bnt.style(this.containerElement, {
                    width: bnt.px(width),
                    height: bnt.px(height),
                    transform: "rotate(" + config.angle + "deg)",
                    overflow: "hidden",
                    position: "relative"
                });
            if (this.imageElementWithPan) {
                this.imageElementWithPan.updateConfig(config);
            }
            if (this.hoverImageElementWithPan) {
                this.hoverImageElementWithPan.updateConfig(config);
            }
            if (this.hoverImageElement) {
                this.hoverImageElement.hidden = true;
            }
        };
        ImageRenderer.prototype.registerEventListenersImpl = function () {
            var _this = this;
            this.registerFor(this.containerElement, 'click', this.image.onclick, true);
            this.registerFor(this.containerElement, 'mouseenter', this.image.onmouseenter, false, function () {
                _this.activateHover();
                _this.image.onmouseenter.update(undefined);
            }, true);
            this.registerFor(this.containerElement, 'mouseleave', this.image.onmouseleave, false, function () {
                _this.deactivateHover();
                _this.image.onmouseleave.update(undefined);
            }, true);
        };
        ImageRenderer.prototype.deactivateHover = function () {
            if (this.hoverImageElement && this.hoverImageElement.src) {
                this.imageElement.hidden = false;
                this.hoverImageElement.hidden = true;
                this.hoverImageElementWithPan.disable();
                if (this.lastConfig.panActive)
                    this.imageElementWithPan.enable();
                this.hoverImageElementWithPan.forceUpdateLastConfig();
            }
        };
        ImageRenderer.prototype.activateHover = function () {
            if (this.hoverImageElement && this.hoverImageElement.src) {
                this.imageElement.hidden = true;
                this.hoverImageElement.hidden = false;
                if (this.lastConfig.panActive)
                    this.hoverImageElementWithPan.enable();
                this.imageElementWithPan.disable();
                this.hoverImageElementWithPan.forceUpdateLastConfig();
            }
        };
        ImageRenderer.prototype.unregisterEventListenersImpl = function () {
            this.unregisterFor(this.containerElement, 'click');
            this.unregisterFor(this.containerElement, 'mouseenter');
            this.unregisterFor(this.containerElement, 'mouseleave');
        };
        ImageRenderer = __decorate([
            bnt.RendererOf(bnt.Image),
            __metadata("design:paramtypes", [bnt.Image])
        ], ImageRenderer);
        return ImageRenderer;
    }(bnt.ElementRenderer));
    bnt.ImageRenderer = ImageRenderer;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var Ua = (function () {
        function Ua() {
        }
        Ua.MODEL = 'model';
        Ua.NAME = 'name';
        Ua.TYPE = 'type';
        Ua.VENDOR = 'vendor';
        Ua.VERSION = 'version';
        Ua.CONSOLE = 'c';
        Ua.MOBILE = 'm';
        Ua.TABLET = 't';
        Ua.SMARTTV = 'tv';
        Ua.WEARABLE = 'w';
        Ua.DESKTOP = 'd';
        Ua.util = {
            extend: function (regexes, extensions) {
                for (var i in extensions) {
                    if ('browser device os'.indexOf(i) !== -1 && extensions[i].length % 2 === 0) {
                        regexes[i] = extensions[i].concat(regexes[i]);
                    }
                }
                return regexes;
            },
            has: function (str1, str2) {
                if (typeof str1 === 'string') {
                    return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
                }
                else {
                    return false;
                }
            },
            lowerize: function (str) {
                return str.toLowerCase();
            },
            trim: function (str) {
                return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
            }
        };
        Ua.mapper = {
            rgx: function () {
                var result, i = 0, j = 0, k = 0, v = 0, p, q, matches = undefined, match, args = arguments;
                while (i < args.length && !matches) {
                    var regex = args[i], props = args[i + 1];
                    if (typeof result === 'undefined') {
                        result = {};
                        for (p in props) {
                            q = props[p];
                            if (typeof q === 'object') {
                                result[q[0]] = undefined;
                            }
                            else {
                                result[q] = undefined;
                            }
                        }
                    }
                    j = k = 0;
                    while (j < regex.length && !matches) {
                        matches = regex[j++].exec(bnt.Context.getUA());
                        if (!!matches) {
                            for (v = 0; v < props.length; v++) {
                                match = matches[++k];
                                q = props[v];
                                if (typeof q === 'object' && q.length > 0) {
                                    if (q.length == 2) {
                                        if (typeof q[1] == 'function') {
                                            result[q[0]] = q[1].call(this, match);
                                        }
                                        else {
                                            result[q[0]] = q[1];
                                        }
                                    }
                                    else if (q.length == 3) {
                                        if (typeof q[1] === 'function' && !(q[1].exec && q[1].test)) {
                                            result[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                        }
                                        else {
                                            result[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                        }
                                    }
                                    else if (q.length == 4) {
                                        result[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                    }
                                }
                                else {
                                    result[q] = match ? match : undefined;
                                }
                            }
                        }
                    }
                    i += 2;
                }
                return result;
            },
            str: function (str, map) {
                for (var i in map) {
                    if (typeof map[i] === 'object' && map[i].length > 0) {
                        for (var j = 0; j < map[i].length; j++) {
                            if (Ua.util.has(map[i][j], str)) {
                                return (i === '?') ? undefined : i;
                            }
                        }
                    }
                    else if (Ua.util.has(map[i], str)) {
                        return (i === '?') ? undefined : i;
                    }
                }
                return str;
            }
        };
        Ua.maps = {
            browser: {
                oldsafari: {
                    version: {
                        '1.0': '/8',
                        '1.2': '/1',
                        '1.3': '/3',
                        '2.0': '/412',
                        '2.0.2': '/416',
                        '2.0.3': '/417',
                        '2.0.4': '/419',
                        '?': '/'
                    }
                }
            },
            device: {
                amazon: {
                    model: {
                        'Fire Phone': ['SD', 'KF']
                    }
                },
                sprint: {
                    model: {
                        'Evo Shift 4G': '7373KT'
                    },
                    vendor: {
                        'HTC': 'APA',
                        'Sprint': 'Sprint'
                    }
                }
            },
            os: {
                windows: {
                    version: {
                        'ME': '4.90',
                        'NT 3.11': 'NT3.51',
                        'NT 4.0': 'NT4.0',
                        '2000': 'NT 5.0',
                        'XP': ['NT 5.1', 'NT 5.2'],
                        'Vista': 'NT 6.0',
                        '7': 'NT 6.1',
                        '8': 'NT 6.2',
                        '8.1': 'NT 6.3',
                        '10': ['NT 6.4', 'NT 10.0'],
                        'RT': 'ARM'
                    }
                }
            }
        };
        Ua.regexes = {
            browser: [[
                    /(opera\smini)\/([\w\.-]+)/i,
                    /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,
                    /(opera).+version\/([\w\.]+)/i,
                    /(opera)[\/\s]+([\w\.]+)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(opios)[\/\s]+([\w\.]+)/i
                ], [[Ua.NAME, 'Opera Mini'], Ua.VERSION], [
                    /\s(opr)\/([\w\.]+)/i
                ], [[Ua.NAME, 'Opera'], Ua.VERSION], [
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
                    /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
                    /(?:ms|\()(ie)\s([\w\.]+)/i,
                    /(rekonq)\/([\w\.]+)*/i,
                    /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i
                ], [[Ua.NAME, 'IE'], Ua.VERSION], [
                    /(edge)\/((\d+)?[\w\.]+)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(yabrowser)\/([\w\.]+)/i
                ], [[Ua.NAME, 'Yandex'], Ua.VERSION], [
                    /(comodo_dragon)\/([\w\.]+)/i
                ], [[Ua.NAME, /_/g, ' '], Ua.VERSION], [
                    /(micromessenger)\/([\w\.]+)/i
                ], [[Ua.NAME, 'WeChat'], Ua.VERSION], [
                    /xiaomi\/miuibrowser\/([\w\.]+)/i,
                ], [Ua.VERSION, [Ua.NAME, 'MIUI Browser']], [
                    /\swv\).+(chrome)\/([\w\.]+)/i
                ], [[Ua.NAME, /(.+)/, '$1 WebView'], Ua.VERSION], [
                    /android.+samsungbrowser\/([\w\.]+)/i,
                    /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)/i
                ], [Ua.VERSION, [Ua.NAME, 'Android Browser']], [
                    /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,
                    /(qqbrowser)[\/\s]?([\w\.]+)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(dolfin)\/([\w\.]+)/i
                ], [[Ua.NAME, 'Dolphin'], Ua.VERSION], [
                    /((?:android.+)crmo|crios)\/([\w\.]+)/i
                ], [[Ua.NAME, 'Chrome'], Ua.VERSION], [
                    /;fbav\/([\w\.]+);/i
                ], [Ua.VERSION, [Ua.NAME, 'Facebook']], [
                    /fxios\/([\w\.-]+)/i
                ], [Ua.VERSION, [Ua.NAME, 'Firefox']], [
                    /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i
                ], [Ua.VERSION, [Ua.NAME, 'Mobile Safari']], [
                    /version\/([\w\.]+).+?(mobile\s?safari|safari)/i
                ], [Ua.VERSION, Ua.NAME], [
                    /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i
                ], [Ua.NAME, [Ua.VERSION, Ua.mapper.str, Ua.maps.browser.oldsafari.version]], [
                    /(konqueror)\/([\w\.]+)/i,
                    /(webkit|khtml)\/([\w\.]+)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(navigator|netscape)\/([\w\.-]+)/i
                ], [[Ua.NAME, 'Netscape'], Ua.VERSION], [
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                    /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
                    /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf)[\/\s]?([\w\.]+)/i,
                    /(links)\s\(([\w\.]+)/i,
                    /(gobrowser)\/?([\w\.]+)*/i,
                    /(ice\s?browser)\/v?([\w\._]+)/i,
                    /(mosaic)[\/\s]([\w\.]+)/i
                ], [Ua.NAME, Ua.VERSION]
            ],
            device: [[
                    /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i
                ], [Ua.MODEL, Ua.VENDOR, [Ua.TYPE, Ua.TABLET]], [
                    /applecoremedia\/[\w\.]+ \((ipad)/
                ], [Ua.MODEL, [Ua.VENDOR, 'Apple'], [Ua.TYPE, Ua.TABLET]], [
                    /(apple\s{0,1}tv)/i
                ], [[Ua.MODEL, 'Apple TV'], [Ua.VENDOR, 'Apple']], [
                    /(archos)\s(gamepad2?)/i,
                    /(hp).+(touchpad)/i,
                    /(hp).+(tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /\s(nook)[\w\s]+build\/(\w+)/i,
                    /(dell)\s(strea[kpr\s\d]*[\dko])/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.TABLET]], [
                    /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i
                ], [Ua.MODEL, [Ua.VENDOR, 'Amazon'], [Ua.TYPE, Ua.TABLET]], [
                    /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i
                ], [[Ua.MODEL, Ua.mapper.str, Ua.maps.device.amazon.model], [Ua.VENDOR, 'Amazon'], [Ua.TYPE, Ua.MOBILE]], [
                    /\((ip[honed|\s\w*]+);.+(apple)/i
                ], [Ua.MODEL, Ua.VENDOR, [Ua.TYPE, Ua.MOBILE]], [
                    /\((ip[honed|\s\w*]+);/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Apple'], [Ua.TYPE, Ua.MOBILE]], [
                    /(blackberry)[\s-]?(\w+)/i,
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
                    /(hp)\s([\w\s]+\w)/i,
                    /(asus)-?(\w+)/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.MOBILE]], [
                    /\(bb10;\s(\w+)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'BlackBerry'], [Ua.TYPE, Ua.MOBILE]], [
                    /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Asus'], [Ua.TYPE, Ua.TABLET]], [
                    /(sony)\s(tablet\s[ps])\sbuild\//i,
                    /(sony)?(?:sgp.+)\sbuild\//i
                ], [[Ua.VENDOR, 'Sony'], [Ua.MODEL, 'Xperia Tablet'], [Ua.TYPE, Ua.TABLET]], [
                    /(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i
                ], [[Ua.VENDOR, 'Sony'], [Ua.MODEL, 'Xperia Phone'], [Ua.TYPE, Ua.MOBILE]], [
                    /\s(ouya)\s/i,
                    /(nintendo)\s([wids3u]+)/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.CONSOLE]], [
                    /android.+;\s(shield)\sbuild/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Nvidia'], [Ua.TYPE, Ua.CONSOLE]], [
                    /(playstation\s[3portablevi]+)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Sony'], [Ua.TYPE, Ua.CONSOLE]], [
                    /(sprint\s(\w+))/i
                ], [[Ua.VENDOR, Ua.mapper.str, Ua.maps.device.sprint.vendor], [Ua.MODEL, Ua.mapper.str, Ua.maps.device.sprint.model], [Ua.TYPE, Ua.MOBILE]], [
                    /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.TABLET]], [
                    /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,
                    /(zte)-(\w+)*/i,
                    /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
                ], [Ua.VENDOR, [Ua.MODEL, /_/g, ' '], [Ua.TYPE, Ua.MOBILE]], [
                    /(nexus\s9)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'HTC'], [Ua.TYPE, Ua.TABLET]], [
                    /(nexus\s6p)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Huawei'], [Ua.TYPE, Ua.MOBILE]], [
                    /(microsoft);\s(lumia[\s\w]+)/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.MOBILE]], [
                    /[\s\(;](xbox(?:\sone)?)[\s\);]/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Microsoft'], [Ua.TYPE, Ua.CONSOLE]], [
                    /(kin\.[onetw]{3})/i
                ], [[Ua.MODEL, /\./g, ' '], [Ua.VENDOR, 'Microsoft'], [Ua.TYPE, Ua.MOBILE]], [
                    /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
                    /mot[\s-]?(\w+)*/i,
                    /(XT\d{3,4}) build\//i,
                    /(nexus\s6)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Motorola'], [Ua.TYPE, Ua.MOBILE]], [
                    /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
                ], [Ua.MODEL, [Ua.VENDOR, 'Motorola'], [Ua.TYPE, Ua.TABLET]], [
                    /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i
                ], [[Ua.VENDOR, Ua.util.trim], [Ua.MODEL, Ua.util.trim], [Ua.TYPE, Ua.SMARTTV]], [
                    /hbbtv.+maple;(\d+)/i
                ], [[Ua.MODEL, /^/, 'SmartTV'], [Ua.VENDOR, 'Samsung'], [Ua.TYPE, Ua.SMARTTV]], [
                    /\(dtv[\);].+(aquos)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Sharp'], [Ua.TYPE, Ua.SMARTTV]], [
                    /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
                    /((SM-T\w+))/i
                ], [[Ua.VENDOR, 'Samsung'], Ua.MODEL, [Ua.TYPE, Ua.TABLET]], [
                    /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
                    /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
                    /sec-((sgh\w+))/i
                ], [[Ua.VENDOR, 'Samsung'], Ua.MODEL, [Ua.TYPE, Ua.MOBILE]], [
                    /smart-tv.+(samsung)/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.SMARTTV]], [
                    /sie-(\w+)*/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Siemens'], [Ua.TYPE, Ua.MOBILE]], [
                    /(maemo|nokia).*(n900|lumia\s\d+)/i,
                    /(nokia)[\s_-]?([\w-]+)*/i
                ], [[Ua.VENDOR, 'Nokia'], Ua.MODEL, [Ua.TYPE, Ua.MOBILE]], [
                    /android\s3\.[\s\w;-]{10}(a\d{3})/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Acer'], [Ua.TYPE, Ua.TABLET]], [
                    /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i
                ], [[Ua.VENDOR, 'LG'], Ua.MODEL, [Ua.TYPE, Ua.TABLET]], [
                    /(lg) netcast\.tv/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.SMARTTV]], [
                    /(nexus\s[45])/i,
                    /lg[e;\s\/-]+(\w+)*/i
                ], [Ua.MODEL, [Ua.VENDOR, 'LG'], [Ua.TYPE, Ua.MOBILE]], [
                    /android.+(ideatab[a-z0-9\-\s]+)/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Lenovo'], [Ua.TYPE, Ua.TABLET]], [
                    /linux;.+((jolla));/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.MOBILE]], [
                    /((pebble))app\/[\d\.]+\s/i
                ], [Ua.VENDOR, Ua.MODEL, [Ua.TYPE, Ua.WEARABLE]], [
                    /android.+;\s(glass)\s\d/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Google'], [Ua.TYPE, Ua.WEARABLE]], [
                    /android.+;\s(pixel c)\s/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Google'], [Ua.TYPE, Ua.TABLET]], [
                    /android.+;\s(pixel xl|pixel)\s/i
                ], [Ua.MODEL, [Ua.VENDOR, 'Google'], [Ua.TYPE, Ua.MOBILE]], [
                    /android.+(\w+)\s+build\/hm\1/i,
                    /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,
                    /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i
                ], [[Ua.MODEL, /_/g, ' '], [Ua.VENDOR, 'Xiaomi'], [Ua.TYPE, Ua.MOBILE]], [
                    /android.+a000(1)\s+build/i
                ], [Ua.MODEL, [Ua.VENDOR, 'OnePlus'], [Ua.TYPE, Ua.MOBILE]], [
                    /\s(tablet)[;\/]/i,
                    /\s(mobile)(?:[;\/]|\ssafari)/i
                ], [[Ua.TYPE, Ua.util.lowerize], Ua.VENDOR, Ua.MODEL]
            ],
            os: [[
                    /microsoft\s(windows)\s(vista|xp)/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(windows)\snt\s6\.2;\s(arm)/i,
                    /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,
                    /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
                ], [Ua.NAME, [Ua.VERSION, Ua.mapper.str, Ua.maps.os.windows.version]], [
                    /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
                ], [[Ua.NAME, 'Windows'], [Ua.VERSION, Ua.mapper.str, Ua.maps.os.windows.version]], [
                    /\((bb)(10);/i
                ], [[Ua.NAME, 'BlackBerry'], Ua.VERSION], [
                    /(blackberry)\w*\/?([\w\.]+)*/i,
                    /(tizen)[\/\s]([\w\.]+)/i,
                    /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
                    /linux;.+(sailfish);/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i
                ], [[Ua.NAME, 'Symbian'], Ua.VERSION], [
                    /\((series40);/i
                ], [Ua.NAME], [
                    /mozilla.+\(mobile;.+gecko.+firefox/i
                ], [[Ua.NAME, 'Firefox OS'], Ua.VERSION], [
                    /(nintendo|playstation)\s([wids34portablevu]+)/i,
                    /(mint)[\/\s\(]?(\w+)*/i,
                    /(mageia|vectorlinux)[;\s]/i,
                    /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?([\w\.-]+)*/i,
                    /(hurd|linux)\s?([\w\.]+)*/i,
                    /(gnu)\s?([\w\.]+)*/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(cros)\s[\w]+\s([\w\.]+\w)/i
                ], [[Ua.NAME, 'Chromium OS'], Ua.VERSION], [
                    /(sunos)\s?([\w\.]+\d)*/i
                ], [[Ua.NAME, 'Solaris'], Ua.VERSION], [
                    /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i
                ], [Ua.NAME, Ua.VERSION], [
                    /(ip[honead]+)(?:.*os\s*([\w]+)*\slike\smac|;\sopera)/i
                ], [[Ua.NAME, 'iOS'], [Ua.VERSION, /_/g, '.']], [
                    /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
                    /(macintosh|mac(?=_powerpc)\s)/i
                ], [[Ua.NAME, 'Mac OS'], [Ua.VERSION, /_/g, '.']], [
                    /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,
                    /(haiku)\s(\w+)/i,
                    /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,
                    /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
                    /(unix)\s?([\w\.]+)*/i
                ], [Ua.NAME, Ua.VERSION]
            ]
        };
        return Ua;
    }());
    bnt.Ua = Ua;
})(bnt || (bnt = {}));
(function (bnt) {
    var UABrowser = (function () {
        function UABrowser(browser) {
            this.name = browser.name || '';
            this.version = browser.version || '';
            this.major = typeof this.version === 'string' ? this.version.split('.')[0] : '';
        }
        UABrowser.prototype.toString = function () {
            return [this.name, this.version].join('|').toLowerCase();
        };
        return UABrowser;
    }());
    bnt.UABrowser = UABrowser;
    var UAOs = (function () {
        function UAOs(os) {
            this.name = os.name || '';
            this.version = os.version || '';
            var vsplited = this.version.split('.');
            this.vmajor = vsplited[0] || '0';
            this.vminor = vsplited[1] || '0';
            this.vpatch = vsplited[2] || '0';
        }
        UAOs.prototype.toString = function () {
            return [this.name, this.version].join('|').toLowerCase();
        };
        return UAOs;
    }());
    bnt.UAOs = UAOs;
    var UADevice = (function () {
        function UADevice(device) {
            this.model = device.model || '';
            this.type = device.type || (UADevice.typeRegExp.test(Context.getOS().name) ? bnt.Ua.DESKTOP : '');
            this.vendor = device.vendor || '';
        }
        UADevice.prototype.toString = function () {
            return [this.model, this.type, this.vendor].join('|').toLowerCase();
        };
        UADevice.typeRegExp = /^windows|mac\s+os|linux|bsd|dragonfly|chromium\s+os|haiku|ubuntu|slackware|gentoo|solaris|debian|fedora|arch|beos|mint|gnu|os\/2$/i;
        return UADevice;
    }());
    bnt.UADevice = UADevice;
    var browser = typeof window !== 'undefined';
    var Context = (function () {
        function Context() {
        }
        Context.isDesktop = function () {
            return !Context.isMobile() && !Context.isTablet();
        };
        Context.isIpad = function () {
            return Context.getDevice().model === 'iPad' || /iPad/i.test(Context.getUA());
        };
        Context.isTablet = function () {
            return Context.getDevice().type === 'tablet' || Context.isIpad() || (Context.isAndroid() && !/(m|M)obile/.test(Context.getUA()));
        };
        Context.isMobile = function () {
            return Context.getDevice().type === 'mobile' || (Context.isIos() && !Context.isIpad()) || (Context.isAndroid() && /(m|M)obile/.test(Context.getUA()));
        };
        Context.isChromeIos = function () {
            return /CriOS/i.test(Context.getUA());
        };
        Context.isFacebookWebview = function () {
            return Context.getBrowser().name === 'Facebook' || /FBAN|FBIOS|FBAV|FBBV|FBDV|FBMD|FBSN|FBSV|FBSS|FBCR|FBID|FBLC|FBOP/i.test(Context.getUA());
        };
        Context.isAndroidNative = function () {
            return Context.getBrowser().name === 'Android Browser';
        };
        Context.isAndroid = function () {
            return Context.getOS().name === 'Android' || /Android/i.test(Context.getUA());
        };
        Context.isIos = function () {
            return Context.getOS().name === 'iOS' || Context.isIpad() || Context.isIphone();
        };
        Context.isIphone = function () {
            return Context.getDevice().model === 'iPhone' || /iPhone/i.test(Context.getUA());
        };
        Context.isAndroidMobile = function () {
            return Context.isAndroid() && Context.isMobile();
        };
        Context.isOldIE = function (maxVersion) {
            if (maxVersion === void 0) { maxVersion = 9; }
            return Context.isIE() && !!Context.getBrowser().major && parseInt(Context.getBrowser().major, 10) <= maxVersion;
        };
        Context.isIE = function () {
            return Context.getBrowser().name === 'IE' || /MSIE|Trident/.test(Context.getUA());
        };
        Context.isChrome = function () {
            return Context.getBrowser().name === 'Chrome' || !!window.chrome;
        };
        Context.isFirefox = function () {
            return Context.getBrowser().name === 'Firefox' || /Firefox/i.test(Context.getUA());
        };
        Context.isAmpObserveIntersection = function () {
            return !!(window.context && window.context.observeIntersection);
        };
        Context.getIEVersion = function () {
            return Context.isIE() && !!Context.getBrowser().major ? parseInt(Context.getBrowser().major, 10) : null;
        };
        Context.getAndroidVersion = function () {
            return Context.isAndroid() ? parseFloat(Context.getOS().vmajor + Context.getOS().vminor + '.' + Context.getOS().vpatch) : null;
        };
        Context.getIosVersion = function () {
            return Context.isIos() ? parseFloat(Context.getOS().vmajor + Context.getOS().vminor + '.' + Context.getOS().vpatch) : null;
        };
        Context.isUIWebview = function () {
            return (Context.isIphone() || Context.isIpad())
                && !/Safari/i.test(Context.getUA())
                && !window.navigator.standalone;
        };
        Context.isIos10Safari = function () {
            return Context.getIosVersion() >= 100 && !Context.isUIWebview() && !Context.isChromeIos();
        };
        Context.videoSupport = function (context) {
            return !!context.createElement('video').canPlayType;
        };
        Context.getLanguage = function () {
            return (window.navigator.language || window.navigator['browserLanguage'] || window.navigator['userLanguage'] || 'en');
        };
        Context.getUA = function () {
            return window.parent.navigator.userAgent;
        };
        Context.getDevice = function () {
            if (!this.device) {
                this.device = new UADevice(bnt.Ua.mapper.rgx.apply(this, bnt.Ua.regexes.device));
            }
            return this.device;
        };
        Context.getOS = function () {
            if (!this.os) {
                this.os = new UAOs(bnt.Ua.mapper.rgx.apply(this, bnt.Ua.regexes.os));
            }
            return this.os;
        };
        Context.getBrowser = function () {
            if (!this.browser) {
                this.browser = new UABrowser(bnt.Ua.mapper.rgx.apply(this, bnt.Ua.regexes.browser));
            }
            return this.browser;
        };
        Context.userAgent = (browser && window.parent).userAgent;
        return Context;
    }());
    bnt.Context = Context;
})(bnt || (bnt = {}));
var bnt;
(function (bnt) {
    var browser = typeof window !== 'undefined';
    var gv = (browser && window.parent).gv;
    var creativeId = (browser && window.parent).creativeId;
    var adaptor = (browser && window.parent).adaptor;
    var sessionId = rand(10);
    var epoch = Date.now();
    var SUMOLOGIC_ENDPOINT = 'https://s8t.teads.tv/sumo/receiver/v1/http/ZaVnC4dhaV30C0O3cbMMJzpEllrmpJZp_EzPaV7VaQizHN3XMUS00p-nzp9slFjpr4TEA8mkY5dP9g2COKQFarvJscg1_XXivqu4-qcYnHQqHlkUk7qR0Q==';
    function fetch_pixel(message) {
        bnt.logger.debug('# sumo', message);
        try {
            Object.assign(new Image(), { src: SUMOLOGIC_ENDPOINT + "?" + encodeURIComponent(message) });
        }
        catch (e) {
        }
    }
    function format_log_line(_a) {
        var timestamp = _a.timestamp, sessionId = _a.sessionId, level = _a.level, message = _a.message;
        return "[" + timestamp + "][" + sessionId + "][" + level + "] " + message;
    }
    function sumo_meta() {
        return {
            ci: creativeId,
            a: adaptor,
            t: Date.now() - epoch,
            d: bnt.Context.getDevice().type,
            o: bnt.Context.getOS().name,
            ov: bnt.Context.getOS().version,
            b: bnt.Context.getBrowser().name,
            bv: bnt.Context.getBrowser().version,
            vs: bnt.AdController.instance && bnt.AdController.instance.videoSlot && bnt.AdController.instance.videoSlot.tagName,
            gv: gv
        };
    }
    function rand(length) {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var str = '';
        for (var i = 0; i < length; i++) {
            str += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return str;
    }
    function sumo(message, level) {
        if (level === void 0) { level = 'info'; }
        var message_with_meta = Object.assign(sumo_meta(), message);
        fetch_pixel(format_log_line({
            timestamp: Date.now(),
            sessionId: sessionId,
            level: level,
            message: JSON.stringify(message_with_meta)
        }));
    }
    bnt.sumo = sumo;
})(bnt || (bnt = {}));
